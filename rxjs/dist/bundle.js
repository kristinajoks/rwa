(()=>{"use strict";var e=function(t,n){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},e(t,n)};function t(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}var n=function(){return n=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},n.apply(this,arguments)};function r(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(u){return function(c){return function(u){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,u[0]&&(a=0)),a;)try{if(n=1,r&&(o=2&u[0]?r.return:u[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,u[1])).done)return o;switch(r=0,o&&(u=[2&u[0],o.value]),u[0]){case 0:case 1:o=u;break;case 4:return a.label++,{value:u[1],done:!1};case 5:a.label++,r=u[1],u=[0];continue;case 7:u=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==u[0]&&2!==u[0])){a=0;continue}if(3===u[0]&&(!o||u[1]>o[0]&&u[1]<o[3])){a.label=u[1];break}if(6===u[0]&&a.label<o[1]){a.label=o[1],o=u;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(u);break}o[2]&&a.ops.pop(),a.trys.pop();continue}u=t.call(e,a)}catch(e){u=[6,e],r=0}finally{n=o=0}if(5&u[0])throw u[1];return{value:u[0]?u[1]:void 0,done:!0}}([u,c])}}}function o(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function i(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a}function a(e,t,n){if(n||2===arguments.length)for(var r,o=0,i=t.length;o<i;o++)!r&&o in t||(r||(r=Array.prototype.slice.call(t,0,o)),r[o]=t[o]);return e.concat(r||Array.prototype.slice.call(t))}function u(e){return this instanceof u?(this.v=e,this):new u(e)}Object.create,Object.create,"function"==typeof SuppressedError&&SuppressedError;var c=function(e){return e&&"number"==typeof e.length&&"function"!=typeof e};function s(e){return"function"==typeof e}function l(e){return s(null==e?void 0:e.then)}function d(e){var t=e((function(e){Error.call(e),e.stack=(new Error).stack}));return t.prototype=Object.create(Error.prototype),t.prototype.constructor=t,t}var f=d((function(e){return function(t){e(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(e,t){return t+1+") "+e.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t}}));function p(e,t){if(e){var n=e.indexOf(t);0<=n&&e.splice(n,1)}}var h=function(){function e(e){this.initialTeardown=e,this.closed=!1,this._parentage=null,this._finalizers=null}var t;return e.prototype.unsubscribe=function(){var e,t,n,r,u;if(!this.closed){this.closed=!0;var c=this._parentage;if(c)if(this._parentage=null,Array.isArray(c))try{for(var l=o(c),d=l.next();!d.done;d=l.next())d.value.remove(this)}catch(t){e={error:t}}finally{try{d&&!d.done&&(t=l.return)&&t.call(l)}finally{if(e)throw e.error}}else c.remove(this);var p=this.initialTeardown;if(s(p))try{p()}catch(e){u=e instanceof f?e.errors:[e]}var h=this._finalizers;if(h){this._finalizers=null;try{for(var v=o(h),m=v.next();!m.done;m=v.next()){var b=m.value;try{y(b)}catch(e){u=null!=u?u:[],e instanceof f?u=a(a([],i(u)),i(e.errors)):u.push(e)}}}catch(e){n={error:e}}finally{try{m&&!m.done&&(r=v.return)&&r.call(v)}finally{if(n)throw n.error}}}if(u)throw new f(u)}},e.prototype.add=function(t){var n;if(t&&t!==this)if(this.closed)y(t);else{if(t instanceof e){if(t.closed||t._hasParent(this))return;t._addParent(this)}(this._finalizers=null!==(n=this._finalizers)&&void 0!==n?n:[]).push(t)}},e.prototype._hasParent=function(e){var t=this._parentage;return t===e||Array.isArray(t)&&t.includes(e)},e.prototype._addParent=function(e){var t=this._parentage;this._parentage=Array.isArray(t)?(t.push(e),t):t?[t,e]:e},e.prototype._removeParent=function(e){var t=this._parentage;t===e?this._parentage=null:Array.isArray(t)&&p(t,e)},e.prototype.remove=function(t){var n=this._finalizers;n&&p(n,t),t instanceof e&&t._removeParent(this)},e.EMPTY=((t=new e).closed=!0,t),e}();function v(e){return e instanceof h||e&&"closed"in e&&s(e.remove)&&s(e.add)&&s(e.unsubscribe)}function y(e){s(e)?e():e.unsubscribe()}h.EMPTY;var m={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1},b={setTimeout:function(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var o=b.delegate;return(null==o?void 0:o.setTimeout)?o.setTimeout.apply(o,a([e,t],i(n))):setTimeout.apply(void 0,a([e,t],i(n)))},clearTimeout:function(e){var t=b.delegate;return((null==t?void 0:t.clearTimeout)||clearTimeout)(e)},delegate:void 0};function w(e){b.setTimeout((function(){var t=m.onUnhandledError;if(!t)throw e;t(e)}))}function g(){}var E=x("C",void 0,void 0);function x(e,t,n){return{kind:e,value:t,error:n}}var C=null,L=function(e){function n(t){var n=e.call(this)||this;return n.isStopped=!1,t?(n.destination=t,v(t)&&t.add(n)):n.destination=j,n}return t(n,e),n.create=function(e,t,n){return new k(e,t,n)},n.prototype.next=function(e){this.isStopped?O(function(e){return x("N",e,void 0)}(e),this):this._next(e)},n.prototype.error=function(e){this.isStopped?O(x("E",void 0,e),this):(this.isStopped=!0,this._error(e))},n.prototype.complete=function(){this.isStopped?O(E,this):(this.isStopped=!0,this._complete())},n.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,e.prototype.unsubscribe.call(this),this.destination=null)},n.prototype._next=function(e){this.destination.next(e)},n.prototype._error=function(e){try{this.destination.error(e)}finally{this.unsubscribe()}},n.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},n}(h),S=Function.prototype.bind;function T(e,t){return S.call(e,t)}var _=function(){function e(e){this.partialObserver=e}return e.prototype.next=function(e){var t=this.partialObserver;if(t.next)try{t.next(e)}catch(e){P(e)}},e.prototype.error=function(e){var t=this.partialObserver;if(t.error)try{t.error(e)}catch(e){P(e)}else P(e)},e.prototype.complete=function(){var e=this.partialObserver;if(e.complete)try{e.complete()}catch(e){P(e)}},e}(),k=function(e){function n(t,n,r){var o,i,a=e.call(this)||this;return s(t)||!t?o={next:null!=t?t:void 0,error:null!=n?n:void 0,complete:null!=r?r:void 0}:a&&m.useDeprecatedNextContext?((i=Object.create(t)).unsubscribe=function(){return a.unsubscribe()},o={next:t.next&&T(t.next,i),error:t.error&&T(t.error,i),complete:t.complete&&T(t.complete,i)}):o=t,a.destination=new _(o),a}return t(n,e),n}(L);function P(e){var t;m.useDeprecatedSynchronousErrorHandling?(t=e,m.useDeprecatedSynchronousErrorHandling&&C&&(C.errorThrown=!0,C.error=t)):w(e)}function O(e,t){var n=m.onStoppedNotification;n&&b.setTimeout((function(){return n(e,t)}))}var j={closed:!0,next:g,error:function(e){throw e},complete:g},R="function"==typeof Symbol&&Symbol.observable||"@@observable";function A(e){return e}var D=function(){function e(e){e&&(this._subscribe=e)}return e.prototype.lift=function(t){var n=new e;return n.source=this,n.operator=t,n},e.prototype.subscribe=function(e,t,n){var r,o=this,i=(r=e)&&r instanceof L||function(e){return e&&s(e.next)&&s(e.error)&&s(e.complete)}(r)&&v(r)?e:new k(e,t,n);return function(e){if(m.useDeprecatedSynchronousErrorHandling){var t=!C;if(t&&(C={errorThrown:!1,error:null}),e(),t){var n=C,r=n.errorThrown,o=n.error;if(C=null,r)throw o}}else e()}((function(){var e=o,t=e.operator,n=e.source;i.add(t?t.call(i,n):n?o._subscribe(i):o._trySubscribe(i))})),i},e.prototype._trySubscribe=function(e){try{return this._subscribe(e)}catch(t){e.error(t)}},e.prototype.forEach=function(e,t){var n=this;return new(t=I(t))((function(t,r){var o=new k({next:function(t){try{e(t)}catch(e){r(e),o.unsubscribe()}},error:r,complete:t});n.subscribe(o)}))},e.prototype._subscribe=function(e){var t;return null===(t=this.source)||void 0===t?void 0:t.subscribe(e)},e.prototype[R]=function(){return this},e.prototype.pipe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return(0===(n=e).length?A:1===n.length?n[0]:function(e){return n.reduce((function(e,t){return t(e)}),e)})(this);var n},e.prototype.toPromise=function(e){var t=this;return new(e=I(e))((function(e,n){var r;t.subscribe((function(e){return r=e}),(function(e){return n(e)}),(function(){return e(r)}))}))},e.create=function(t){return new e(t)},e}();function I(e){var t;return null!==(t=null!=e?e:m.Promise)&&void 0!==t?t:Promise}function H(e){return s(e[R])}function N(e){return Symbol.asyncIterator&&s(null==e?void 0:e[Symbol.asyncIterator])}function U(e){return new TypeError("You provided "+(null!==e&&"object"==typeof e?"an invalid object":"'"+e+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}var B="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function q(e){return s(null==e?void 0:e[B])}function M(e){return function(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=n.apply(e,t||[]),i=[];return r={},a("next"),a("throw"),a("return"),r[Symbol.asyncIterator]=function(){return this},r;function a(e){o[e]&&(r[e]=function(t){return new Promise((function(n,r){i.push([e,t,n,r])>1||c(e,t)}))})}function c(e,t){try{(n=o[e](t)).value instanceof u?Promise.resolve(n.value.v).then(s,l):d(i[0][2],n)}catch(e){d(i[0][3],e)}var n}function s(e){c("next",e)}function l(e){c("throw",e)}function d(e,t){e(t),i.shift(),i.length&&c(i[0][0],i[0][1])}}(this,arguments,(function(){var t,n,o;return r(this,(function(r){switch(r.label){case 0:t=e.getReader(),r.label=1;case 1:r.trys.push([1,,9,10]),r.label=2;case 2:return[4,u(t.read())];case 3:return n=r.sent(),o=n.value,n.done?[4,u(void 0)]:[3,5];case 4:return[2,r.sent()];case 5:return[4,u(o)];case 6:return[4,r.sent()];case 7:return r.sent(),[3,2];case 8:return[3,10];case 9:return t.releaseLock(),[7];case 10:return[2]}}))}))}function z(e){return s(null==e?void 0:e.getReader)}function F(e){if(e instanceof D)return e;if(null!=e){if(H(e))return i=e,new D((function(e){var t=i[R]();if(s(t.subscribe))return t.subscribe(e);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(c(e))return r=e,new D((function(e){for(var t=0;t<r.length&&!e.closed;t++)e.next(r[t]);e.complete()}));if(l(e))return n=e,new D((function(e){n.then((function(t){e.closed||(e.next(t),e.complete())}),(function(t){return e.error(t)})).then(null,w)}));if(N(e))return G(e);if(q(e))return t=e,new D((function(e){var n,r;try{for(var i=o(t),a=i.next();!a.done;a=i.next()){var u=a.value;if(e.next(u),e.closed)return}}catch(e){n={error:e}}finally{try{a&&!a.done&&(r=i.return)&&r.call(i)}finally{if(n)throw n.error}}e.complete()}));if(z(e))return G(M(e))}var t,n,r,i;throw U(e)}function G(e){return new D((function(t){(function(e,t){var n,i,a,u,c,s,l,d;return c=this,s=void 0,d=function(){var c,s;return r(this,(function(r){switch(r.label){case 0:r.trys.push([0,5,6,11]),n=function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,n=e[Symbol.asyncIterator];return n?n.call(e):(e=o(e),t={},r("next"),r("throw"),r("return"),t[Symbol.asyncIterator]=function(){return this},t);function r(n){t[n]=e[n]&&function(t){return new Promise((function(r,o){!function(e,t,n,r){Promise.resolve(r).then((function(t){e({value:t,done:n})}),t)}(r,o,(t=e[n](t)).done,t.value)}))}}}(e),r.label=1;case 1:return[4,n.next()];case 2:if((i=r.sent()).done)return[3,4];if(c=i.value,t.next(c),t.closed)return[2];r.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return s=r.sent(),a={error:s},[3,11];case 6:return r.trys.push([6,,9,10]),i&&!i.done&&(u=n.return)?[4,u.call(n)]:[3,8];case 7:r.sent(),r.label=8;case 8:return[3,10];case 9:if(a)throw a.error;return[7];case 10:return[7];case 11:return t.complete(),[2]}}))},new((l=void 0)||(l=Promise))((function(e,t){function n(e){try{o(d.next(e))}catch(e){t(e)}}function r(e){try{o(d.throw(e))}catch(e){t(e)}}function o(t){var o;t.done?e(t.value):(o=t.value,o instanceof l?o:new l((function(e){e(o)}))).then(n,r)}o((d=d.apply(c,s||[])).next())}))})(e,t).catch((function(e){return t.error(e)}))}))}function J(e){return function(t){if(function(e){return s(null==e?void 0:e.lift)}(t))return t.lift((function(t){try{return e(t,this)}catch(e){this.error(e)}}));throw new TypeError("Unable to lift unknown Observable type")}}function X(e,t,n,r,o){return new Y(e,t,n,r,o)}var Y=function(e){function n(t,n,r,o,i,a){var u=e.call(this,t)||this;return u.onFinalize=i,u.shouldUnsubscribe=a,u._next=n?function(e){try{n(e)}catch(e){t.error(e)}}:e.prototype._next,u._error=o?function(e){try{o(e)}catch(e){t.error(e)}finally{this.unsubscribe()}}:e.prototype._error,u._complete=r?function(){try{r()}catch(e){t.error(e)}finally{this.unsubscribe()}}:e.prototype._complete,u}return t(n,e),n.prototype.unsubscribe=function(){var t;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var n=this.closed;e.prototype.unsubscribe.call(this),!n&&(null===(t=this.onFinalize)||void 0===t||t.call(this))}},n}(L);function V(e,t){return J((function(n,r){var o=0;n.subscribe(X(r,(function(n){r.next(e.call(t,n,o++))})))}))}function W(e,t,n,r,o){void 0===r&&(r=0),void 0===o&&(o=!1);var i=t.schedule((function(){n(),o?e.add(this.schedule(null,r)):this.unsubscribe()}),r);if(e.add(i),!o)return i}function K(e,t,n){return void 0===n&&(n=1/0),s(t)?K((function(n,r){return V((function(e,o){return t(n,e,r,o)}))(F(e(n,r)))}),n):("number"==typeof t&&(n=t),J((function(t,r){return function(e,t,n,r,o,i,a,u){var c=[],s=0,l=0,d=!1,f=function(){!d||c.length||s||t.complete()},p=function(e){return s<r?h(e):c.push(e)},h=function(e){s++;var o=!1;F(n(e,l++)).subscribe(X(t,(function(e){t.next(e)}),(function(){o=!0}),void 0,(function(){if(o)try{s--;for(;c.length&&s<r;)e=void 0,e=c.shift(),h(e);f()}catch(e){t.error(e)}var e})))};return e.subscribe(X(t,p,(function(){d=!0,f()}))),function(){}}(t,r,e,n)})))}var Q=Array.isArray;var Z=["addListener","removeListener"],$=["addEventListener","removeEventListener"],ee=["on","off"];function te(e,t,n,r){if(s(n)&&(r=n,n=void 0),r)return te(e,t,n).pipe((o=r,V((function(e){return function(e,t){return Q(t)?e.apply(void 0,a([],i(t))):e(t)}(o,e)}))));var o,u=i(function(e){return s(e.addEventListener)&&s(e.removeEventListener)}(e)?$.map((function(r){return function(o){return e[r](t,o,n)}})):function(e){return s(e.addListener)&&s(e.removeListener)}(e)?Z.map(ne(e,t)):function(e){return s(e.on)&&s(e.off)}(e)?ee.map(ne(e,t)):[],2),l=u[0],d=u[1];if(!l&&c(e))return K((function(e){return te(e,t,n)}))(F(e));if(!l)throw new TypeError("Invalid event target");return new D((function(e){var t=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return e.next(1<t.length?t:t[0])};return l(t),function(){return d(t)}}))}function ne(e,t){return function(n){return function(r){return e[n](t,r)}}}function re(e){return(n=(t=e)[t.length-1])&&s(n.schedule)?e.pop():void 0;var t,n}function oe(e,t){return void 0===t&&(t=0),J((function(n,r){n.subscribe(X(r,(function(n){return W(r,e,(function(){return r.next(n)}),t)}),(function(){return W(r,e,(function(){return r.complete()}),t)}),(function(n){return W(r,e,(function(){return r.error(n)}),t)})))}))}function ie(e,t){return void 0===t&&(t=0),J((function(n,r){r.add(e.schedule((function(){return n.subscribe(r)}),t))}))}function ae(e,t){if(!e)throw new Error("Iterable cannot be null");return new D((function(n){W(n,t,(function(){var r=e[Symbol.asyncIterator]();W(n,t,(function(){r.next().then((function(e){e.done?n.complete():n.next(e.value)}))}),0,!0)}))}))}function ue(){for(var e,t,n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];return(void 0===(o=1)&&(o=1/0),K(A,o))((e=n,(t=re(n))?function(e,t){if(null!=e){if(H(e))return function(e,t){return F(e).pipe(ie(t),oe(t))}(e,t);if(c(e))return function(e,t){return new D((function(n){var r=0;return t.schedule((function(){r===e.length?n.complete():(n.next(e[r++]),n.closed||this.schedule())}))}))}(e,t);if(l(e))return function(e,t){return F(e).pipe(ie(t),oe(t))}(e,t);if(N(e))return ae(e,t);if(q(e))return function(e,t){return new D((function(n){var r;return W(n,t,(function(){r=e[B](),W(n,t,(function(){var e,t,o;try{t=(e=r.next()).value,o=e.done}catch(e){return void n.error(e)}o?n.complete():n.next(t)}),0,!0)})),function(){return s(null==r?void 0:r.return)&&r.return()}}))}(e,t);if(z(e))return function(e,t){return ae(M(e),t)}(e,t)}throw U(e)}(e,t):F(e)));var o}function ce(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=re(e);return J((function(t,r){(n?ue(e,t,n):ue(e,t)).subscribe(r)}))}function se(e){switch(e.responseType){case"json":if("response"in e)return e.response;var t=e;return JSON.parse(t.responseText);case"document":return e.responseXML;default:return"response"in e?e.response:(t=e).responseText}}var le=function(e,t,n,r){void 0===r&&(r="download_load"),this.originalEvent=e,this.xhr=t,this.request=n,this.type=r;var o=t.status,i=t.responseType;this.status=null!=o?o:0,this.responseType=null!=i?i:"";var a=t.getAllResponseHeaders();this.responseHeaders=a?a.split("\n").reduce((function(e,t){var n=t.indexOf(": ");return e[t.slice(0,n)]=t.slice(n+2),e}),{}):{},this.response=se(t);var u=e.loaded,c=e.total;this.loaded=u,this.total=c},de=d((function(e){return function(e,t,n){var r;this.message=e,this.name="AjaxError",this.xhr=t,this.request=n,this.status=t.status,this.responseType=t.responseType;try{r=se(t)}catch(e){r=t.responseText}this.response=r}})),fe=function(){function e(e,t){return de.call(this,"ajax timeout",e,t),this.name="AjaxTimeoutError",this}return e.prototype=Object.create(de.prototype),e}();var pe=V((function(e){return e.response}));var he,ve=(he=function(e){var t;return t="string"==typeof e?{url:e}:e,new D((function(e){var r,o,i,a=n({async:!0,crossDomain:!1,withCredentials:!1,method:"GET",timeout:0,responseType:"json"},t),u=a.queryParams,c=a.body,s=a.headers,l=a.url;if(!l)throw new TypeError("url is required");if(u)if(l.includes("?")){var d=l.split("?");if(2<d.length)throw new TypeError("invalid url");i=new URLSearchParams(d[1]),new URLSearchParams(u).forEach((function(e,t){return i.set(t,e)})),l=d[0]+"?"+i}else l=l+"?"+(i=new URLSearchParams(u));var f={};if(s)for(var p in s)s.hasOwnProperty(p)&&(f[p.toLowerCase()]=s[p]);var h=a.crossDomain;h||"x-requested-with"in f||(f["x-requested-with"]="XMLHttpRequest");var v=a.withCredentials,y=a.xsrfCookieName,m=a.xsrfHeaderName;if((v||!h)&&y&&m){var b=null!==(o=null===(r=null===document||void 0===document?void 0:document.cookie.match(new RegExp("(^|;\\s*)("+y+")=([^;]*)")))||void 0===r?void 0:r.pop())&&void 0!==o?o:"";b&&(f[m]=b)}var w,g=function(e,t){var n;if(!e||"string"==typeof e||function(e){return"undefined"!=typeof FormData&&e instanceof FormData}(e)||function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams}(e)||function(e){return xe(e,"ArrayBuffer")}(e)||function(e){return xe(e,"File")}(e)||function(e){return xe(e,"Blob")}(e)||function(e){return"undefined"!=typeof ReadableStream&&e instanceof ReadableStream}(e))return e;if(function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView(e)}(e))return e.buffer;if("object"==typeof e)return t["content-type"]=null!==(n=t["content-type"])&&void 0!==n?n:"application/json;charset=utf-8",JSON.stringify(e);throw new TypeError("Unknown body type")}(c,f),E=n(n({},a),{url:l,headers:f,body:g});w=t.createXHR?t.createXHR():new XMLHttpRequest;var x=t.progressSubscriber,C=t.includeDownloadProgress,L=void 0!==C&&C,S=t.includeUploadProgress,T=void 0!==S&&S,_=function(t,n){w.addEventListener(t,(function(){var t,r=n();null===(t=null==x?void 0:x.error)||void 0===t||t.call(x,r),e.error(r)}))};_("timeout",(function(){return new fe(w,E)})),_("abort",(function(){return new de("aborted",w,E)}));var k=function(e,t){return new le(t,w,E,e+"_"+t.type)},P=function(t,n,r){t.addEventListener(n,(function(t){e.next(k(r,t))}))};T&&[be,we,ge].forEach((function(e){return P(w.upload,e,ye)})),x&&[be,we].forEach((function(e){return w.upload.addEventListener(e,(function(e){var t;return null===(t=null==x?void 0:x.next)||void 0===t?void 0:t.call(x,e)}))})),L&&[be,we].forEach((function(e){return P(w,e,me)}));var O=function(t){var n="ajax error"+(t?" "+t:"");e.error(new de(n,w,E))};w.addEventListener("error",(function(e){var t;null===(t=null==x?void 0:x.error)||void 0===t||t.call(x,e),O()})),w.addEventListener(ge,(function(t){var n,r,o=w.status;if(o<400){null===(n=null==x?void 0:x.complete)||void 0===n||n.call(x);var i=void 0;try{i=k(me,t)}catch(t){return void e.error(t)}e.next(i),e.complete()}else null===(r=null==x?void 0:x.error)||void 0===r||r.call(x,t),O(o)}));var j=E.user,R=E.method,A=E.async;for(var p in j?w.open(R,l,A,j,E.password):w.open(R,l,A),A&&(w.timeout=E.timeout,w.responseType=E.responseType),"withCredentials"in w&&(w.withCredentials=E.withCredentials),f)f.hasOwnProperty(p)&&w.setRequestHeader(p,f[p]);return g?w.send(g):w.send(),function(){w&&4!==w.readyState&&w.abort()}}))},he.get=function(e,t){return ve({method:"GET",url:e,headers:t})},he.post=function(e,t,n){return ve({method:"POST",url:e,body:t,headers:n})},he.delete=function(e,t){return ve({method:"DELETE",url:e,headers:t})},he.put=function(e,t,n){return ve({method:"PUT",url:e,body:t,headers:n})},he.patch=function(e,t,n){return ve({method:"PATCH",url:e,body:t,headers:n})},he.getJSON=function(e,t){return pe(ve({method:"GET",url:e,headers:t}))},he),ye="upload",me="download",be="loadstart",we="progress",ge="load",Ee=Object.prototype.toString;function xe(e,t){return Ee.call(e)==="[object "+t+"]"}var Ce=ve.getJSON("".concat("http://localhost:3000","/db")).pipe(V((function(e){return e})),function e(t){return J((function(n,r){var o,i=null,a=!1;i=n.subscribe(X(r,void 0,void 0,(function(u){o=F(t(u,e(t)(n))),i?(i.unsubscribe(),i=null,o.subscribe(r)):a=!0}))),a&&(i.unsubscribe(),i=null,o.subscribe(r))}))}((function(e){throw console.error(e),e}))),Le=document.getElementsByClassName("shapeCheckboxes"),Se=document.getElementsByClassName("foodCheckboxes"),Te=document.getElementsByClassName("speedCheckboxes"),_e=(document.getElementsByClassName("fruitCheckboxes"),document.getElementsByClassName("vegetableCheckboxes"),te(Le,"change").pipe(V((function(e){return e.target.value})),ce("round")));function ke(e,t){var n=e.width/t,r=e.height/t,o=e.getContext("2d");if(!o)throw new Error("Canvas not supported in this browser.");o.clearRect(0,0,e.width,e.height),o.strokeStyle="green",o.lineWidth=1.2,o.lineCap="square",o.lineJoin="miter";for(var i=0;i<=e.width;i+=n)o.beginPath(),o.moveTo(i,0),o.lineTo(i,e.height),o.stroke();for(var a=0;a<=e.height;a+=r)o.beginPath(),o.moveTo(0,a),o.lineTo(e.width,a),o.stroke();return e}te(Se,"change").pipe(V((function(e){return e.target.value})),ce("fruit")),te(Te,"change").pipe(V((function(e){return e.target.value})),ce("normal")),function(e){var t=document.createElement("div");t.classList.add("upper-container"),e.appendChild(t);var n=document.createElement("h1");n.textContent="rxj",t.appendChild(n);var r=document.createElement("img");r.src="src\\assets\\snake (1).png",r.alt="snake",r.classList.add("sss"),t.appendChild(r);var o=document.createElement("h1");o.textContent="nake",t.appendChild(o);var i=document.createElement("div");i.classList.add("lower-container"),e.appendChild(i);var a=document.createElement("div");a.classList.add("left-container"),i.appendChild(a);var u=document.createElement("div");u.classList.add("game-container"),i.appendChild(u);var c=document.createElement("canvas");c.id="game-canvas",u.appendChild(c),function(){var e=document.getElementById("game-canvas");ke(e,10),function(e,t,n,r,o,i){var a=e.getContext("2d"),u=e.getBoundingClientRect();a.clearRect(u.left,u.top,e.width,e.height),a.fillStyle="green",a.strokeStyle="black",a.lineWidth=2;for(var c=0,s=[{x:0,y:0},{x:1,y:0}];c<s.length;c++){var l=s[c],d=l.x*r,f=l.y*o;a.fillRect(d,f,r,o),a.strokeRect(d,f,r,o)}}(e,0,0,e.width/10*.8,e.height/10*.8)}();var s=document.createElement("div");s.classList.add("right-container"),i.appendChild(s);var l=document.createElement("div");l.classList.add("settings-section"),Ce.subscribe({next:function(e){var t=e.shapes,n=e.food,r=e.speed,o=e.fruit,i=e.vegetable;!function(e,t,n,r,o,i){var a=document.createElement("div");a.classList.add("dimDiv"),e.appendChild(a);var u=document.createElement("h3");u.classList.add("dimension"),u.textContent="Dimension",a.appendChild(u);var c=document.createElement("input");c.type="range",c.min="5",c.max="10",c.step="1",c.classList.add("slider"),c.id="slider",a.appendChild(c);var s=document.createElement("text");s.classList.add("sliderValue"),s.id="sliderValue",s.textContent="10",a.appendChild(s);var l=document.createElement("div");l.classList.add("shapeDiv"),e.appendChild(l);var d=document.createElement("h3");d.classList.add("shape"),d.textContent="Snake shape",l.appendChild(d);var f=document.createElement("div");f.classList.add("shapeCheckboxes"),l.appendChild(f);var p={round:"●",square:"■",zigzag:"▲"};t.forEach((function(e){var t=document.createElement("div");t.classList.add("shapeCheckboxContainer");var n=document.createElement("input");n.type="radio",n.name="shapes",n.value=e.type,n.id=e.id.toString();var r=document.createElement("label");r.classList.add("shapeLabel"),r.innerHTML="".concat(p[e.type]),t.appendChild(r),t.appendChild(n),f.appendChild(t)}));var h=document.createElement("div");h.classList.add("foodDiv"),e.appendChild(h);var v=document.createElement("h3");v.classList.add("foodType"),v.textContent="Food",h.appendChild(v);var y=document.createElement("div");y.classList.add("foodCheckboxes"),h.appendChild(y),n.forEach((function(e){var t=document.createElement("div");t.classList.add("foodCheckboxContainer");var n=document.createElement("input");n.type="radio",n.name="food",n.value=e.type,n.id=e.id.toString();var r=document.createElement("label");r.classList.add("foodLabel"),r.innerHTML="".concat(e.type),t.appendChild(r),t.appendChild(n),y.appendChild(t)}));var m=document.createElement("div");m.classList.add("fruitDiv"),m.id="fruitDiv",e.appendChild(m),o.forEach((function(e){var t=document.createElement("div");t.classList.add("fruitCheckboxContainer");var n=document.createElement("input");n.type="checkbox",n.name="fruit",n.value=e.type;var r=document.createElement("img");r.classList.add("fruitLabel"),r.src="src\\assets\\".concat(e.type,".png"),t.appendChild(r),t.appendChild(n),m.appendChild(t)}));var b=document.querySelector('input[name="food"][value="fruit"]'),w=document.querySelector('input[name="food"][value="vegetable"]');b.addEventListener("change",(function(){b.checked?(m.style.display="flex",g.style.display="none"):m.style.display="none"})),w.addEventListener("change",(function(){w.checked?(g.style.display="flex",m.style.display="none"):g.style.display="none"}));var g=document.createElement("div");g.classList.add("vegetableDiv"),g.id="vegetableDiv",e.appendChild(g),i.forEach((function(e){var t=document.createElement("div");t.classList.add("vegetableCheckboxContainer");var n=document.createElement("input");n.type="checkbox",n.name="vegetable",n.value=e.type;var r=document.createElement("img");r.classList.add("vegetableLabel"),r.src="src\\assets\\".concat(e.type,".png"),t.appendChild(r),t.appendChild(n),g.appendChild(t)})),document.getElementById("game-canvas"),c.value;var E=document.createElement("div");E.classList.add("speedDiv"),e.appendChild(E);var x=document.createElement("h3");x.classList.add("speed"),x.textContent="Speed",E.appendChild(x);var C=document.createElement("div");C.classList.add("speedCheckboxes"),E.appendChild(C),r.forEach((function(e){var t=document.createElement("div");t.classList.add("speedCheckboxContainer");var n=document.createElement("input");n.type="radio",n.name="speed",n.value=e.type,n.id="shapeChbx";var r=document.createElement("label");r.classList.add("speedLabel"),r.innerHTML="".concat(e.type),t.appendChild(r),t.appendChild(n),C.appendChild(t)})),te(c,"input").pipe(V((function(e){return e.target.value})),ce(c.value)).subscribe((function(e){s.textContent=e;var t=ke(document.getElementById("game-canvas"),parseInt(e));!function(e,t,n,r,o){console.log("drawFruit");var i=e.getContext("2d");if(!i)throw new Error("Canvas not supported in this browser.");var a=e.getBoundingClientRect();i.clearRect(a.left,a.top,a.width,a.height);var u=new Image;u.src="src\\assets\\plum.png",u.onload=function(){var e=Math.floor(Math.random()*o)*t,r=Math.floor(Math.random()*o)*n;i.drawImage(u,e,r,t,n)},u.alt="apple",u.classList.add("fruit")}(t,t.width/e,t.height/e,0,e)})),_e.subscribe((function(e){console.log(e)}))}(l,t,n,r,o,i)}}),a.appendChild(l);var d=document.createElement("button");d.textContent="START GAME",d.id="start-button",a.appendChild(d);var f=document.createElement("button");f.textContent="Show Results",f.id="show-results-button",s.appendChild(f);var p=document.createElement("div");p.classList.add("results-section"),p.style.display="none",s.appendChild(p),f.addEventListener("click",(function(){p.style.display="none"===p.style.display?"block":"none"}))}(document.body)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,