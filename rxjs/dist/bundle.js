(()=>{"use strict";function e(e){return"function"==typeof e}function t(t){return function(n){if(function(t){return e(null==t?void 0:t.lift)}(n))return n.lift((function(e){try{return t(e,this)}catch(e){this.error(e)}}));throw new TypeError("Unable to lift unknown Observable type")}}var n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},n(e,t)};function r(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}var o=function(){return o=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},o.apply(this,arguments)};function i(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(c){return function(u){return function(c){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,c[0]&&(a=0)),a;)try{if(n=1,r&&(o=2&c[0]?r.return:c[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,c[1])).done)return o;switch(r=0,o&&(c=[2&c[0],o.value]),c[0]){case 0:case 1:o=c;break;case 4:return a.label++,{value:c[1],done:!1};case 5:a.label++,r=c[1],c=[0];continue;case 7:c=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==c[0]&&2!==c[0])){a=0;continue}if(3===c[0]&&(!o||c[1]>o[0]&&c[1]<o[3])){a.label=c[1];break}if(6===c[0]&&a.label<o[1]){a.label=o[1],o=c;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(c);break}o[2]&&a.ops.pop(),a.trys.pop();continue}c=t.call(e,a)}catch(e){c=[6,e],r=0}finally{n=o=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,u])}}}function a(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function c(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a}function u(e,t,n){if(n||2===arguments.length)for(var r,o=0,i=t.length;o<i;o++)!r&&o in t||(r||(r=Array.prototype.slice.call(t,0,o)),r[o]=t[o]);return e.concat(r||Array.prototype.slice.call(t))}function s(e){return this instanceof s?(this.v=e,this):new s(e)}function l(e){var t=e((function(e){Error.call(e),e.stack=(new Error).stack}));return t.prototype=Object.create(Error.prototype),t.prototype.constructor=t,t}Object.create,Object.create,"function"==typeof SuppressedError&&SuppressedError;var d=l((function(e){return function(t){e(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(e,t){return t+1+") "+e.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t}}));function f(e,t){if(e){var n=e.indexOf(t);0<=n&&e.splice(n,1)}}var p=function(){function t(e){this.initialTeardown=e,this.closed=!1,this._parentage=null,this._finalizers=null}var n;return t.prototype.unsubscribe=function(){var t,n,r,o,i;if(!this.closed){this.closed=!0;var s=this._parentage;if(s)if(this._parentage=null,Array.isArray(s))try{for(var l=a(s),f=l.next();!f.done;f=l.next())f.value.remove(this)}catch(e){t={error:e}}finally{try{f&&!f.done&&(n=l.return)&&n.call(l)}finally{if(t)throw t.error}}else s.remove(this);var p=this.initialTeardown;if(e(p))try{p()}catch(e){i=e instanceof d?e.errors:[e]}var h=this._finalizers;if(h){this._finalizers=null;try{for(var y=a(h),m=y.next();!m.done;m=y.next()){var b=m.value;try{v(b)}catch(e){i=null!=i?i:[],e instanceof d?i=u(u([],c(i)),c(e.errors)):i.push(e)}}}catch(e){r={error:e}}finally{try{m&&!m.done&&(o=y.return)&&o.call(y)}finally{if(r)throw r.error}}}if(i)throw new d(i)}},t.prototype.add=function(e){var n;if(e&&e!==this)if(this.closed)v(e);else{if(e instanceof t){if(e.closed||e._hasParent(this))return;e._addParent(this)}(this._finalizers=null!==(n=this._finalizers)&&void 0!==n?n:[]).push(e)}},t.prototype._hasParent=function(e){var t=this._parentage;return t===e||Array.isArray(t)&&t.includes(e)},t.prototype._addParent=function(e){var t=this._parentage;this._parentage=Array.isArray(t)?(t.push(e),t):t?[t,e]:e},t.prototype._removeParent=function(e){var t=this._parentage;t===e?this._parentage=null:Array.isArray(t)&&f(t,e)},t.prototype.remove=function(e){var n=this._finalizers;n&&f(n,e),e instanceof t&&e._removeParent(this)},t.EMPTY=((n=new t).closed=!0,n),t}();function h(t){return t instanceof p||t&&"closed"in t&&e(t.remove)&&e(t.add)&&e(t.unsubscribe)}function v(t){e(t)?t():t.unsubscribe()}p.EMPTY;var y={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1},m={setTimeout:function(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var o=m.delegate;return(null==o?void 0:o.setTimeout)?o.setTimeout.apply(o,u([e,t],c(n))):setTimeout.apply(void 0,u([e,t],c(n)))},clearTimeout:function(e){var t=m.delegate;return((null==t?void 0:t.clearTimeout)||clearTimeout)(e)},delegate:void 0};function b(e){m.setTimeout((function(){var t=y.onUnhandledError;if(!t)throw e;t(e)}))}function w(){}var g=E("C",void 0,void 0);function E(e,t,n){return{kind:e,value:t,error:n}}var x=null,C=function(e){function t(t){var n=e.call(this)||this;return n.isStopped=!1,t?(n.destination=t,h(t)&&t.add(n)):n.destination=O,n}return r(t,e),t.create=function(e,t,n){return new _(e,t,n)},t.prototype.next=function(e){this.isStopped?k(function(e){return E("N",e,void 0)}(e),this):this._next(e)},t.prototype.error=function(e){this.isStopped?k(E("E",void 0,e),this):(this.isStopped=!0,this._error(e))},t.prototype.complete=function(){this.isStopped?k(g,this):(this.isStopped=!0,this._complete())},t.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,e.prototype.unsubscribe.call(this),this.destination=null)},t.prototype._next=function(e){this.destination.next(e)},t.prototype._error=function(e){try{this.destination.error(e)}finally{this.unsubscribe()}},t.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},t}(p),S=Function.prototype.bind;function T(e,t){return S.call(e,t)}var L=function(){function e(e){this.partialObserver=e}return e.prototype.next=function(e){var t=this.partialObserver;if(t.next)try{t.next(e)}catch(e){P(e)}},e.prototype.error=function(e){var t=this.partialObserver;if(t.error)try{t.error(e)}catch(e){P(e)}else P(e)},e.prototype.complete=function(){var e=this.partialObserver;if(e.complete)try{e.complete()}catch(e){P(e)}},e}(),_=function(t){function n(n,r,o){var i,a,c=t.call(this)||this;return e(n)||!n?i={next:null!=n?n:void 0,error:null!=r?r:void 0,complete:null!=o?o:void 0}:c&&y.useDeprecatedNextContext?((a=Object.create(n)).unsubscribe=function(){return c.unsubscribe()},i={next:n.next&&T(n.next,a),error:n.error&&T(n.error,a),complete:n.complete&&T(n.complete,a)}):i=n,c.destination=new L(i),c}return r(n,t),n}(C);function P(e){var t;y.useDeprecatedSynchronousErrorHandling?(t=e,y.useDeprecatedSynchronousErrorHandling&&x&&(x.errorThrown=!0,x.error=t)):b(e)}function k(e,t){var n=y.onStoppedNotification;n&&m.setTimeout((function(){return n(e,t)}))}var O={closed:!0,next:w,error:function(e){throw e},complete:w};function j(e,t,n,r,o){return new D(e,t,n,r,o)}var D=function(e){function t(t,n,r,o,i,a){var c=e.call(this,t)||this;return c.onFinalize=i,c.shouldUnsubscribe=a,c._next=n?function(e){try{n(e)}catch(e){t.error(e)}}:e.prototype._next,c._error=o?function(e){try{o(e)}catch(e){t.error(e)}finally{this.unsubscribe()}}:e.prototype._error,c._complete=r?function(){try{r()}catch(e){t.error(e)}finally{this.unsubscribe()}}:e.prototype._complete,c}return r(t,e),t.prototype.unsubscribe=function(){var t;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var n=this.closed;e.prototype.unsubscribe.call(this),!n&&(null===(t=this.onFinalize)||void 0===t||t.call(this))}},t}(C);function A(e,n){return t((function(t,r){var o=0;t.subscribe(j(r,(function(t){r.next(e.call(n,t,o++))})))}))}var R=function(e){return e&&"number"==typeof e.length&&"function"!=typeof e};function I(t){return e(null==t?void 0:t.then)}var H="function"==typeof Symbol&&Symbol.observable||"@@observable";function U(e){return e}var q=function(){function t(e){e&&(this._subscribe=e)}return t.prototype.lift=function(e){var n=new t;return n.source=this,n.operator=e,n},t.prototype.subscribe=function(t,n,r){var o,i=this,a=(o=t)&&o instanceof C||function(t){return t&&e(t.next)&&e(t.error)&&e(t.complete)}(o)&&h(o)?t:new _(t,n,r);return function(e){if(y.useDeprecatedSynchronousErrorHandling){var t=!x;if(t&&(x={errorThrown:!1,error:null}),e(),t){var n=x,r=n.errorThrown,o=n.error;if(x=null,r)throw o}}else e()}((function(){var e=i,t=e.operator,n=e.source;a.add(t?t.call(a,n):n?i._subscribe(a):i._trySubscribe(a))})),a},t.prototype._trySubscribe=function(e){try{return this._subscribe(e)}catch(t){e.error(t)}},t.prototype.forEach=function(e,t){var n=this;return new(t=M(t))((function(t,r){var o=new _({next:function(t){try{e(t)}catch(e){r(e),o.unsubscribe()}},error:r,complete:t});n.subscribe(o)}))},t.prototype._subscribe=function(e){var t;return null===(t=this.source)||void 0===t?void 0:t.subscribe(e)},t.prototype[H]=function(){return this},t.prototype.pipe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return(0===(n=e).length?U:1===n.length?n[0]:function(e){return n.reduce((function(e,t){return t(e)}),e)})(this);var n},t.prototype.toPromise=function(e){var t=this;return new(e=M(e))((function(e,n){var r;t.subscribe((function(e){return r=e}),(function(e){return n(e)}),(function(){return e(r)}))}))},t.create=function(e){return new t(e)},t}();function M(e){var t;return null!==(t=null!=e?e:y.Promise)&&void 0!==t?t:Promise}function N(t){return e(t[H])}function B(t){return Symbol.asyncIterator&&e(null==t?void 0:t[Symbol.asyncIterator])}function z(e){return new TypeError("You provided "+(null!==e&&"object"==typeof e?"an invalid object":"'"+e+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}var F="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function G(t){return e(null==t?void 0:t[F])}function X(e){return function(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=n.apply(e,t||[]),i=[];return r={},a("next"),a("throw"),a("return"),r[Symbol.asyncIterator]=function(){return this},r;function a(e){o[e]&&(r[e]=function(t){return new Promise((function(n,r){i.push([e,t,n,r])>1||c(e,t)}))})}function c(e,t){try{(n=o[e](t)).value instanceof s?Promise.resolve(n.value.v).then(u,l):d(i[0][2],n)}catch(e){d(i[0][3],e)}var n}function u(e){c("next",e)}function l(e){c("throw",e)}function d(e,t){e(t),i.shift(),i.length&&c(i[0][0],i[0][1])}}(this,arguments,(function(){var t,n,r;return i(this,(function(o){switch(o.label){case 0:t=e.getReader(),o.label=1;case 1:o.trys.push([1,,9,10]),o.label=2;case 2:return[4,s(t.read())];case 3:return n=o.sent(),r=n.value,n.done?[4,s(void 0)]:[3,5];case 4:return[2,o.sent()];case 5:return[4,s(r)];case 6:return[4,o.sent()];case 7:return o.sent(),[3,2];case 8:return[3,10];case 9:return t.releaseLock(),[7];case 10:return[2]}}))}))}function J(t){return e(null==t?void 0:t.getReader)}function Y(t){if(t instanceof q)return t;if(null!=t){if(N(t))return i=t,new q((function(t){var n=i[H]();if(e(n.subscribe))return n.subscribe(t);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(R(t))return o=t,new q((function(e){for(var t=0;t<o.length&&!e.closed;t++)e.next(o[t]);e.complete()}));if(I(t))return r=t,new q((function(e){r.then((function(t){e.closed||(e.next(t),e.complete())}),(function(t){return e.error(t)})).then(null,b)}));if(B(t))return V(t);if(G(t))return n=t,new q((function(e){var t,r;try{for(var o=a(n),i=o.next();!i.done;i=o.next()){var c=i.value;if(e.next(c),e.closed)return}}catch(e){t={error:e}}finally{try{i&&!i.done&&(r=o.return)&&r.call(o)}finally{if(t)throw t.error}}e.complete()}));if(J(t))return V(X(t))}var n,r,o,i;throw z(t)}function V(e){return new q((function(t){(function(e,t){var n,r,o,c,u,s,l,d;return u=this,s=void 0,d=function(){var u,s;return i(this,(function(i){switch(i.label){case 0:i.trys.push([0,5,6,11]),n=function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,n=e[Symbol.asyncIterator];return n?n.call(e):(e=a(e),t={},r("next"),r("throw"),r("return"),t[Symbol.asyncIterator]=function(){return this},t);function r(n){t[n]=e[n]&&function(t){return new Promise((function(r,o){!function(e,t,n,r){Promise.resolve(r).then((function(t){e({value:t,done:n})}),t)}(r,o,(t=e[n](t)).done,t.value)}))}}}(e),i.label=1;case 1:return[4,n.next()];case 2:if((r=i.sent()).done)return[3,4];if(u=r.value,t.next(u),t.closed)return[2];i.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return s=i.sent(),o={error:s},[3,11];case 6:return i.trys.push([6,,9,10]),r&&!r.done&&(c=n.return)?[4,c.call(n)]:[3,8];case 7:i.sent(),i.label=8;case 8:return[3,10];case 9:if(o)throw o.error;return[7];case 10:return[7];case 11:return t.complete(),[2]}}))},new((l=void 0)||(l=Promise))((function(e,t){function n(e){try{o(d.next(e))}catch(e){t(e)}}function r(e){try{o(d.throw(e))}catch(e){t(e)}}function o(t){var o;t.done?e(t.value):(o=t.value,o instanceof l?o:new l((function(e){e(o)}))).then(n,r)}o((d=d.apply(u,s||[])).next())}))})(e,t).catch((function(e){return t.error(e)}))}))}function W(e){switch(e.responseType){case"json":if("response"in e)return e.response;var t=e;return JSON.parse(t.responseText);case"document":return e.responseXML;default:return"response"in e?e.response:(t=e).responseText}}var K=function(e,t,n,r){void 0===r&&(r="download_load"),this.originalEvent=e,this.xhr=t,this.request=n,this.type=r;var o=t.status,i=t.responseType;this.status=null!=o?o:0,this.responseType=null!=i?i:"";var a=t.getAllResponseHeaders();this.responseHeaders=a?a.split("\n").reduce((function(e,t){var n=t.indexOf(": ");return e[t.slice(0,n)]=t.slice(n+2),e}),{}):{},this.response=W(t);var c=e.loaded,u=e.total;this.loaded=c,this.total=u},Q=l((function(e){return function(e,t,n){var r;this.message=e,this.name="AjaxError",this.xhr=t,this.request=n,this.status=t.status,this.responseType=t.responseType;try{r=W(t)}catch(e){r=t.responseText}this.response=r}})),Z=function(){function e(e,t){return Q.call(this,"ajax timeout",e,t),this.name="AjaxTimeoutError",this}return e.prototype=Object.create(Q.prototype),e}();var $=A((function(e){return e.response}));var ee,te=(ee=function(e){var t;return t="string"==typeof e?{url:e}:e,new q((function(e){var n,r,i,a=o({async:!0,crossDomain:!1,withCredentials:!1,method:"GET",timeout:0,responseType:"json"},t),c=a.queryParams,u=a.body,s=a.headers,l=a.url;if(!l)throw new TypeError("url is required");if(c)if(l.includes("?")){var d=l.split("?");if(2<d.length)throw new TypeError("invalid url");i=new URLSearchParams(d[1]),new URLSearchParams(c).forEach((function(e,t){return i.set(t,e)})),l=d[0]+"?"+i}else l=l+"?"+(i=new URLSearchParams(c));var f={};if(s)for(var p in s)s.hasOwnProperty(p)&&(f[p.toLowerCase()]=s[p]);var h=a.crossDomain;h||"x-requested-with"in f||(f["x-requested-with"]="XMLHttpRequest");var v=a.withCredentials,y=a.xsrfCookieName,m=a.xsrfHeaderName;if((v||!h)&&y&&m){var b=null!==(r=null===(n=null===document||void 0===document?void 0:document.cookie.match(new RegExp("(^|;\\s*)("+y+")=([^;]*)")))||void 0===n?void 0:n.pop())&&void 0!==r?r:"";b&&(f[m]=b)}var w,g=function(e,t){var n;if(!e||"string"==typeof e||function(e){return"undefined"!=typeof FormData&&e instanceof FormData}(e)||function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams}(e)||function(e){return ue(e,"ArrayBuffer")}(e)||function(e){return ue(e,"File")}(e)||function(e){return ue(e,"Blob")}(e)||function(e){return"undefined"!=typeof ReadableStream&&e instanceof ReadableStream}(e))return e;if(function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView(e)}(e))return e.buffer;if("object"==typeof e)return t["content-type"]=null!==(n=t["content-type"])&&void 0!==n?n:"application/json;charset=utf-8",JSON.stringify(e);throw new TypeError("Unknown body type")}(u,f),E=o(o({},a),{url:l,headers:f,body:g});w=t.createXHR?t.createXHR():new XMLHttpRequest;var x=t.progressSubscriber,C=t.includeDownloadProgress,S=void 0!==C&&C,T=t.includeUploadProgress,L=void 0!==T&&T,_=function(t,n){w.addEventListener(t,(function(){var t,r=n();null===(t=null==x?void 0:x.error)||void 0===t||t.call(x,r),e.error(r)}))};_("timeout",(function(){return new Z(w,E)})),_("abort",(function(){return new Q("aborted",w,E)}));var P=function(e,t){return new K(t,w,E,e+"_"+t.type)},k=function(t,n,r){t.addEventListener(n,(function(t){e.next(P(r,t))}))};L&&[oe,ie,ae].forEach((function(e){return k(w.upload,e,ne)})),x&&[oe,ie].forEach((function(e){return w.upload.addEventListener(e,(function(e){var t;return null===(t=null==x?void 0:x.next)||void 0===t?void 0:t.call(x,e)}))})),S&&[oe,ie].forEach((function(e){return k(w,e,re)}));var O=function(t){var n="ajax error"+(t?" "+t:"");e.error(new Q(n,w,E))};w.addEventListener("error",(function(e){var t;null===(t=null==x?void 0:x.error)||void 0===t||t.call(x,e),O()})),w.addEventListener(ae,(function(t){var n,r,o=w.status;if(o<400){null===(n=null==x?void 0:x.complete)||void 0===n||n.call(x);var i=void 0;try{i=P(re,t)}catch(t){return void e.error(t)}e.next(i),e.complete()}else null===(r=null==x?void 0:x.error)||void 0===r||r.call(x,t),O(o)}));var j=E.user,D=E.method,A=E.async;for(var p in j?w.open(D,l,A,j,E.password):w.open(D,l,A),A&&(w.timeout=E.timeout,w.responseType=E.responseType),"withCredentials"in w&&(w.withCredentials=E.withCredentials),f)f.hasOwnProperty(p)&&w.setRequestHeader(p,f[p]);return g?w.send(g):w.send(),function(){w&&4!==w.readyState&&w.abort()}}))},ee.get=function(e,t){return te({method:"GET",url:e,headers:t})},ee.post=function(e,t,n){return te({method:"POST",url:e,body:t,headers:n})},ee.delete=function(e,t){return te({method:"DELETE",url:e,headers:t})},ee.put=function(e,t,n){return te({method:"PUT",url:e,body:t,headers:n})},ee.patch=function(e,t,n){return te({method:"PATCH",url:e,body:t,headers:n})},ee.getJSON=function(e,t){return $(te({method:"GET",url:e,headers:t}))},ee),ne="upload",re="download",oe="loadstart",ie="progress",ae="load",ce=Object.prototype.toString;function ue(e,t){return ce.call(e)==="[object "+t+"]"}var se="http://localhost:3000",le=te.getJSON("".concat(se,"/db")).pipe(A((function(e){return e})),function e(n){return t((function(t,r){var o,i=null,a=!1;i=t.subscribe(j(r,void 0,void 0,(function(c){o=Y(n(c,e(n)(t))),i?(i.unsubscribe(),i=null,o.subscribe(r)):a=!0}))),a&&(i.unsubscribe(),i=null,o.subscribe(r))}))}((function(e){throw console.error(e),e})));function de(e){return Y(fetch("".concat(se,"/fruit/?type=").concat(e)).then((function(e){if(e.ok)return e.json();console.log(e.statusText)})).catch((function(e){return console.log(e)})))}!function(e){var t,n,r,o;t=this,n=void 0,o=function(){var t,n,r,o,i,a,c,u,s,l,d,f,p,h,v,y,m,b,w,g,E;return function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(c){return function(u){return function(c){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,c[0]&&(a=0)),a;)try{if(n=1,r&&(o=2&c[0]?r.return:c[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,c[1])).done)return o;switch(r=0,o&&(c=[2&c[0],o.value]),c[0]){case 0:case 1:o=c;break;case 4:return a.label++,{value:c[1],done:!1};case 5:a.label++,r=c[1],c=[0];continue;case 7:c=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==c[0]&&2!==c[0])){a=0;continue}if(3===c[0]&&(!o||c[1]>o[0]&&c[1]<o[3])){a.label=c[1];break}if(6===c[0]&&a.label<o[1]){a.label=o[1],o=c;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(c);break}o[2]&&a.ops.pop(),a.trys.pop();continue}c=t.call(e,a)}catch(e){c=[6,e],r=0}finally{n=o=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,u])}}}(this,(function(x){return(t=document.createElement("div")).classList.add("upper-container"),e.appendChild(t),(n=document.createElement("h1")).textContent="rxj",t.appendChild(n),(r=document.createElement("img")).src="src\\assets\\snake (1).png",r.alt="snake",r.classList.add("sss"),t.appendChild(r),(o=document.createElement("h1")).textContent="nake",t.appendChild(o),(i=document.createElement("div")).classList.add("lower-container"),e.appendChild(i),(a=document.createElement("div")).classList.add("left-container"),i.appendChild(a),(c=document.createElement("div")).classList.add("game-container"),i.appendChild(c),(u=document.createElement("canvas")).id="game-canvas",c.appendChild(u),function(e,t){var n=e.width/10,r=e.height/10,o=e.getBoundingClientRect(),i=e.getContext("2d");if(i){i.clearRect(o.left,o.top,e.width,e.height),i.strokeStyle="green",i.lineWidth=1.2;for(var a=0;a<e.width;a+=n)i.beginPath(),i.moveTo(a,0),i.lineTo(a,e.height),i.stroke();for(var c=0;c<e.height;c+=r)i.beginPath(),i.moveTo(0,c),i.lineTo(e.width,c),i.stroke()}}(u),function(e,t,n){var r=(document.getElementById("slider"),e.width/10),o=e.height/10,i=e.getContext("2d");if(i){var a=new Image;a.src="src\\assets\\apple.png",a.onload=function(){var e=Math.floor(10*Math.random())*r,t=Math.floor(10*Math.random())*o;i.drawImage(a,e,t,r,o)},de(n).subscribe((function(e){return e.color})),de(n).subscribe((function(e){return e.color}))}}(u,0,"apple"),(s=document.createElement("div")).classList.add("right-container"),i.appendChild(s),(l=document.createElement("div")).classList.add("settings-section"),(d=document.createElement("div")).classList.add("dimDiv"),d.id="dimDiv",l.appendChild(d),(f=document.createElement("div")).classList.add("shapeDiv"),f.id="shapeDiv",l.appendChild(f),(p=document.createElement("div")).classList.add("foodDiv"),p.id="foodDiv",l.appendChild(p),(h=document.createElement("div")).classList.add("fruitDiv"),h.id="fruitDiv",l.appendChild(h),(v=document.createElement("div")).classList.add("vegetableDiv"),v.id="vegetableDiv",l.appendChild(v),(y=document.createElement("h3")).classList.add("dimension"),y.textContent="Dimension",d.appendChild(y),(m=document.createElement("input")).type="range",m.min="5",m.max="10",m.step="1",m.classList.add("slider"),m.id="slider",d.appendChild(m),(b=document.createElement("text")).classList.add("sliderValue"),b.id="sliderValue",b.textContent="10",d.appendChild(b),m.value,le.subscribe((function(e){!function(e,t){var n=document.getElementById("shapeDiv"),r=document.createElement("h3");r.classList.add("shape"),r.textContent="Snake shape",n.appendChild(r);var o=document.createElement("div");o.classList.add("shapeCheckboxes"),n.appendChild(o);var i={round:"●",square:"■"};e.forEach((function(e){var t=document.createElement("div");t.classList.add("shapeCheckboxContainer");var n=document.createElement("input");n.type="radio",n.name="shapes",n.value=e.type,n.id=e.id.toString();var r=document.createElement("label");r.classList.add("shapeLabel"),r.innerHTML="".concat(i[e.type]),t.appendChild(r),t.appendChild(n),o.appendChild(t)}))}(e.shapes),function(e,t,n,r){var o=document.getElementById("foodDiv"),i=document.createElement("h3");i.classList.add("foodType"),i.textContent="Food",o.appendChild(i);var a=document.createElement("div");a.classList.add("foodCheckboxes"),o.appendChild(a),e.forEach((function(e){var t=document.createElement("div");t.classList.add("foodCheckboxContainer");var n=document.createElement("input");n.type="radio",n.name="food",n.value=e.type,n.id=e.id.toString();var r=document.createElement("label");r.classList.add("foodLabel"),r.innerHTML="".concat(e.type),t.appendChild(r),t.appendChild(n),a.appendChild(t)}));var c=document.getElementById("fruitDiv");t.forEach((function(e){var t=document.createElement("div");t.classList.add("fruitCheckboxContainer");var n=document.createElement("input");n.type="checkbox",n.name="fruit",n.value=e.type;var r=document.createElement("img");r.classList.add("fruitLabel"),r.src="src\\assets\\".concat(e.type,".png"),t.appendChild(r),t.appendChild(n),c.appendChild(t)})),c.style.display="none";var u=document.getElementById("vegetableDiv");n.forEach((function(e){var t=document.createElement("div");t.classList.add("vegetableCheckboxContainer");var n=document.createElement("input");n.type="checkbox",n.name="vegetable",n.value=e.type;var r=document.createElement("img");r.classList.add("vegetableLabel"),r.src="src\\assets\\".concat(e.type,".png"),t.appendChild(r),t.appendChild(n),u.appendChild(t)})),u.style.display="none";var s=document.querySelector('input[name="food"][value="fruit"]');s.addEventListener("change",(function(){s.checked?(c.style.display="flex",u.style.display="none"):c.style.display="none"}));var l=document.querySelector('input[name="food"][value="vegetable"]');l.addEventListener("change",(function(){l.checked?(u.style.display="flex",c.style.display="none"):u.style.display="none"}))}(e.food,e.fruit,e.vegetable)})),a.appendChild(l),(w=document.createElement("button")).textContent="START GAME",w.id="start-button",a.appendChild(w),(g=document.createElement("button")).textContent="Show Results",g.id="show-results-button",s.appendChild(g),(E=document.createElement("div")).classList.add("results-section"),E.style.display="none",s.appendChild(E),g.addEventListener("click",(function(){E.style.display="none"===E.style.display?"block":"none"})),[2]}))},new((r=void 0)||(r=Promise))((function(e,i){function a(e){try{u(o.next(e))}catch(e){i(e)}}function c(e){try{u(o.throw(e))}catch(e){i(e)}}function u(t){var n;t.done?e(t.value):(n=t.value,n instanceof r?n:new r((function(e){e(n)}))).then(a,c)}u((o=o.apply(t,n||[])).next())}))}(document.body)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RSxTQUFVMUMsR0FBV0EsRUFBUXZNLEVBQVEsS0FJakJ3TCxLQUFLMkQsRUFBV0MsRUFBVyxDQUM3RzNMLEdBQU1nSyxFQUFZQSxFQUFVdEwsTUFBTUUsRUFBU21MLEdBQWMsS0FBS3pLLE9BQ2xFLEdBNElKLENDbEpBMFosQ0FBaUJwSyxTQUFTL1AsSyIsInNvdXJjZXMiOlsid2VicGFjazovL3J4anMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9pc0Z1bmN0aW9uLmpzIiwid2VicGFjazovL3J4anMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9saWZ0LmpzIiwid2VicGFjazovL3J4anMvLi9ub2RlX21vZHVsZXMvdHNsaWIvdHNsaWIuZXM2Lm1qcyIsIndlYnBhY2s6Ly9yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvY3JlYXRlRXJyb3JDbGFzcy5qcyIsIndlYnBhY2s6Ly9yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvVW5zdWJzY3JpcHRpb25FcnJvci5qcyIsIndlYnBhY2s6Ly9yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvYXJyUmVtb3ZlLmpzIiwid2VicGFjazovL3J4anMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvU3Vic2NyaXB0aW9uLmpzIiwid2VicGFjazovL3J4anMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvY29uZmlnLmpzIiwid2VicGFjazovL3J4anMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVyL3RpbWVvdXRQcm92aWRlci5qcyIsIndlYnBhY2s6Ly9yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvcmVwb3J0VW5oYW5kbGVkRXJyb3IuanMiLCJ3ZWJwYWNrOi8vcnhqcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL25vb3AuanMiLCJ3ZWJwYWNrOi8vcnhqcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9Ob3RpZmljYXRpb25GYWN0b3JpZXMuanMiLCJ3ZWJwYWNrOi8vcnhqcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2Vycm9yQ29udGV4dC5qcyIsIndlYnBhY2s6Ly9yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL1N1YnNjcmliZXIuanMiLCJ3ZWJwYWNrOi8vcnhqcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvT3BlcmF0b3JTdWJzY3JpYmVyLmpzIiwid2VicGFjazovL3J4anMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL21hcC5qcyIsIndlYnBhY2s6Ly9yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNBcnJheUxpa2UuanMiLCJ3ZWJwYWNrOi8vcnhqcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzUHJvbWlzZS5qcyIsIndlYnBhY2s6Ly9yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3N5bWJvbC9vYnNlcnZhYmxlLmpzIiwid2VicGFjazovL3J4anMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9pZGVudGl0eS5qcyIsIndlYnBhY2s6Ly9yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL09ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vcnhqcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL3BpcGUuanMiLCJ3ZWJwYWNrOi8vcnhqcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzSW50ZXJvcE9ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vcnhqcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzQXN5bmNJdGVyYWJsZS5qcyIsIndlYnBhY2s6Ly9yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvdGhyb3dVbm9ic2VydmFibGVFcnJvci5qcyIsIndlYnBhY2s6Ly9yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3N5bWJvbC9pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly9yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNJdGVyYWJsZS5qcyIsIndlYnBhY2s6Ly9yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNSZWFkYWJsZVN0cmVhbUxpa2UuanMiLCJ3ZWJwYWNrOi8vcnhqcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL2lubmVyRnJvbS5qcyIsIndlYnBhY2s6Ly9yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL2FqYXgvZ2V0WEhSUmVzcG9uc2UuanMiLCJ3ZWJwYWNrOi8vcnhqcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9hamF4L0FqYXhSZXNwb25zZS5qcyIsIndlYnBhY2s6Ly9yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL2FqYXgvZXJyb3JzLmpzIiwid2VicGFjazovL3J4anMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvYWpheC9hamF4LmpzIiwid2VicGFjazovL3J4anMvLi9zcmMvb2JzZXJ2YWJsZXMvYXBpc2VydmljZS50cyIsIndlYnBhY2s6Ly9yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9jYXRjaEVycm9yLmpzIiwid2VicGFjazovL3J4anMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb2JzZXJ2YWJsZS9mcm9tLmpzIiwid2VicGFjazovL3J4anMvLi9zcmMvdmlldy9pbml0aWFsVmlldy50cyIsIndlYnBhY2s6Ly9yeGpzLy4vc3JjL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzRnVuY3Rpb24uanMubWFwIiwiaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vaXNGdW5jdGlvbic7XG5leHBvcnQgZnVuY3Rpb24gaGFzTGlmdChzb3VyY2UpIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbihzb3VyY2UgPT09IG51bGwgfHwgc291cmNlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzb3VyY2UubGlmdCk7XG59XG5leHBvcnQgZnVuY3Rpb24gb3BlcmF0ZShpbml0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgICAgaWYgKGhhc0xpZnQoc291cmNlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHNvdXJjZS5saWZ0KGZ1bmN0aW9uIChsaWZ0ZWRTb3VyY2UpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW5pdChsaWZ0ZWRTb3VyY2UsIHRoaXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmFibGUgdG8gbGlmdCB1bmtub3duIE9ic2VydmFibGUgdHlwZScpO1xuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1saWZ0LmpzLm1hcCIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuXG5QZXJtaXNzaW9uIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBhbmQvb3IgZGlzdHJpYnV0ZSB0aGlzIHNvZnR3YXJlIGZvciBhbnlcbnB1cnBvc2Ugd2l0aCBvciB3aXRob3V0IGZlZSBpcyBoZXJlYnkgZ3JhbnRlZC5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiBBTkQgVEhFIEFVVEhPUiBESVNDTEFJTVMgQUxMIFdBUlJBTlRJRVMgV0lUSFxuUkVHQVJEIFRPIFRISVMgU09GVFdBUkUgSU5DTFVESU5HIEFMTCBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZXG5BTkQgRklUTkVTUy4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgRk9SIEFOWSBTUEVDSUFMLCBESVJFQ1QsXG5JTkRJUkVDVCwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIE9SIEFOWSBEQU1BR0VTIFdIQVRTT0VWRVIgUkVTVUxUSU5HIEZST01cbkxPU1MgT0YgVVNFLCBEQVRBIE9SIFBST0ZJVFMsIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBORUdMSUdFTkNFIE9SXG5PVEhFUiBUT1JUSU9VUyBBQ1RJT04sIEFSSVNJTkcgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgVVNFIE9SXG5QRVJGT1JNQU5DRSBPRiBUSElTIFNPRlRXQVJFLlxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cbi8qIGdsb2JhbCBSZWZsZWN0LCBQcm9taXNlLCBTdXBwcmVzc2VkRXJyb3IsIFN5bWJvbCAqL1xuXG52YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uKGQsIGIpIHtcbiAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcbiAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gX19leHRlbmRzKGQsIGIpIHtcbiAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcbiAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbn1cblxuZXhwb3J0IHZhciBfX2Fzc2lnbiA9IGZ1bmN0aW9uKCkge1xuICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xuICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHQ7XG4gIH1cbiAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3Jlc3QocywgZSkge1xuICB2YXIgdCA9IHt9O1xuICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcbiAgICAgIHRbcF0gPSBzW3BdO1xuICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxuICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcbiAgICAgIH1cbiAgcmV0dXJuIHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2RlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG4gIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG4gIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3BhcmFtKHBhcmFtSW5kZXgsIGRlY29yYXRvcikge1xuICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fZXNEZWNvcmF0ZShjdG9yLCBkZXNjcmlwdG9ySW4sIGRlY29yYXRvcnMsIGNvbnRleHRJbiwgaW5pdGlhbGl6ZXJzLCBleHRyYUluaXRpYWxpemVycykge1xuICBmdW5jdGlvbiBhY2NlcHQoZikgeyBpZiAoZiAhPT0gdm9pZCAwICYmIHR5cGVvZiBmICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJGdW5jdGlvbiBleHBlY3RlZFwiKTsgcmV0dXJuIGY7IH1cbiAgdmFyIGtpbmQgPSBjb250ZXh0SW4ua2luZCwga2V5ID0ga2luZCA9PT0gXCJnZXR0ZXJcIiA/IFwiZ2V0XCIgOiBraW5kID09PSBcInNldHRlclwiID8gXCJzZXRcIiA6IFwidmFsdWVcIjtcbiAgdmFyIHRhcmdldCA9ICFkZXNjcmlwdG9ySW4gJiYgY3RvciA/IGNvbnRleHRJbltcInN0YXRpY1wiXSA/IGN0b3IgOiBjdG9yLnByb3RvdHlwZSA6IG51bGw7XG4gIHZhciBkZXNjcmlwdG9yID0gZGVzY3JpcHRvckluIHx8ICh0YXJnZXQgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgY29udGV4dEluLm5hbWUpIDoge30pO1xuICB2YXIgXywgZG9uZSA9IGZhbHNlO1xuICBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIGNvbnRleHQgPSB7fTtcbiAgICAgIGZvciAodmFyIHAgaW4gY29udGV4dEluKSBjb250ZXh0W3BdID0gcCA9PT0gXCJhY2Nlc3NcIiA/IHt9IDogY29udGV4dEluW3BdO1xuICAgICAgZm9yICh2YXIgcCBpbiBjb250ZXh0SW4uYWNjZXNzKSBjb250ZXh0LmFjY2Vzc1twXSA9IGNvbnRleHRJbi5hY2Nlc3NbcF07XG4gICAgICBjb250ZXh0LmFkZEluaXRpYWxpemVyID0gZnVuY3Rpb24gKGYpIHsgaWYgKGRvbmUpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgYWRkIGluaXRpYWxpemVycyBhZnRlciBkZWNvcmF0aW9uIGhhcyBjb21wbGV0ZWRcIik7IGV4dHJhSW5pdGlhbGl6ZXJzLnB1c2goYWNjZXB0KGYgfHwgbnVsbCkpOyB9O1xuICAgICAgdmFyIHJlc3VsdCA9ICgwLCBkZWNvcmF0b3JzW2ldKShraW5kID09PSBcImFjY2Vzc29yXCIgPyB7IGdldDogZGVzY3JpcHRvci5nZXQsIHNldDogZGVzY3JpcHRvci5zZXQgfSA6IGRlc2NyaXB0b3Jba2V5XSwgY29udGV4dCk7XG4gICAgICBpZiAoa2luZCA9PT0gXCJhY2Nlc3NvclwiKSB7XG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gdm9pZCAwKSBjb250aW51ZTtcbiAgICAgICAgICBpZiAocmVzdWx0ID09PSBudWxsIHx8IHR5cGVvZiByZXN1bHQgIT09IFwib2JqZWN0XCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJPYmplY3QgZXhwZWN0ZWRcIik7XG4gICAgICAgICAgaWYgKF8gPSBhY2NlcHQocmVzdWx0LmdldCkpIGRlc2NyaXB0b3IuZ2V0ID0gXztcbiAgICAgICAgICBpZiAoXyA9IGFjY2VwdChyZXN1bHQuc2V0KSkgZGVzY3JpcHRvci5zZXQgPSBfO1xuICAgICAgICAgIGlmIChfID0gYWNjZXB0KHJlc3VsdC5pbml0KSkgaW5pdGlhbGl6ZXJzLnVuc2hpZnQoXyk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChfID0gYWNjZXB0KHJlc3VsdCkpIHtcbiAgICAgICAgICBpZiAoa2luZCA9PT0gXCJmaWVsZFwiKSBpbml0aWFsaXplcnMudW5zaGlmdChfKTtcbiAgICAgICAgICBlbHNlIGRlc2NyaXB0b3Jba2V5XSA9IF87XG4gICAgICB9XG4gIH1cbiAgaWYgKHRhcmdldCkgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgY29udGV4dEluLm5hbWUsIGRlc2NyaXB0b3IpO1xuICBkb25lID0gdHJ1ZTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3J1bkluaXRpYWxpemVycyh0aGlzQXJnLCBpbml0aWFsaXplcnMsIHZhbHVlKSB7XG4gIHZhciB1c2VWYWx1ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGluaXRpYWxpemVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFsdWUgPSB1c2VWYWx1ZSA/IGluaXRpYWxpemVyc1tpXS5jYWxsKHRoaXNBcmcsIHZhbHVlKSA6IGluaXRpYWxpemVyc1tpXS5jYWxsKHRoaXNBcmcpO1xuICB9XG4gIHJldHVybiB1c2VWYWx1ZSA/IHZhbHVlIDogdm9pZCAwO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9fcHJvcEtleSh4KSB7XG4gIHJldHVybiB0eXBlb2YgeCA9PT0gXCJzeW1ib2xcIiA/IHggOiBcIlwiLmNvbmNhdCh4KTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3NldEZ1bmN0aW9uTmFtZShmLCBuYW1lLCBwcmVmaXgpIHtcbiAgaWYgKHR5cGVvZiBuYW1lID09PSBcInN5bWJvbFwiKSBuYW1lID0gbmFtZS5kZXNjcmlwdGlvbiA/IFwiW1wiLmNvbmNhdChuYW1lLmRlc2NyaXB0aW9uLCBcIl1cIikgOiBcIlwiO1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGYsIFwibmFtZVwiLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IHByZWZpeCA/IFwiXCIuY29uY2F0KHByZWZpeCwgXCIgXCIsIG5hbWUpIDogbmFtZSB9KTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBfX21ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKSB7XG4gIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0ZXIodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2dlbmVyYXRvcih0aGlzQXJnLCBib2R5KSB7XG4gIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XG4gIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xuICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cbiAgZnVuY3Rpb24gc3RlcChvcCkge1xuICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xuICAgICAgd2hpbGUgKGcgJiYgKGcgPSAwLCBvcFswXSAmJiAoXyA9IDApKSwgXykgdHJ5IHtcbiAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XG4gICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xuICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcbiAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XG4gICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XG4gICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XG4gICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cbiAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xuICB9XG59XG5cbmV4cG9ydCB2YXIgX19jcmVhdGVCaW5kaW5nID0gT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICBvW2syXSA9IG1ba107XG59KTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9fZXhwb3J0U3RhcihtLCBvKSB7XG4gIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobywgcCkpIF9fY3JlYXRlQmluZGluZyhvLCBtLCBwKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fdmFsdWVzKG8pIHtcbiAgdmFyIHMgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgU3ltYm9sLml0ZXJhdG9yLCBtID0gcyAmJiBvW3NdLCBpID0gMDtcbiAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XG4gIGlmIChvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikgcmV0dXJuIHtcbiAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xuICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBvICYmIG9baSsrXSwgZG9uZTogIW8gfTtcbiAgICAgIH1cbiAgfTtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihzID8gXCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiIDogXCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19yZWFkKG8sIG4pIHtcbiAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xuICBpZiAoIW0pIHJldHVybiBvO1xuICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcbiAgdHJ5IHtcbiAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xuICB9XG4gIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxuICBmaW5hbGx5IHtcbiAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XG4gICAgICB9XG4gICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cbiAgfVxuICByZXR1cm4gYXI7XG59XG5cbi8qKiBAZGVwcmVjYXRlZCAqL1xuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkKCkge1xuICBmb3IgKHZhciBhciA9IFtdLCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKylcbiAgICAgIGFyID0gYXIuY29uY2F0KF9fcmVhZChhcmd1bWVudHNbaV0pKTtcbiAgcmV0dXJuIGFyO1xufVxuXG4vKiogQGRlcHJlY2F0ZWQgKi9cbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZEFycmF5cygpIHtcbiAgZm9yICh2YXIgcyA9IDAsIGkgPSAwLCBpbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSBzICs9IGFyZ3VtZW50c1tpXS5sZW5ndGg7XG4gIGZvciAodmFyIHIgPSBBcnJheShzKSwgayA9IDAsIGkgPSAwOyBpIDwgaWw7IGkrKylcbiAgICAgIGZvciAodmFyIGEgPSBhcmd1bWVudHNbaV0sIGogPSAwLCBqbCA9IGEubGVuZ3RoOyBqIDwgamw7IGorKywgaysrKVxuICAgICAgICAgIHJba10gPSBhW2pdO1xuICByZXR1cm4gcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkQXJyYXkodG8sIGZyb20sIHBhY2spIHtcbiAgaWYgKHBhY2sgfHwgYXJndW1lbnRzLmxlbmd0aCA9PT0gMikgZm9yICh2YXIgaSA9IDAsIGwgPSBmcm9tLmxlbmd0aCwgYXI7IGkgPCBsOyBpKyspIHtcbiAgICAgIGlmIChhciB8fCAhKGkgaW4gZnJvbSkpIHtcbiAgICAgICAgICBpZiAoIWFyKSBhciA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20sIDAsIGkpO1xuICAgICAgICAgIGFyW2ldID0gZnJvbVtpXTtcbiAgICAgIH1cbiAgfVxuICByZXR1cm4gdG8uY29uY2F0KGFyIHx8IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20pKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXQodikge1xuICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIF9fYXdhaXQgPyAodGhpcy52ID0gdiwgdGhpcykgOiBuZXcgX19hd2FpdCh2KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNHZW5lcmF0b3IodGhpc0FyZywgX2FyZ3VtZW50cywgZ2VuZXJhdG9yKSB7XG4gIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XG4gIHZhciBnID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pLCBpLCBxID0gW107XG4gIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcbiAgZnVuY3Rpb24gdmVyYihuKSB7IGlmIChnW25dKSBpW25dID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChhLCBiKSB7IHEucHVzaChbbiwgdiwgYSwgYl0pID4gMSB8fCByZXN1bWUobiwgdik7IH0pOyB9OyB9XG4gIGZ1bmN0aW9uIHJlc3VtZShuLCB2KSB7IHRyeSB7IHN0ZXAoZ1tuXSh2KSk7IH0gY2F0Y2ggKGUpIHsgc2V0dGxlKHFbMF1bM10sIGUpOyB9IH1cbiAgZnVuY3Rpb24gc3RlcChyKSB7IHIudmFsdWUgaW5zdGFuY2VvZiBfX2F3YWl0ID8gUHJvbWlzZS5yZXNvbHZlKHIudmFsdWUudikudGhlbihmdWxmaWxsLCByZWplY3QpIDogc2V0dGxlKHFbMF1bMl0sIHIpOyB9XG4gIGZ1bmN0aW9uIGZ1bGZpbGwodmFsdWUpIHsgcmVzdW1lKFwibmV4dFwiLCB2YWx1ZSk7IH1cbiAgZnVuY3Rpb24gcmVqZWN0KHZhbHVlKSB7IHJlc3VtZShcInRocm93XCIsIHZhbHVlKTsgfVxuICBmdW5jdGlvbiBzZXR0bGUoZiwgdikgeyBpZiAoZih2KSwgcS5zaGlmdCgpLCBxLmxlbmd0aCkgcmVzdW1lKHFbMF1bMF0sIHFbMF1bMV0pOyB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jRGVsZWdhdG9yKG8pIHtcbiAgdmFyIGksIHA7XG4gIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiwgZnVuY3Rpb24gKGUpIHsgdGhyb3cgZTsgfSksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XG4gIGZ1bmN0aW9uIHZlcmIobiwgZikgeyBpW25dID0gb1tuXSA/IGZ1bmN0aW9uICh2KSB7IHJldHVybiAocCA9ICFwKSA/IHsgdmFsdWU6IF9fYXdhaXQob1tuXSh2KSksIGRvbmU6IGZhbHNlIH0gOiBmID8gZih2KSA6IHY7IH0gOiBmOyB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jVmFsdWVzKG8pIHtcbiAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcbiAgdmFyIG0gPSBvW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSwgaTtcbiAgcmV0dXJuIG0gPyBtLmNhbGwobykgOiAobyA9IHR5cGVvZiBfX3ZhbHVlcyA9PT0gXCJmdW5jdGlvblwiID8gX192YWx1ZXMobykgOiBvW1N5bWJvbC5pdGVyYXRvcl0oKSwgaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGkpO1xuICBmdW5jdGlvbiB2ZXJiKG4pIHsgaVtuXSA9IG9bbl0gJiYgZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdiA9IG9bbl0odiksIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHYuZG9uZSwgdi52YWx1ZSk7IH0pOyB9OyB9XG4gIGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIGQsIHYpIHsgUHJvbWlzZS5yZXNvbHZlKHYpLnRoZW4oZnVuY3Rpb24odikgeyByZXNvbHZlKHsgdmFsdWU6IHYsIGRvbmU6IGQgfSk7IH0sIHJlamVjdCk7IH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fbWFrZVRlbXBsYXRlT2JqZWN0KGNvb2tlZCwgcmF3KSB7XG4gIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvb2tlZCwgXCJyYXdcIiwgeyB2YWx1ZTogcmF3IH0pOyB9IGVsc2UgeyBjb29rZWQucmF3ID0gcmF3OyB9XG4gIHJldHVybiBjb29rZWQ7XG59O1xuXG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcbn0pIDogZnVuY3Rpb24obywgdikge1xuICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnRTdGFyKG1vZCkge1xuICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICB2YXIgcmVzdWx0ID0ge307XG4gIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0RGVmYXVsdChtb2QpIHtcbiAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBkZWZhdWx0OiBtb2QgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRHZXQocmVjZWl2ZXIsIHN0YXRlLCBraW5kLCBmKSB7XG4gIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcbiAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVhZCBwcml2YXRlIG1lbWJlciBmcm9tIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gIHJldHVybiBraW5kID09PSBcIm1cIiA/IGYgOiBraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlcikgOiBmID8gZi52YWx1ZSA6IHN0YXRlLmdldChyZWNlaXZlcik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHJlY2VpdmVyLCBzdGF0ZSwgdmFsdWUsIGtpbmQsIGYpIHtcbiAgaWYgKGtpbmQgPT09IFwibVwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBtZXRob2QgaXMgbm90IHdyaXRhYmxlXCIpO1xuICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBzZXR0ZXJcIik7XG4gIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHdyaXRlIHByaXZhdGUgbWVtYmVyIHRvIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gIHJldHVybiAoa2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIsIHZhbHVlKSA6IGYgPyBmLnZhbHVlID0gdmFsdWUgOiBzdGF0ZS5zZXQocmVjZWl2ZXIsIHZhbHVlKSksIHZhbHVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZEluKHN0YXRlLCByZWNlaXZlcikge1xuICBpZiAocmVjZWl2ZXIgPT09IG51bGwgfHwgKHR5cGVvZiByZWNlaXZlciAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgcmVjZWl2ZXIgIT09IFwiZnVuY3Rpb25cIikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgdXNlICdpbicgb3BlcmF0b3Igb24gbm9uLW9iamVjdFwiKTtcbiAgcmV0dXJuIHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgPT09IHN0YXRlIDogc3RhdGUuaGFzKHJlY2VpdmVyKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fYWRkRGlzcG9zYWJsZVJlc291cmNlKGVudiwgdmFsdWUsIGFzeW5jKSB7XG4gIGlmICh2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gdm9pZCAwKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk9iamVjdCBleHBlY3RlZC5cIik7XG4gICAgdmFyIGRpc3Bvc2U7XG4gICAgaWYgKGFzeW5jKSB7XG4gICAgICAgIGlmICghU3ltYm9sLmFzeW5jRGlzcG9zZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0Rpc3Bvc2UgaXMgbm90IGRlZmluZWQuXCIpO1xuICAgICAgICBkaXNwb3NlID0gdmFsdWVbU3ltYm9sLmFzeW5jRGlzcG9zZV07XG4gICAgfVxuICAgIGlmIChkaXNwb3NlID09PSB2b2lkIDApIHtcbiAgICAgICAgaWYgKCFTeW1ib2wuZGlzcG9zZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5kaXNwb3NlIGlzIG5vdCBkZWZpbmVkLlwiKTtcbiAgICAgICAgZGlzcG9zZSA9IHZhbHVlW1N5bWJvbC5kaXNwb3NlXTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBkaXNwb3NlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJPYmplY3Qgbm90IGRpc3Bvc2FibGUuXCIpO1xuICAgIGVudi5zdGFjay5wdXNoKHsgdmFsdWU6IHZhbHVlLCBkaXNwb3NlOiBkaXNwb3NlLCBhc3luYzogYXN5bmMgfSk7XG4gIH1cbiAgZWxzZSBpZiAoYXN5bmMpIHtcbiAgICBlbnYuc3RhY2sucHVzaCh7IGFzeW5jOiB0cnVlIH0pO1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cblxudmFyIF9TdXBwcmVzc2VkRXJyb3IgPSB0eXBlb2YgU3VwcHJlc3NlZEVycm9yID09PSBcImZ1bmN0aW9uXCIgPyBTdXBwcmVzc2VkRXJyb3IgOiBmdW5jdGlvbiAoZXJyb3IsIHN1cHByZXNzZWQsIG1lc3NhZ2UpIHtcbiAgdmFyIGUgPSBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIHJldHVybiBlLm5hbWUgPSBcIlN1cHByZXNzZWRFcnJvclwiLCBlLmVycm9yID0gZXJyb3IsIGUuc3VwcHJlc3NlZCA9IHN1cHByZXNzZWQsIGU7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gX19kaXNwb3NlUmVzb3VyY2VzKGVudikge1xuICBmdW5jdGlvbiBmYWlsKGUpIHtcbiAgICBlbnYuZXJyb3IgPSBlbnYuaGFzRXJyb3IgPyBuZXcgX1N1cHByZXNzZWRFcnJvcihlLCBlbnYuZXJyb3IsIFwiQW4gZXJyb3Igd2FzIHN1cHByZXNzZWQgZHVyaW5nIGRpc3Bvc2FsLlwiKSA6IGU7XG4gICAgZW52Lmhhc0Vycm9yID0gdHJ1ZTtcbiAgfVxuICBmdW5jdGlvbiBuZXh0KCkge1xuICAgIHdoaWxlIChlbnYuc3RhY2subGVuZ3RoKSB7XG4gICAgICB2YXIgcmVjID0gZW52LnN0YWNrLnBvcCgpO1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlYy5kaXNwb3NlICYmIHJlYy5kaXNwb3NlLmNhbGwocmVjLnZhbHVlKTtcbiAgICAgICAgaWYgKHJlYy5hc3luYykgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZXN1bHQpLnRoZW4obmV4dCwgZnVuY3Rpb24oZSkgeyBmYWlsKGUpOyByZXR1cm4gbmV4dCgpOyB9KTtcbiAgICAgIH1cbiAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgZmFpbChlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGVudi5oYXNFcnJvcikgdGhyb3cgZW52LmVycm9yO1xuICB9XG4gIHJldHVybiBuZXh0KCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgX19leHRlbmRzLFxuICBfX2Fzc2lnbixcbiAgX19yZXN0LFxuICBfX2RlY29yYXRlLFxuICBfX3BhcmFtLFxuICBfX21ldGFkYXRhLFxuICBfX2F3YWl0ZXIsXG4gIF9fZ2VuZXJhdG9yLFxuICBfX2NyZWF0ZUJpbmRpbmcsXG4gIF9fZXhwb3J0U3RhcixcbiAgX192YWx1ZXMsXG4gIF9fcmVhZCxcbiAgX19zcHJlYWQsXG4gIF9fc3ByZWFkQXJyYXlzLFxuICBfX3NwcmVhZEFycmF5LFxuICBfX2F3YWl0LFxuICBfX2FzeW5jR2VuZXJhdG9yLFxuICBfX2FzeW5jRGVsZWdhdG9yLFxuICBfX2FzeW5jVmFsdWVzLFxuICBfX21ha2VUZW1wbGF0ZU9iamVjdCxcbiAgX19pbXBvcnRTdGFyLFxuICBfX2ltcG9ydERlZmF1bHQsXG4gIF9fY2xhc3NQcml2YXRlRmllbGRHZXQsXG4gIF9fY2xhc3NQcml2YXRlRmllbGRTZXQsXG4gIF9fY2xhc3NQcml2YXRlRmllbGRJbixcbiAgX19hZGREaXNwb3NhYmxlUmVzb3VyY2UsXG4gIF9fZGlzcG9zZVJlc291cmNlcyxcbn07XG4iLCJleHBvcnQgZnVuY3Rpb24gY3JlYXRlRXJyb3JDbGFzcyhjcmVhdGVJbXBsKSB7XG4gICAgdmFyIF9zdXBlciA9IGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgICAgICBFcnJvci5jYWxsKGluc3RhbmNlKTtcbiAgICAgICAgaW5zdGFuY2Uuc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICB9O1xuICAgIHZhciBjdG9yRnVuYyA9IGNyZWF0ZUltcGwoX3N1cGVyKTtcbiAgICBjdG9yRnVuYy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEVycm9yLnByb3RvdHlwZSk7XG4gICAgY3RvckZ1bmMucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvckZ1bmM7XG4gICAgcmV0dXJuIGN0b3JGdW5jO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3JlYXRlRXJyb3JDbGFzcy5qcy5tYXAiLCJpbXBvcnQgeyBjcmVhdGVFcnJvckNsYXNzIH0gZnJvbSAnLi9jcmVhdGVFcnJvckNsYXNzJztcbmV4cG9ydCB2YXIgVW5zdWJzY3JpcHRpb25FcnJvciA9IGNyZWF0ZUVycm9yQ2xhc3MoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHJldHVybiBmdW5jdGlvbiBVbnN1YnNjcmlwdGlvbkVycm9ySW1wbChlcnJvcnMpIHtcbiAgICAgICAgX3N1cGVyKHRoaXMpO1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBlcnJvcnNcbiAgICAgICAgICAgID8gZXJyb3JzLmxlbmd0aCArIFwiIGVycm9ycyBvY2N1cnJlZCBkdXJpbmcgdW5zdWJzY3JpcHRpb246XFxuXCIgKyBlcnJvcnMubWFwKGZ1bmN0aW9uIChlcnIsIGkpIHsgcmV0dXJuIGkgKyAxICsgXCIpIFwiICsgZXJyLnRvU3RyaW5nKCk7IH0pLmpvaW4oJ1xcbiAgJylcbiAgICAgICAgICAgIDogJyc7XG4gICAgICAgIHRoaXMubmFtZSA9ICdVbnN1YnNjcmlwdGlvbkVycm9yJztcbiAgICAgICAgdGhpcy5lcnJvcnMgPSBlcnJvcnM7XG4gICAgfTtcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VW5zdWJzY3JpcHRpb25FcnJvci5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gYXJyUmVtb3ZlKGFyciwgaXRlbSkge1xuICAgIGlmIChhcnIpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gYXJyLmluZGV4T2YoaXRlbSk7XG4gICAgICAgIDAgPD0gaW5kZXggJiYgYXJyLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXJyUmVtb3ZlLmpzLm1hcCIsImltcG9ydCB7IF9fcmVhZCwgX19zcHJlYWRBcnJheSwgX192YWx1ZXMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL3V0aWwvaXNGdW5jdGlvbic7XG5pbXBvcnQgeyBVbnN1YnNjcmlwdGlvbkVycm9yIH0gZnJvbSAnLi91dGlsL1Vuc3Vic2NyaXB0aW9uRXJyb3InO1xuaW1wb3J0IHsgYXJyUmVtb3ZlIH0gZnJvbSAnLi91dGlsL2FyclJlbW92ZSc7XG52YXIgU3Vic2NyaXB0aW9uID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTdWJzY3JpcHRpb24oaW5pdGlhbFRlYXJkb3duKSB7XG4gICAgICAgIHRoaXMuaW5pdGlhbFRlYXJkb3duID0gaW5pdGlhbFRlYXJkb3duO1xuICAgICAgICB0aGlzLmNsb3NlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9wYXJlbnRhZ2UgPSBudWxsO1xuICAgICAgICB0aGlzLl9maW5hbGl6ZXJzID0gbnVsbDtcbiAgICB9XG4gICAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGVfMSwgX2EsIGVfMiwgX2I7XG4gICAgICAgIHZhciBlcnJvcnM7XG4gICAgICAgIGlmICghdGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHRoaXMuY2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciBfcGFyZW50YWdlID0gdGhpcy5fcGFyZW50YWdlO1xuICAgICAgICAgICAgaWYgKF9wYXJlbnRhZ2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9wYXJlbnRhZ2UgPSBudWxsO1xuICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KF9wYXJlbnRhZ2UpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfcGFyZW50YWdlXzEgPSBfX3ZhbHVlcyhfcGFyZW50YWdlKSwgX3BhcmVudGFnZV8xXzEgPSBfcGFyZW50YWdlXzEubmV4dCgpOyAhX3BhcmVudGFnZV8xXzEuZG9uZTsgX3BhcmVudGFnZV8xXzEgPSBfcGFyZW50YWdlXzEubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmVudF8xID0gX3BhcmVudGFnZV8xXzEudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50XzEucmVtb3ZlKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlXzFfMSkgeyBlXzEgPSB7IGVycm9yOiBlXzFfMSB9OyB9XG4gICAgICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3BhcmVudGFnZV8xXzEgJiYgIV9wYXJlbnRhZ2VfMV8xLmRvbmUgJiYgKF9hID0gX3BhcmVudGFnZV8xLnJldHVybikpIF9hLmNhbGwoX3BhcmVudGFnZV8xKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8xKSB0aHJvdyBlXzEuZXJyb3I7IH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgX3BhcmVudGFnZS5yZW1vdmUodGhpcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGluaXRpYWxGaW5hbGl6ZXIgPSB0aGlzLmluaXRpYWxUZWFyZG93bjtcbiAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKGluaXRpYWxGaW5hbGl6ZXIpKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaW5pdGlhbEZpbmFsaXplcigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICBlcnJvcnMgPSBlIGluc3RhbmNlb2YgVW5zdWJzY3JpcHRpb25FcnJvciA/IGUuZXJyb3JzIDogW2VdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBfZmluYWxpemVycyA9IHRoaXMuX2ZpbmFsaXplcnM7XG4gICAgICAgICAgICBpZiAoX2ZpbmFsaXplcnMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9maW5hbGl6ZXJzID0gbnVsbDtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfZmluYWxpemVyc18xID0gX192YWx1ZXMoX2ZpbmFsaXplcnMpLCBfZmluYWxpemVyc18xXzEgPSBfZmluYWxpemVyc18xLm5leHQoKTsgIV9maW5hbGl6ZXJzXzFfMS5kb25lOyBfZmluYWxpemVyc18xXzEgPSBfZmluYWxpemVyc18xLm5leHQoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpbmFsaXplciA9IF9maW5hbGl6ZXJzXzFfMS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhlY0ZpbmFsaXplcihmaW5hbGl6ZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycyA9IGVycm9ycyAhPT0gbnVsbCAmJiBlcnJvcnMgIT09IHZvaWQgMCA/IGVycm9ycyA6IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnIgaW5zdGFuY2VvZiBVbnN1YnNjcmlwdGlvbkVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycyA9IF9fc3ByZWFkQXJyYXkoX19zcHJlYWRBcnJheShbXSwgX19yZWFkKGVycm9ycykpLCBfX3JlYWQoZXJyLmVycm9ycykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzLnB1c2goZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVfMl8xKSB7IGVfMiA9IHsgZXJyb3I6IGVfMl8xIH07IH1cbiAgICAgICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfZmluYWxpemVyc18xXzEgJiYgIV9maW5hbGl6ZXJzXzFfMS5kb25lICYmIChfYiA9IF9maW5hbGl6ZXJzXzEucmV0dXJuKSkgX2IuY2FsbChfZmluYWxpemVyc18xKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMikgdGhyb3cgZV8yLmVycm9yOyB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGVycm9ycykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBVbnN1YnNjcmlwdGlvbkVycm9yKGVycm9ycyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKHRlYXJkb3duKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKHRlYXJkb3duICYmIHRlYXJkb3duICE9PSB0aGlzKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICBleGVjRmluYWxpemVyKHRlYXJkb3duKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICh0ZWFyZG93biBpbnN0YW5jZW9mIFN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGVhcmRvd24uY2xvc2VkIHx8IHRlYXJkb3duLl9oYXNQYXJlbnQodGhpcykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0ZWFyZG93bi5fYWRkUGFyZW50KHRoaXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAodGhpcy5fZmluYWxpemVycyA9IChfYSA9IHRoaXMuX2ZpbmFsaXplcnMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFtdKS5wdXNoKHRlYXJkb3duKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5faGFzUGFyZW50ID0gZnVuY3Rpb24gKHBhcmVudCkge1xuICAgICAgICB2YXIgX3BhcmVudGFnZSA9IHRoaXMuX3BhcmVudGFnZTtcbiAgICAgICAgcmV0dXJuIF9wYXJlbnRhZ2UgPT09IHBhcmVudCB8fCAoQXJyYXkuaXNBcnJheShfcGFyZW50YWdlKSAmJiBfcGFyZW50YWdlLmluY2x1ZGVzKHBhcmVudCkpO1xuICAgIH07XG4gICAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5fYWRkUGFyZW50ID0gZnVuY3Rpb24gKHBhcmVudCkge1xuICAgICAgICB2YXIgX3BhcmVudGFnZSA9IHRoaXMuX3BhcmVudGFnZTtcbiAgICAgICAgdGhpcy5fcGFyZW50YWdlID0gQXJyYXkuaXNBcnJheShfcGFyZW50YWdlKSA/IChfcGFyZW50YWdlLnB1c2gocGFyZW50KSwgX3BhcmVudGFnZSkgOiBfcGFyZW50YWdlID8gW19wYXJlbnRhZ2UsIHBhcmVudF0gOiBwYXJlbnQ7XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLl9yZW1vdmVQYXJlbnQgPSBmdW5jdGlvbiAocGFyZW50KSB7XG4gICAgICAgIHZhciBfcGFyZW50YWdlID0gdGhpcy5fcGFyZW50YWdlO1xuICAgICAgICBpZiAoX3BhcmVudGFnZSA9PT0gcGFyZW50KSB7XG4gICAgICAgICAgICB0aGlzLl9wYXJlbnRhZ2UgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoX3BhcmVudGFnZSkpIHtcbiAgICAgICAgICAgIGFyclJlbW92ZShfcGFyZW50YWdlLCBwYXJlbnQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uICh0ZWFyZG93bikge1xuICAgICAgICB2YXIgX2ZpbmFsaXplcnMgPSB0aGlzLl9maW5hbGl6ZXJzO1xuICAgICAgICBfZmluYWxpemVycyAmJiBhcnJSZW1vdmUoX2ZpbmFsaXplcnMsIHRlYXJkb3duKTtcbiAgICAgICAgaWYgKHRlYXJkb3duIGluc3RhbmNlb2YgU3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICB0ZWFyZG93bi5fcmVtb3ZlUGFyZW50KHRoaXMpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb24uRU1QVFkgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZW1wdHkgPSBuZXcgU3Vic2NyaXB0aW9uKCk7XG4gICAgICAgIGVtcHR5LmNsb3NlZCA9IHRydWU7XG4gICAgICAgIHJldHVybiBlbXB0eTtcbiAgICB9KSgpO1xuICAgIHJldHVybiBTdWJzY3JpcHRpb247XG59KCkpO1xuZXhwb3J0IHsgU3Vic2NyaXB0aW9uIH07XG5leHBvcnQgdmFyIEVNUFRZX1NVQlNDUklQVElPTiA9IFN1YnNjcmlwdGlvbi5FTVBUWTtcbmV4cG9ydCBmdW5jdGlvbiBpc1N1YnNjcmlwdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiAodmFsdWUgaW5zdGFuY2VvZiBTdWJzY3JpcHRpb24gfHxcbiAgICAgICAgKHZhbHVlICYmICdjbG9zZWQnIGluIHZhbHVlICYmIGlzRnVuY3Rpb24odmFsdWUucmVtb3ZlKSAmJiBpc0Z1bmN0aW9uKHZhbHVlLmFkZCkgJiYgaXNGdW5jdGlvbih2YWx1ZS51bnN1YnNjcmliZSkpKTtcbn1cbmZ1bmN0aW9uIGV4ZWNGaW5hbGl6ZXIoZmluYWxpemVyKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24oZmluYWxpemVyKSkge1xuICAgICAgICBmaW5hbGl6ZXIoKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGZpbmFsaXplci51bnN1YnNjcmliZSgpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN1YnNjcmlwdGlvbi5qcy5tYXAiLCJleHBvcnQgdmFyIGNvbmZpZyA9IHtcbiAgICBvblVuaGFuZGxlZEVycm9yOiBudWxsLFxuICAgIG9uU3RvcHBlZE5vdGlmaWNhdGlvbjogbnVsbCxcbiAgICBQcm9taXNlOiB1bmRlZmluZWQsXG4gICAgdXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZzogZmFsc2UsXG4gICAgdXNlRGVwcmVjYXRlZE5leHRDb250ZXh0OiBmYWxzZSxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25maWcuanMubWFwIiwiaW1wb3J0IHsgX19yZWFkLCBfX3NwcmVhZEFycmF5IH0gZnJvbSBcInRzbGliXCI7XG5leHBvcnQgdmFyIHRpbWVvdXRQcm92aWRlciA9IHtcbiAgICBzZXRUaW1lb3V0OiBmdW5jdGlvbiAoaGFuZGxlciwgdGltZW91dCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDI7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgYXJnc1tfaSAtIDJdID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGVsZWdhdGUgPSB0aW1lb3V0UHJvdmlkZXIuZGVsZWdhdGU7XG4gICAgICAgIGlmIChkZWxlZ2F0ZSA9PT0gbnVsbCB8fCBkZWxlZ2F0ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGVsZWdhdGUuc2V0VGltZW91dCkge1xuICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlLnNldFRpbWVvdXQuYXBwbHkoZGVsZWdhdGUsIF9fc3ByZWFkQXJyYXkoW2hhbmRsZXIsIHRpbWVvdXRdLCBfX3JlYWQoYXJncykpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2V0VGltZW91dC5hcHBseSh2b2lkIDAsIF9fc3ByZWFkQXJyYXkoW2hhbmRsZXIsIHRpbWVvdXRdLCBfX3JlYWQoYXJncykpKTtcbiAgICB9LFxuICAgIGNsZWFyVGltZW91dDogZnVuY3Rpb24gKGhhbmRsZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSB0aW1lb3V0UHJvdmlkZXIuZGVsZWdhdGU7XG4gICAgICAgIHJldHVybiAoKGRlbGVnYXRlID09PSBudWxsIHx8IGRlbGVnYXRlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkZWxlZ2F0ZS5jbGVhclRpbWVvdXQpIHx8IGNsZWFyVGltZW91dCkoaGFuZGxlKTtcbiAgICB9LFxuICAgIGRlbGVnYXRlOiB1bmRlZmluZWQsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGltZW91dFByb3ZpZGVyLmpzLm1hcCIsImltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4uL2NvbmZpZyc7XG5pbXBvcnQgeyB0aW1lb3V0UHJvdmlkZXIgfSBmcm9tICcuLi9zY2hlZHVsZXIvdGltZW91dFByb3ZpZGVyJztcbmV4cG9ydCBmdW5jdGlvbiByZXBvcnRVbmhhbmRsZWRFcnJvcihlcnIpIHtcbiAgICB0aW1lb3V0UHJvdmlkZXIuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvblVuaGFuZGxlZEVycm9yID0gY29uZmlnLm9uVW5oYW5kbGVkRXJyb3I7XG4gICAgICAgIGlmIChvblVuaGFuZGxlZEVycm9yKSB7XG4gICAgICAgICAgICBvblVuaGFuZGxlZEVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlcG9ydFVuaGFuZGxlZEVycm9yLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBub29wKCkgeyB9XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub29wLmpzLm1hcCIsImV4cG9ydCB2YXIgQ09NUExFVEVfTk9USUZJQ0FUSU9OID0gKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNyZWF0ZU5vdGlmaWNhdGlvbignQycsIHVuZGVmaW5lZCwgdW5kZWZpbmVkKTsgfSkoKTtcbmV4cG9ydCBmdW5jdGlvbiBlcnJvck5vdGlmaWNhdGlvbihlcnJvcikge1xuICAgIHJldHVybiBjcmVhdGVOb3RpZmljYXRpb24oJ0UnLCB1bmRlZmluZWQsIGVycm9yKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBuZXh0Tm90aWZpY2F0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGNyZWF0ZU5vdGlmaWNhdGlvbignTicsIHZhbHVlLCB1bmRlZmluZWQpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU5vdGlmaWNhdGlvbihraW5kLCB2YWx1ZSwgZXJyb3IpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBraW5kOiBraW5kLFxuICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgIGVycm9yOiBlcnJvcixcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Tm90aWZpY2F0aW9uRmFjdG9yaWVzLmpzLm1hcCIsImltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4uL2NvbmZpZyc7XG52YXIgY29udGV4dCA9IG51bGw7XG5leHBvcnQgZnVuY3Rpb24gZXJyb3JDb250ZXh0KGNiKSB7XG4gICAgaWYgKGNvbmZpZy51c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nKSB7XG4gICAgICAgIHZhciBpc1Jvb3QgPSAhY29udGV4dDtcbiAgICAgICAgaWYgKGlzUm9vdCkge1xuICAgICAgICAgICAgY29udGV4dCA9IHsgZXJyb3JUaHJvd246IGZhbHNlLCBlcnJvcjogbnVsbCB9O1xuICAgICAgICB9XG4gICAgICAgIGNiKCk7XG4gICAgICAgIGlmIChpc1Jvb3QpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IGNvbnRleHQsIGVycm9yVGhyb3duID0gX2EuZXJyb3JUaHJvd24sIGVycm9yID0gX2EuZXJyb3I7XG4gICAgICAgICAgICBjb250ZXh0ID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChlcnJvclRocm93bikge1xuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjYigpO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBjYXB0dXJlRXJyb3IoZXJyKSB7XG4gICAgaWYgKGNvbmZpZy51c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nICYmIGNvbnRleHQpIHtcbiAgICAgICAgY29udGV4dC5lcnJvclRocm93biA9IHRydWU7XG4gICAgICAgIGNvbnRleHQuZXJyb3IgPSBlcnI7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXJyb3JDb250ZXh0LmpzLm1hcCIsImltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vdXRpbC9pc0Z1bmN0aW9uJztcbmltcG9ydCB7IGlzU3Vic2NyaXB0aW9uLCBTdWJzY3JpcHRpb24gfSBmcm9tICcuL1N1YnNjcmlwdGlvbic7XG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICcuL2NvbmZpZyc7XG5pbXBvcnQgeyByZXBvcnRVbmhhbmRsZWRFcnJvciB9IGZyb20gJy4vdXRpbC9yZXBvcnRVbmhhbmRsZWRFcnJvcic7XG5pbXBvcnQgeyBub29wIH0gZnJvbSAnLi91dGlsL25vb3AnO1xuaW1wb3J0IHsgbmV4dE5vdGlmaWNhdGlvbiwgZXJyb3JOb3RpZmljYXRpb24sIENPTVBMRVRFX05PVElGSUNBVElPTiB9IGZyb20gJy4vTm90aWZpY2F0aW9uRmFjdG9yaWVzJztcbmltcG9ydCB7IHRpbWVvdXRQcm92aWRlciB9IGZyb20gJy4vc2NoZWR1bGVyL3RpbWVvdXRQcm92aWRlcic7XG5pbXBvcnQgeyBjYXB0dXJlRXJyb3IgfSBmcm9tICcuL3V0aWwvZXJyb3JDb250ZXh0JztcbnZhciBTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTdWJzY3JpYmVyKGRlc3RpbmF0aW9uKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmlzU3RvcHBlZCA9IGZhbHNlO1xuICAgICAgICBpZiAoZGVzdGluYXRpb24pIHtcbiAgICAgICAgICAgIF90aGlzLmRlc3RpbmF0aW9uID0gZGVzdGluYXRpb247XG4gICAgICAgICAgICBpZiAoaXNTdWJzY3JpcHRpb24oZGVzdGluYXRpb24pKSB7XG4gICAgICAgICAgICAgICAgZGVzdGluYXRpb24uYWRkKF90aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIF90aGlzLmRlc3RpbmF0aW9uID0gRU1QVFlfT0JTRVJWRVI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBTdWJzY3JpYmVyLmNyZWF0ZSA9IGZ1bmN0aW9uIChuZXh0LCBlcnJvciwgY29tcGxldGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTYWZlU3Vic2NyaWJlcihuZXh0LCBlcnJvciwgY29tcGxldGUpO1xuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIGhhbmRsZVN0b3BwZWROb3RpZmljYXRpb24obmV4dE5vdGlmaWNhdGlvbih2YWx1ZSksIHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fbmV4dCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICBpZiAodGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIGhhbmRsZVN0b3BwZWROb3RpZmljYXRpb24oZXJyb3JOb3RpZmljYXRpb24oZXJyKSwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLl9lcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICBoYW5kbGVTdG9wcGVkTm90aWZpY2F0aW9uKENPTVBMRVRFX05PVElGSUNBVElPTiwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLl9jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSB0cnVlO1xuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS51bnN1YnNjcmliZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbiA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh2YWx1ZSk7XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5fZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFN1YnNjcmliZXI7XG59KFN1YnNjcmlwdGlvbikpO1xuZXhwb3J0IHsgU3Vic2NyaWJlciB9O1xudmFyIF9iaW5kID0gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQ7XG5mdW5jdGlvbiBiaW5kKGZuLCB0aGlzQXJnKSB7XG4gICAgcmV0dXJuIF9iaW5kLmNhbGwoZm4sIHRoaXNBcmcpO1xufVxudmFyIENvbnN1bWVyT2JzZXJ2ZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENvbnN1bWVyT2JzZXJ2ZXIocGFydGlhbE9ic2VydmVyKSB7XG4gICAgICAgIHRoaXMucGFydGlhbE9ic2VydmVyID0gcGFydGlhbE9ic2VydmVyO1xuICAgIH1cbiAgICBDb25zdW1lck9ic2VydmVyLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBwYXJ0aWFsT2JzZXJ2ZXIgPSB0aGlzLnBhcnRpYWxPYnNlcnZlcjtcbiAgICAgICAgaWYgKHBhcnRpYWxPYnNlcnZlci5uZXh0KSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHBhcnRpYWxPYnNlcnZlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGhhbmRsZVVuaGFuZGxlZEVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgQ29uc3VtZXJPYnNlcnZlci5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHZhciBwYXJ0aWFsT2JzZXJ2ZXIgPSB0aGlzLnBhcnRpYWxPYnNlcnZlcjtcbiAgICAgICAgaWYgKHBhcnRpYWxPYnNlcnZlci5lcnJvcikge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBwYXJ0aWFsT2JzZXJ2ZXIuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGhhbmRsZVVuaGFuZGxlZEVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGhhbmRsZVVuaGFuZGxlZEVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIENvbnN1bWVyT2JzZXJ2ZXIucHJvdG90eXBlLmNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcGFydGlhbE9ic2VydmVyID0gdGhpcy5wYXJ0aWFsT2JzZXJ2ZXI7XG4gICAgICAgIGlmIChwYXJ0aWFsT2JzZXJ2ZXIuY29tcGxldGUpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcGFydGlhbE9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVVbmhhbmRsZWRFcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBDb25zdW1lck9ic2VydmVyO1xufSgpKTtcbnZhciBTYWZlU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFNhZmVTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFNhZmVTdWJzY3JpYmVyKG9ic2VydmVyT3JOZXh0LCBlcnJvciwgY29tcGxldGUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgdmFyIHBhcnRpYWxPYnNlcnZlcjtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24ob2JzZXJ2ZXJPck5leHQpIHx8ICFvYnNlcnZlck9yTmV4dCkge1xuICAgICAgICAgICAgcGFydGlhbE9ic2VydmVyID0ge1xuICAgICAgICAgICAgICAgIG5leHQ6IChvYnNlcnZlck9yTmV4dCAhPT0gbnVsbCAmJiBvYnNlcnZlck9yTmV4dCAhPT0gdm9pZCAwID8gb2JzZXJ2ZXJPck5leHQgOiB1bmRlZmluZWQpLFxuICAgICAgICAgICAgICAgIGVycm9yOiBlcnJvciAhPT0gbnVsbCAmJiBlcnJvciAhPT0gdm9pZCAwID8gZXJyb3IgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgY29tcGxldGU6IGNvbXBsZXRlICE9PSBudWxsICYmIGNvbXBsZXRlICE9PSB2b2lkIDAgPyBjb21wbGV0ZSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgY29udGV4dF8xO1xuICAgICAgICAgICAgaWYgKF90aGlzICYmIGNvbmZpZy51c2VEZXByZWNhdGVkTmV4dENvbnRleHQpIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0XzEgPSBPYmplY3QuY3JlYXRlKG9ic2VydmVyT3JOZXh0KTtcbiAgICAgICAgICAgICAgICBjb250ZXh0XzEudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy51bnN1YnNjcmliZSgpOyB9O1xuICAgICAgICAgICAgICAgIHBhcnRpYWxPYnNlcnZlciA9IHtcbiAgICAgICAgICAgICAgICAgICAgbmV4dDogb2JzZXJ2ZXJPck5leHQubmV4dCAmJiBiaW5kKG9ic2VydmVyT3JOZXh0Lm5leHQsIGNvbnRleHRfMSksXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiBvYnNlcnZlck9yTmV4dC5lcnJvciAmJiBiaW5kKG9ic2VydmVyT3JOZXh0LmVycm9yLCBjb250ZXh0XzEpLFxuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZTogb2JzZXJ2ZXJPck5leHQuY29tcGxldGUgJiYgYmluZChvYnNlcnZlck9yTmV4dC5jb21wbGV0ZSwgY29udGV4dF8xKSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcGFydGlhbE9ic2VydmVyID0gb2JzZXJ2ZXJPck5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgX3RoaXMuZGVzdGluYXRpb24gPSBuZXcgQ29uc3VtZXJPYnNlcnZlcihwYXJ0aWFsT2JzZXJ2ZXIpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIHJldHVybiBTYWZlU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuZXhwb3J0IHsgU2FmZVN1YnNjcmliZXIgfTtcbmZ1bmN0aW9uIGhhbmRsZVVuaGFuZGxlZEVycm9yKGVycm9yKSB7XG4gICAgaWYgKGNvbmZpZy51c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nKSB7XG4gICAgICAgIGNhcHR1cmVFcnJvcihlcnJvcik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXBvcnRVbmhhbmRsZWRFcnJvcihlcnJvcik7XG4gICAgfVxufVxuZnVuY3Rpb24gZGVmYXVsdEVycm9ySGFuZGxlcihlcnIpIHtcbiAgICB0aHJvdyBlcnI7XG59XG5mdW5jdGlvbiBoYW5kbGVTdG9wcGVkTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbiwgc3Vic2NyaWJlcikge1xuICAgIHZhciBvblN0b3BwZWROb3RpZmljYXRpb24gPSBjb25maWcub25TdG9wcGVkTm90aWZpY2F0aW9uO1xuICAgIG9uU3RvcHBlZE5vdGlmaWNhdGlvbiAmJiB0aW1lb3V0UHJvdmlkZXIuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHJldHVybiBvblN0b3BwZWROb3RpZmljYXRpb24obm90aWZpY2F0aW9uLCBzdWJzY3JpYmVyKTsgfSk7XG59XG5leHBvcnQgdmFyIEVNUFRZX09CU0VSVkVSID0ge1xuICAgIGNsb3NlZDogdHJ1ZSxcbiAgICBuZXh0OiBub29wLFxuICAgIGVycm9yOiBkZWZhdWx0RXJyb3JIYW5kbGVyLFxuICAgIGNvbXBsZXRlOiBub29wLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN1YnNjcmliZXIuanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJzY3JpYmVyIH0gZnJvbSAnLi4vU3Vic2NyaWJlcic7XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBvbk5leHQsIG9uQ29tcGxldGUsIG9uRXJyb3IsIG9uRmluYWxpemUpIHtcbiAgICByZXR1cm4gbmV3IE9wZXJhdG9yU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgb25OZXh0LCBvbkNvbXBsZXRlLCBvbkVycm9yLCBvbkZpbmFsaXplKTtcbn1cbnZhciBPcGVyYXRvclN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhPcGVyYXRvclN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gT3BlcmF0b3JTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBvbk5leHQsIG9uQ29tcGxldGUsIG9uRXJyb3IsIG9uRmluYWxpemUsIHNob3VsZFVuc3Vic2NyaWJlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5vbkZpbmFsaXplID0gb25GaW5hbGl6ZTtcbiAgICAgICAgX3RoaXMuc2hvdWxkVW5zdWJzY3JpYmUgPSBzaG91bGRVbnN1YnNjcmliZTtcbiAgICAgICAgX3RoaXMuX25leHQgPSBvbk5leHRcbiAgICAgICAgICAgID8gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgb25OZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDogX3N1cGVyLnByb3RvdHlwZS5fbmV4dDtcbiAgICAgICAgX3RoaXMuX2Vycm9yID0gb25FcnJvclxuICAgICAgICAgICAgPyBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiBfc3VwZXIucHJvdG90eXBlLl9lcnJvcjtcbiAgICAgICAgX3RoaXMuX2NvbXBsZXRlID0gb25Db21wbGV0ZVxuICAgICAgICAgICAgPyBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgb25Db21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiBfc3VwZXIucHJvdG90eXBlLl9jb21wbGV0ZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPcGVyYXRvclN1YnNjcmliZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmICghdGhpcy5zaG91bGRVbnN1YnNjcmliZSB8fCB0aGlzLnNob3VsZFVuc3Vic2NyaWJlKCkpIHtcbiAgICAgICAgICAgIHZhciBjbG9zZWRfMSA9IHRoaXMuY2xvc2VkO1xuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS51bnN1YnNjcmliZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgIWNsb3NlZF8xICYmICgoX2EgPSB0aGlzLm9uRmluYWxpemUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKHRoaXMpKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIE9wZXJhdG9yU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuZXhwb3J0IHsgT3BlcmF0b3JTdWJzY3JpYmVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1PcGVyYXRvclN1YnNjcmliZXIuanMubWFwIiwiaW1wb3J0IHsgb3BlcmF0ZSB9IGZyb20gJy4uL3V0aWwvbGlmdCc7XG5pbXBvcnQgeyBjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIgfSBmcm9tICcuL09wZXJhdG9yU3Vic2NyaWJlcic7XG5leHBvcnQgZnVuY3Rpb24gbWFwKHByb2plY3QsIHRoaXNBcmcpIHtcbiAgICByZXR1cm4gb3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHByb2plY3QuY2FsbCh0aGlzQXJnLCB2YWx1ZSwgaW5kZXgrKykpO1xuICAgICAgICB9KSk7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYXAuanMubWFwIiwiZXhwb3J0IHZhciBpc0FycmF5TGlrZSA9IChmdW5jdGlvbiAoeCkgeyByZXR1cm4geCAmJiB0eXBlb2YgeC5sZW5ndGggPT09ICdudW1iZXInICYmIHR5cGVvZiB4ICE9PSAnZnVuY3Rpb24nOyB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzQXJyYXlMaWtlLmpzLm1hcCIsImltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tIFwiLi9pc0Z1bmN0aW9uXCI7XG5leHBvcnQgZnVuY3Rpb24gaXNQcm9taXNlKHZhbHVlKSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24odmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHZhbHVlLnRoZW4pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNQcm9taXNlLmpzLm1hcCIsImV4cG9ydCB2YXIgb2JzZXJ2YWJsZSA9IChmdW5jdGlvbiAoKSB7IHJldHVybiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wub2JzZXJ2YWJsZSkgfHwgJ0BAb2JzZXJ2YWJsZSc7IH0pKCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vYnNlcnZhYmxlLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBpZGVudGl0eSh4KSB7XG4gICAgcmV0dXJuIHg7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pZGVudGl0eS5qcy5tYXAiLCJpbXBvcnQgeyBTYWZlU3Vic2NyaWJlciwgU3Vic2NyaWJlciB9IGZyb20gJy4vU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBpc1N1YnNjcmlwdGlvbiB9IGZyb20gJy4vU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IG9ic2VydmFibGUgYXMgU3ltYm9sX29ic2VydmFibGUgfSBmcm9tICcuL3N5bWJvbC9vYnNlcnZhYmxlJztcbmltcG9ydCB7IHBpcGVGcm9tQXJyYXkgfSBmcm9tICcuL3V0aWwvcGlwZSc7XG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICcuL2NvbmZpZyc7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi91dGlsL2lzRnVuY3Rpb24nO1xuaW1wb3J0IHsgZXJyb3JDb250ZXh0IH0gZnJvbSAnLi91dGlsL2Vycm9yQ29udGV4dCc7XG52YXIgT2JzZXJ2YWJsZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gT2JzZXJ2YWJsZShzdWJzY3JpYmUpIHtcbiAgICAgICAgaWYgKHN1YnNjcmliZSkge1xuICAgICAgICAgICAgdGhpcy5fc3Vic2NyaWJlID0gc3Vic2NyaWJlO1xuICAgICAgICB9XG4gICAgfVxuICAgIE9ic2VydmFibGUucHJvdG90eXBlLmxpZnQgPSBmdW5jdGlvbiAob3BlcmF0b3IpIHtcbiAgICAgICAgdmFyIG9ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZSgpO1xuICAgICAgICBvYnNlcnZhYmxlLnNvdXJjZSA9IHRoaXM7XG4gICAgICAgIG9ic2VydmFibGUub3BlcmF0b3IgPSBvcGVyYXRvcjtcbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGU7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbiAob2JzZXJ2ZXJPck5leHQsIGVycm9yLCBjb21wbGV0ZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgc3Vic2NyaWJlciA9IGlzU3Vic2NyaWJlcihvYnNlcnZlck9yTmV4dCkgPyBvYnNlcnZlck9yTmV4dCA6IG5ldyBTYWZlU3Vic2NyaWJlcihvYnNlcnZlck9yTmV4dCwgZXJyb3IsIGNvbXBsZXRlKTtcbiAgICAgICAgZXJyb3JDb250ZXh0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IF90aGlzLCBvcGVyYXRvciA9IF9hLm9wZXJhdG9yLCBzb3VyY2UgPSBfYS5zb3VyY2U7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmFkZChvcGVyYXRvclxuICAgICAgICAgICAgICAgID9cbiAgICAgICAgICAgICAgICAgICAgb3BlcmF0b3IuY2FsbChzdWJzY3JpYmVyLCBzb3VyY2UpXG4gICAgICAgICAgICAgICAgOiBzb3VyY2VcbiAgICAgICAgICAgICAgICAgICAgP1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3N1YnNjcmliZShzdWJzY3JpYmVyKVxuICAgICAgICAgICAgICAgICAgICA6XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fdHJ5U3Vic2NyaWJlKHN1YnNjcmliZXIpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBzdWJzY3JpYmVyO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUuX3RyeVN1YnNjcmliZSA9IGZ1bmN0aW9uIChzaW5rKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc3Vic2NyaWJlKHNpbmspO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHNpbmsuZXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIChuZXh0LCBwcm9taXNlQ3Rvcikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBwcm9taXNlQ3RvciA9IGdldFByb21pc2VDdG9yKHByb21pc2VDdG9yKTtcbiAgICAgICAgcmV0dXJuIG5ldyBwcm9taXNlQ3RvcihmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICB2YXIgc3Vic2NyaWJlciA9IG5ldyBTYWZlU3Vic2NyaWJlcih7XG4gICAgICAgICAgICAgICAgbmV4dDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZXJyb3I6IHJlamVjdCxcbiAgICAgICAgICAgICAgICBjb21wbGV0ZTogcmVzb2x2ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgX3RoaXMuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLl9zdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHJldHVybiAoX2EgPSB0aGlzLnNvdXJjZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlW1N5bWJvbF9vYnNlcnZhYmxlXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5waXBlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb3BlcmF0aW9ucyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgb3BlcmF0aW9uc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwaXBlRnJvbUFycmF5KG9wZXJhdGlvbnMpKHRoaXMpO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUudG9Qcm9taXNlID0gZnVuY3Rpb24gKHByb21pc2VDdG9yKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHByb21pc2VDdG9yID0gZ2V0UHJvbWlzZUN0b3IocHJvbWlzZUN0b3IpO1xuICAgICAgICByZXR1cm4gbmV3IHByb21pc2VDdG9yKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZTtcbiAgICAgICAgICAgIF90aGlzLnN1YnNjcmliZShmdW5jdGlvbiAoeCkgeyByZXR1cm4gKHZhbHVlID0geCk7IH0sIGZ1bmN0aW9uIChlcnIpIHsgcmV0dXJuIHJlamVjdChlcnIpOyB9LCBmdW5jdGlvbiAoKSB7IHJldHVybiByZXNvbHZlKHZhbHVlKTsgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5jcmVhdGUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlKSB7XG4gICAgICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShzdWJzY3JpYmUpO1xuICAgIH07XG4gICAgcmV0dXJuIE9ic2VydmFibGU7XG59KCkpO1xuZXhwb3J0IHsgT2JzZXJ2YWJsZSB9O1xuZnVuY3Rpb24gZ2V0UHJvbWlzZUN0b3IocHJvbWlzZUN0b3IpIHtcbiAgICB2YXIgX2E7XG4gICAgcmV0dXJuIChfYSA9IHByb21pc2VDdG9yICE9PSBudWxsICYmIHByb21pc2VDdG9yICE9PSB2b2lkIDAgPyBwcm9taXNlQ3RvciA6IGNvbmZpZy5Qcm9taXNlKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBQcm9taXNlO1xufVxuZnVuY3Rpb24gaXNPYnNlcnZlcih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAmJiBpc0Z1bmN0aW9uKHZhbHVlLm5leHQpICYmIGlzRnVuY3Rpb24odmFsdWUuZXJyb3IpICYmIGlzRnVuY3Rpb24odmFsdWUuY29tcGxldGUpO1xufVxuZnVuY3Rpb24gaXNTdWJzY3JpYmVyKHZhbHVlKSB7XG4gICAgcmV0dXJuICh2YWx1ZSAmJiB2YWx1ZSBpbnN0YW5jZW9mIFN1YnNjcmliZXIpIHx8IChpc09ic2VydmVyKHZhbHVlKSAmJiBpc1N1YnNjcmlwdGlvbih2YWx1ZSkpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9T2JzZXJ2YWJsZS5qcy5tYXAiLCJpbXBvcnQgeyBpZGVudGl0eSB9IGZyb20gJy4vaWRlbnRpdHknO1xuZXhwb3J0IGZ1bmN0aW9uIHBpcGUoKSB7XG4gICAgdmFyIGZucyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGZuc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICByZXR1cm4gcGlwZUZyb21BcnJheShmbnMpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBpcGVGcm9tQXJyYXkoZm5zKSB7XG4gICAgaWYgKGZucy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGlkZW50aXR5O1xuICAgIH1cbiAgICBpZiAoZm5zLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICByZXR1cm4gZm5zWzBdO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gcGlwZWQoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGZucy5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIGZuKSB7IHJldHVybiBmbihwcmV2KTsgfSwgaW5wdXQpO1xuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1waXBlLmpzLm1hcCIsImltcG9ydCB7IG9ic2VydmFibGUgYXMgU3ltYm9sX29ic2VydmFibGUgfSBmcm9tICcuLi9zeW1ib2wvb2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi9pc0Z1bmN0aW9uJztcbmV4cG9ydCBmdW5jdGlvbiBpc0ludGVyb3BPYnNlcnZhYmxlKGlucHV0KSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24oaW5wdXRbU3ltYm9sX29ic2VydmFibGVdKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzSW50ZXJvcE9ic2VydmFibGUuanMubWFwIiwiaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vaXNGdW5jdGlvbic7XG5leHBvcnQgZnVuY3Rpb24gaXNBc3luY0l0ZXJhYmxlKG9iaikge1xuICAgIHJldHVybiBTeW1ib2wuYXN5bmNJdGVyYXRvciAmJiBpc0Z1bmN0aW9uKG9iaiA9PT0gbnVsbCB8fCBvYmogPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9ialtTeW1ib2wuYXN5bmNJdGVyYXRvcl0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNBc3luY0l0ZXJhYmxlLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBjcmVhdGVJbnZhbGlkT2JzZXJ2YWJsZVR5cGVFcnJvcihpbnB1dCkge1xuICAgIHJldHVybiBuZXcgVHlwZUVycm9yKFwiWW91IHByb3ZpZGVkIFwiICsgKGlucHV0ICE9PSBudWxsICYmIHR5cGVvZiBpbnB1dCA9PT0gJ29iamVjdCcgPyAnYW4gaW52YWxpZCBvYmplY3QnIDogXCInXCIgKyBpbnB1dCArIFwiJ1wiKSArIFwiIHdoZXJlIGEgc3RyZWFtIHdhcyBleHBlY3RlZC4gWW91IGNhbiBwcm92aWRlIGFuIE9ic2VydmFibGUsIFByb21pc2UsIFJlYWRhYmxlU3RyZWFtLCBBcnJheSwgQXN5bmNJdGVyYWJsZSwgb3IgSXRlcmFibGUuXCIpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGhyb3dVbm9ic2VydmFibGVFcnJvci5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gZ2V0U3ltYm9sSXRlcmF0b3IoKSB7XG4gICAgaWYgKHR5cGVvZiBTeW1ib2wgIT09ICdmdW5jdGlvbicgfHwgIVN5bWJvbC5pdGVyYXRvcikge1xuICAgICAgICByZXR1cm4gJ0BAaXRlcmF0b3InO1xuICAgIH1cbiAgICByZXR1cm4gU3ltYm9sLml0ZXJhdG9yO1xufVxuZXhwb3J0IHZhciBpdGVyYXRvciA9IGdldFN5bWJvbEl0ZXJhdG9yKCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pdGVyYXRvci5qcy5tYXAiLCJpbXBvcnQgeyBpdGVyYXRvciBhcyBTeW1ib2xfaXRlcmF0b3IgfSBmcm9tICcuLi9zeW1ib2wvaXRlcmF0b3InO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vaXNGdW5jdGlvbic7XG5leHBvcnQgZnVuY3Rpb24gaXNJdGVyYWJsZShpbnB1dCkge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKGlucHV0ID09PSBudWxsIHx8IGlucHV0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBpbnB1dFtTeW1ib2xfaXRlcmF0b3JdKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzSXRlcmFibGUuanMubWFwIiwiaW1wb3J0IHsgX19hc3luY0dlbmVyYXRvciwgX19hd2FpdCwgX19nZW5lcmF0b3IgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL2lzRnVuY3Rpb24nO1xuZXhwb3J0IGZ1bmN0aW9uIHJlYWRhYmxlU3RyZWFtTGlrZVRvQXN5bmNHZW5lcmF0b3IocmVhZGFibGVTdHJlYW0pIHtcbiAgICByZXR1cm4gX19hc3luY0dlbmVyYXRvcih0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uIHJlYWRhYmxlU3RyZWFtTGlrZVRvQXN5bmNHZW5lcmF0b3JfMSgpIHtcbiAgICAgICAgdmFyIHJlYWRlciwgX2EsIHZhbHVlLCBkb25lO1xuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKF9iLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIgPSByZWFkYWJsZVN0cmVhbS5nZXRSZWFkZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgX2IubGFiZWwgPSAxO1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgX2IudHJ5cy5wdXNoKFsxLCAsIDksIDEwXSk7XG4gICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gMjtcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGlmICghdHJ1ZSkgcmV0dXJuIFszLCA4XTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0LCBfX2F3YWl0KHJlYWRlci5yZWFkKCkpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIF9hID0gX2Iuc2VudCgpLCB2YWx1ZSA9IF9hLnZhbHVlLCBkb25lID0gX2EuZG9uZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFkb25lKSByZXR1cm4gWzMsIDVdO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQsIF9fYXdhaXQodm9pZCAwKV07XG4gICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzIsIF9iLnNlbnQoKV07XG4gICAgICAgICAgICAgICAgY2FzZSA1OiByZXR1cm4gWzQsIF9fYXdhaXQodmFsdWUpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDY6IHJldHVybiBbNCwgX2Iuc2VudCgpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgICAgIF9iLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszLCAyXTtcbiAgICAgICAgICAgICAgICBjYXNlIDg6IHJldHVybiBbMywgMTBdO1xuICAgICAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnJlbGVhc2VMb2NrKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbN107XG4gICAgICAgICAgICAgICAgY2FzZSAxMDogcmV0dXJuIFsyXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNSZWFkYWJsZVN0cmVhbUxpa2Uob2JqKSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24ob2JqID09PSBudWxsIHx8IG9iaiA9PT0gdm9pZCAwID8gdm9pZCAwIDogb2JqLmdldFJlYWRlcik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc1JlYWRhYmxlU3RyZWFtTGlrZS5qcy5tYXAiLCJpbXBvcnQgeyBfX2FzeW5jVmFsdWVzLCBfX2F3YWl0ZXIsIF9fZ2VuZXJhdG9yLCBfX3ZhbHVlcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgaXNBcnJheUxpa2UgfSBmcm9tICcuLi91dGlsL2lzQXJyYXlMaWtlJztcbmltcG9ydCB7IGlzUHJvbWlzZSB9IGZyb20gJy4uL3V0aWwvaXNQcm9taXNlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IGlzSW50ZXJvcE9ic2VydmFibGUgfSBmcm9tICcuLi91dGlsL2lzSW50ZXJvcE9ic2VydmFibGUnO1xuaW1wb3J0IHsgaXNBc3luY0l0ZXJhYmxlIH0gZnJvbSAnLi4vdXRpbC9pc0FzeW5jSXRlcmFibGUnO1xuaW1wb3J0IHsgY3JlYXRlSW52YWxpZE9ic2VydmFibGVUeXBlRXJyb3IgfSBmcm9tICcuLi91dGlsL3Rocm93VW5vYnNlcnZhYmxlRXJyb3InO1xuaW1wb3J0IHsgaXNJdGVyYWJsZSB9IGZyb20gJy4uL3V0aWwvaXNJdGVyYWJsZSc7XG5pbXBvcnQgeyBpc1JlYWRhYmxlU3RyZWFtTGlrZSwgcmVhZGFibGVTdHJlYW1MaWtlVG9Bc3luY0dlbmVyYXRvciB9IGZyb20gJy4uL3V0aWwvaXNSZWFkYWJsZVN0cmVhbUxpa2UnO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4uL3V0aWwvaXNGdW5jdGlvbic7XG5pbXBvcnQgeyByZXBvcnRVbmhhbmRsZWRFcnJvciB9IGZyb20gJy4uL3V0aWwvcmVwb3J0VW5oYW5kbGVkRXJyb3InO1xuaW1wb3J0IHsgb2JzZXJ2YWJsZSBhcyBTeW1ib2xfb2JzZXJ2YWJsZSB9IGZyb20gJy4uL3N5bWJvbC9vYnNlcnZhYmxlJztcbmV4cG9ydCBmdW5jdGlvbiBpbm5lckZyb20oaW5wdXQpIHtcbiAgICBpZiAoaW5wdXQgaW5zdGFuY2VvZiBPYnNlcnZhYmxlKSB7XG4gICAgICAgIHJldHVybiBpbnB1dDtcbiAgICB9XG4gICAgaWYgKGlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgaWYgKGlzSW50ZXJvcE9ic2VydmFibGUoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZnJvbUludGVyb3BPYnNlcnZhYmxlKGlucHV0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNBcnJheUxpa2UoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZnJvbUFycmF5TGlrZShpbnB1dCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzUHJvbWlzZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmcm9tUHJvbWlzZShpbnB1dCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQXN5bmNJdGVyYWJsZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmcm9tQXN5bmNJdGVyYWJsZShpbnB1dCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzSXRlcmFibGUoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZnJvbUl0ZXJhYmxlKGlucHV0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNSZWFkYWJsZVN0cmVhbUxpa2UoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZnJvbVJlYWRhYmxlU3RyZWFtTGlrZShpbnB1dCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGhyb3cgY3JlYXRlSW52YWxpZE9ic2VydmFibGVUeXBlRXJyb3IoaW5wdXQpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZyb21JbnRlcm9wT2JzZXJ2YWJsZShvYmopIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIG9icyA9IG9ialtTeW1ib2xfb2JzZXJ2YWJsZV0oKTtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24ob2JzLnN1YnNjcmliZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBvYnMuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Byb3ZpZGVkIG9iamVjdCBkb2VzIG5vdCBjb3JyZWN0bHkgaW1wbGVtZW50IFN5bWJvbC5vYnNlcnZhYmxlJyk7XG4gICAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZnJvbUFycmF5TGlrZShhcnJheSkge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aCAmJiAhc3Vic2NyaWJlci5jbG9zZWQ7IGkrKykge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KGFycmF5W2ldKTtcbiAgICAgICAgfVxuICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZnJvbVByb21pc2UocHJvbWlzZSkge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICBwcm9taXNlXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmICghc3Vic2NyaWJlci5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZnVuY3Rpb24gKGVycikgeyByZXR1cm4gc3Vic2NyaWJlci5lcnJvcihlcnIpOyB9KVxuICAgICAgICAgICAgLnRoZW4obnVsbCwgcmVwb3J0VW5oYW5kbGVkRXJyb3IpO1xuICAgIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZyb21JdGVyYWJsZShpdGVyYWJsZSkge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgZV8xLCBfYTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZvciAodmFyIGl0ZXJhYmxlXzEgPSBfX3ZhbHVlcyhpdGVyYWJsZSksIGl0ZXJhYmxlXzFfMSA9IGl0ZXJhYmxlXzEubmV4dCgpOyAhaXRlcmFibGVfMV8xLmRvbmU7IGl0ZXJhYmxlXzFfMSA9IGl0ZXJhYmxlXzEubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gaXRlcmFibGVfMV8xLnZhbHVlO1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKHN1YnNjcmliZXIuY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVfMV8xKSB7IGVfMSA9IHsgZXJyb3I6IGVfMV8xIH07IH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmIChpdGVyYWJsZV8xXzEgJiYgIWl0ZXJhYmxlXzFfMS5kb25lICYmIChfYSA9IGl0ZXJhYmxlXzEucmV0dXJuKSkgX2EuY2FsbChpdGVyYWJsZV8xKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8xKSB0aHJvdyBlXzEuZXJyb3I7IH1cbiAgICAgICAgfVxuICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZnJvbUFzeW5jSXRlcmFibGUoYXN5bmNJdGVyYWJsZSkge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICBwcm9jZXNzKGFzeW5jSXRlcmFibGUsIHN1YnNjcmliZXIpLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHsgcmV0dXJuIHN1YnNjcmliZXIuZXJyb3IoZXJyKTsgfSk7XG4gICAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZnJvbVJlYWRhYmxlU3RyZWFtTGlrZShyZWFkYWJsZVN0cmVhbSkge1xuICAgIHJldHVybiBmcm9tQXN5bmNJdGVyYWJsZShyZWFkYWJsZVN0cmVhbUxpa2VUb0FzeW5jR2VuZXJhdG9yKHJlYWRhYmxlU3RyZWFtKSk7XG59XG5mdW5jdGlvbiBwcm9jZXNzKGFzeW5jSXRlcmFibGUsIHN1YnNjcmliZXIpIHtcbiAgICB2YXIgYXN5bmNJdGVyYWJsZV8xLCBhc3luY0l0ZXJhYmxlXzFfMTtcbiAgICB2YXIgZV8yLCBfYTtcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB2YWx1ZSwgZV8yXzE7XG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoX2IubGFiZWwpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIF9iLnRyeXMucHVzaChbMCwgNSwgNiwgMTFdKTtcbiAgICAgICAgICAgICAgICAgICAgYXN5bmNJdGVyYWJsZV8xID0gX19hc3luY1ZhbHVlcyhhc3luY0l0ZXJhYmxlKTtcbiAgICAgICAgICAgICAgICAgICAgX2IubGFiZWwgPSAxO1xuICAgICAgICAgICAgICAgIGNhc2UgMTogcmV0dXJuIFs0LCBhc3luY0l0ZXJhYmxlXzEubmV4dCgpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGlmICghKGFzeW5jSXRlcmFibGVfMV8xID0gX2Iuc2VudCgpLCAhYXN5bmNJdGVyYWJsZV8xXzEuZG9uZSkpIHJldHVybiBbMywgNF07XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gYXN5bmNJdGVyYWJsZV8xXzEudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdWJzY3JpYmVyLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDM7XG4gICAgICAgICAgICAgICAgY2FzZSAzOiByZXR1cm4gWzMsIDFdO1xuICAgICAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFszLCAxMV07XG4gICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICBlXzJfMSA9IF9iLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgZV8yID0geyBlcnJvcjogZV8yXzEgfTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszLCAxMV07XG4gICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICBfYi50cnlzLnB1c2goWzYsICwgOSwgMTBdKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoYXN5bmNJdGVyYWJsZV8xXzEgJiYgIWFzeW5jSXRlcmFibGVfMV8xLmRvbmUgJiYgKF9hID0gYXN5bmNJdGVyYWJsZV8xLnJldHVybikpKSByZXR1cm4gWzMsIDhdO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQsIF9hLmNhbGwoYXN5bmNJdGVyYWJsZV8xKV07XG4gICAgICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgICAgICBfYi5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gODtcbiAgICAgICAgICAgICAgICBjYXNlIDg6IHJldHVybiBbMywgMTBdO1xuICAgICAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVfMikgdGhyb3cgZV8yLmVycm9yO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzddO1xuICAgICAgICAgICAgICAgIGNhc2UgMTA6IHJldHVybiBbN107XG4gICAgICAgICAgICAgICAgY2FzZSAxMTpcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzJdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlubmVyRnJvbS5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gZ2V0WEhSUmVzcG9uc2UoeGhyKSB7XG4gICAgc3dpdGNoICh4aHIucmVzcG9uc2VUeXBlKSB7XG4gICAgICAgIGNhc2UgJ2pzb24nOiB7XG4gICAgICAgICAgICBpZiAoJ3Jlc3BvbnNlJyBpbiB4aHIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geGhyLnJlc3BvbnNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIGllWEhSID0geGhyO1xuICAgICAgICAgICAgICAgIHJldHVybiBKU09OLnBhcnNlKGllWEhSLnJlc3BvbnNlVGV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnZG9jdW1lbnQnOlxuICAgICAgICAgICAgcmV0dXJuIHhoci5yZXNwb25zZVhNTDtcbiAgICAgICAgY2FzZSAndGV4dCc6XG4gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgIGlmICgncmVzcG9uc2UnIGluIHhocikge1xuICAgICAgICAgICAgICAgIHJldHVybiB4aHIucmVzcG9uc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgaWVYSFIgPSB4aHI7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGllWEhSLnJlc3BvbnNlVGV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldFhIUlJlc3BvbnNlLmpzLm1hcCIsImltcG9ydCB7IGdldFhIUlJlc3BvbnNlIH0gZnJvbSAnLi9nZXRYSFJSZXNwb25zZSc7XG52YXIgQWpheFJlc3BvbnNlID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBBamF4UmVzcG9uc2Uob3JpZ2luYWxFdmVudCwgeGhyLCByZXF1ZXN0LCB0eXBlKSB7XG4gICAgICAgIGlmICh0eXBlID09PSB2b2lkIDApIHsgdHlwZSA9ICdkb3dubG9hZF9sb2FkJzsgfVxuICAgICAgICB0aGlzLm9yaWdpbmFsRXZlbnQgPSBvcmlnaW5hbEV2ZW50O1xuICAgICAgICB0aGlzLnhociA9IHhocjtcbiAgICAgICAgdGhpcy5yZXF1ZXN0ID0gcmVxdWVzdDtcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICAgICAgdmFyIHN0YXR1cyA9IHhoci5zdGF0dXMsIHJlc3BvbnNlVHlwZSA9IHhoci5yZXNwb25zZVR5cGU7XG4gICAgICAgIHRoaXMuc3RhdHVzID0gc3RhdHVzICE9PSBudWxsICYmIHN0YXR1cyAhPT0gdm9pZCAwID8gc3RhdHVzIDogMDtcbiAgICAgICAgdGhpcy5yZXNwb25zZVR5cGUgPSByZXNwb25zZVR5cGUgIT09IG51bGwgJiYgcmVzcG9uc2VUeXBlICE9PSB2b2lkIDAgPyByZXNwb25zZVR5cGUgOiAnJztcbiAgICAgICAgdmFyIGFsbEhlYWRlcnMgPSB4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCk7XG4gICAgICAgIHRoaXMucmVzcG9uc2VIZWFkZXJzID0gYWxsSGVhZGVyc1xuICAgICAgICAgICAgP1xuICAgICAgICAgICAgICAgIGFsbEhlYWRlcnMuc3BsaXQoJ1xcbicpLnJlZHVjZShmdW5jdGlvbiAoaGVhZGVycywgbGluZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSBsaW5lLmluZGV4T2YoJzogJyk7XG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnNbbGluZS5zbGljZSgwLCBpbmRleCldID0gbGluZS5zbGljZShpbmRleCArIDIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaGVhZGVycztcbiAgICAgICAgICAgICAgICB9LCB7fSlcbiAgICAgICAgICAgIDoge307XG4gICAgICAgIHRoaXMucmVzcG9uc2UgPSBnZXRYSFJSZXNwb25zZSh4aHIpO1xuICAgICAgICB2YXIgbG9hZGVkID0gb3JpZ2luYWxFdmVudC5sb2FkZWQsIHRvdGFsID0gb3JpZ2luYWxFdmVudC50b3RhbDtcbiAgICAgICAgdGhpcy5sb2FkZWQgPSBsb2FkZWQ7XG4gICAgICAgIHRoaXMudG90YWwgPSB0b3RhbDtcbiAgICB9XG4gICAgcmV0dXJuIEFqYXhSZXNwb25zZTtcbn0oKSk7XG5leHBvcnQgeyBBamF4UmVzcG9uc2UgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFqYXhSZXNwb25zZS5qcy5tYXAiLCJpbXBvcnQgeyBnZXRYSFJSZXNwb25zZSB9IGZyb20gJy4vZ2V0WEhSUmVzcG9uc2UnO1xuaW1wb3J0IHsgY3JlYXRlRXJyb3JDbGFzcyB9IGZyb20gJy4uL3V0aWwvY3JlYXRlRXJyb3JDbGFzcyc7XG5leHBvcnQgdmFyIEFqYXhFcnJvciA9IGNyZWF0ZUVycm9yQ2xhc3MoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHJldHVybiBmdW5jdGlvbiBBamF4RXJyb3JJbXBsKG1lc3NhZ2UsIHhociwgcmVxdWVzdCkge1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgICAgICB0aGlzLm5hbWUgPSAnQWpheEVycm9yJztcbiAgICAgICAgdGhpcy54aHIgPSB4aHI7XG4gICAgICAgIHRoaXMucmVxdWVzdCA9IHJlcXVlc3Q7XG4gICAgICAgIHRoaXMuc3RhdHVzID0geGhyLnN0YXR1cztcbiAgICAgICAgdGhpcy5yZXNwb25zZVR5cGUgPSB4aHIucmVzcG9uc2VUeXBlO1xuICAgICAgICB2YXIgcmVzcG9uc2U7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXNwb25zZSA9IGdldFhIUlJlc3BvbnNlKHhocik7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgcmVzcG9uc2UgPSB4aHIucmVzcG9uc2VUZXh0O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgICB9O1xufSk7XG5leHBvcnQgdmFyIEFqYXhUaW1lb3V0RXJyb3IgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEFqYXhUaW1lb3V0RXJyb3JJbXBsKHhociwgcmVxdWVzdCkge1xuICAgICAgICBBamF4RXJyb3IuY2FsbCh0aGlzLCAnYWpheCB0aW1lb3V0JywgeGhyLCByZXF1ZXN0KTtcbiAgICAgICAgdGhpcy5uYW1lID0gJ0FqYXhUaW1lb3V0RXJyb3InO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgQWpheFRpbWVvdXRFcnJvckltcGwucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShBamF4RXJyb3IucHJvdG90eXBlKTtcbiAgICByZXR1cm4gQWpheFRpbWVvdXRFcnJvckltcGw7XG59KSgpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXJyb3JzLmpzLm1hcCIsImltcG9ydCB7IF9fYXNzaWduIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICcuLi9vcGVyYXRvcnMvbWFwJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IEFqYXhSZXNwb25zZSB9IGZyb20gJy4vQWpheFJlc3BvbnNlJztcbmltcG9ydCB7IEFqYXhUaW1lb3V0RXJyb3IsIEFqYXhFcnJvciB9IGZyb20gJy4vZXJyb3JzJztcbmZ1bmN0aW9uIGFqYXhHZXQodXJsLCBoZWFkZXJzKSB7XG4gICAgcmV0dXJuIGFqYXgoeyBtZXRob2Q6ICdHRVQnLCB1cmw6IHVybCwgaGVhZGVyczogaGVhZGVycyB9KTtcbn1cbmZ1bmN0aW9uIGFqYXhQb3N0KHVybCwgYm9keSwgaGVhZGVycykge1xuICAgIHJldHVybiBhamF4KHsgbWV0aG9kOiAnUE9TVCcsIHVybDogdXJsLCBib2R5OiBib2R5LCBoZWFkZXJzOiBoZWFkZXJzIH0pO1xufVxuZnVuY3Rpb24gYWpheERlbGV0ZSh1cmwsIGhlYWRlcnMpIHtcbiAgICByZXR1cm4gYWpheCh7IG1ldGhvZDogJ0RFTEVURScsIHVybDogdXJsLCBoZWFkZXJzOiBoZWFkZXJzIH0pO1xufVxuZnVuY3Rpb24gYWpheFB1dCh1cmwsIGJvZHksIGhlYWRlcnMpIHtcbiAgICByZXR1cm4gYWpheCh7IG1ldGhvZDogJ1BVVCcsIHVybDogdXJsLCBib2R5OiBib2R5LCBoZWFkZXJzOiBoZWFkZXJzIH0pO1xufVxuZnVuY3Rpb24gYWpheFBhdGNoKHVybCwgYm9keSwgaGVhZGVycykge1xuICAgIHJldHVybiBhamF4KHsgbWV0aG9kOiAnUEFUQ0gnLCB1cmw6IHVybCwgYm9keTogYm9keSwgaGVhZGVyczogaGVhZGVycyB9KTtcbn1cbnZhciBtYXBSZXNwb25zZSA9IG1hcChmdW5jdGlvbiAoeCkgeyByZXR1cm4geC5yZXNwb25zZTsgfSk7XG5mdW5jdGlvbiBhamF4R2V0SlNPTih1cmwsIGhlYWRlcnMpIHtcbiAgICByZXR1cm4gbWFwUmVzcG9uc2UoYWpheCh7XG4gICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgIHVybDogdXJsLFxuICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgIH0pKTtcbn1cbmV4cG9ydCB2YXIgYWpheCA9IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGNyZWF0ZSA9IGZ1bmN0aW9uICh1cmxPckNvbmZpZykge1xuICAgICAgICB2YXIgY29uZmlnID0gdHlwZW9mIHVybE9yQ29uZmlnID09PSAnc3RyaW5nJ1xuICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgdXJsOiB1cmxPckNvbmZpZyxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDogdXJsT3JDb25maWc7XG4gICAgICAgIHJldHVybiBmcm9tQWpheChjb25maWcpO1xuICAgIH07XG4gICAgY3JlYXRlLmdldCA9IGFqYXhHZXQ7XG4gICAgY3JlYXRlLnBvc3QgPSBhamF4UG9zdDtcbiAgICBjcmVhdGUuZGVsZXRlID0gYWpheERlbGV0ZTtcbiAgICBjcmVhdGUucHV0ID0gYWpheFB1dDtcbiAgICBjcmVhdGUucGF0Y2ggPSBhamF4UGF0Y2g7XG4gICAgY3JlYXRlLmdldEpTT04gPSBhamF4R2V0SlNPTjtcbiAgICByZXR1cm4gY3JlYXRlO1xufSkoKTtcbnZhciBVUExPQUQgPSAndXBsb2FkJztcbnZhciBET1dOTE9BRCA9ICdkb3dubG9hZCc7XG52YXIgTE9BRFNUQVJUID0gJ2xvYWRzdGFydCc7XG52YXIgUFJPR1JFU1MgPSAncHJvZ3Jlc3MnO1xudmFyIExPQUQgPSAnbG9hZCc7XG5leHBvcnQgZnVuY3Rpb24gZnJvbUFqYXgoaW5pdCkge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoZGVzdGluYXRpb24pIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgdmFyIGNvbmZpZyA9IF9fYXNzaWduKHsgYXN5bmM6IHRydWUsIGNyb3NzRG9tYWluOiBmYWxzZSwgd2l0aENyZWRlbnRpYWxzOiBmYWxzZSwgbWV0aG9kOiAnR0VUJywgdGltZW91dDogMCwgcmVzcG9uc2VUeXBlOiAnanNvbicgfSwgaW5pdCk7XG4gICAgICAgIHZhciBxdWVyeVBhcmFtcyA9IGNvbmZpZy5xdWVyeVBhcmFtcywgY29uZmlndXJlZEJvZHkgPSBjb25maWcuYm9keSwgY29uZmlndXJlZEhlYWRlcnMgPSBjb25maWcuaGVhZGVycztcbiAgICAgICAgdmFyIHVybCA9IGNvbmZpZy51cmw7XG4gICAgICAgIGlmICghdXJsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd1cmwgaXMgcmVxdWlyZWQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocXVlcnlQYXJhbXMpIHtcbiAgICAgICAgICAgIHZhciBzZWFyY2hQYXJhbXNfMTtcbiAgICAgICAgICAgIGlmICh1cmwuaW5jbHVkZXMoJz8nKSkge1xuICAgICAgICAgICAgICAgIHZhciBwYXJ0cyA9IHVybC5zcGxpdCgnPycpO1xuICAgICAgICAgICAgICAgIGlmICgyIDwgcGFydHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgdXJsJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNlYXJjaFBhcmFtc18xID0gbmV3IFVSTFNlYXJjaFBhcmFtcyhwYXJ0c1sxXSk7XG4gICAgICAgICAgICAgICAgbmV3IFVSTFNlYXJjaFBhcmFtcyhxdWVyeVBhcmFtcykuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIGtleSkgeyByZXR1cm4gc2VhcmNoUGFyYW1zXzEuc2V0KGtleSwgdmFsdWUpOyB9KTtcbiAgICAgICAgICAgICAgICB1cmwgPSBwYXJ0c1swXSArICc/JyArIHNlYXJjaFBhcmFtc18xO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc2VhcmNoUGFyYW1zXzEgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHF1ZXJ5UGFyYW1zKTtcbiAgICAgICAgICAgICAgICB1cmwgPSB1cmwgKyAnPycgKyBzZWFyY2hQYXJhbXNfMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgaGVhZGVycyA9IHt9O1xuICAgICAgICBpZiAoY29uZmlndXJlZEhlYWRlcnMpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBjb25maWd1cmVkSGVhZGVycykge1xuICAgICAgICAgICAgICAgIGlmIChjb25maWd1cmVkSGVhZGVycy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnNba2V5LnRvTG93ZXJDYXNlKCldID0gY29uZmlndXJlZEhlYWRlcnNba2V5XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNyb3NzRG9tYWluID0gY29uZmlnLmNyb3NzRG9tYWluO1xuICAgICAgICBpZiAoIWNyb3NzRG9tYWluICYmICEoJ3gtcmVxdWVzdGVkLXdpdGgnIGluIGhlYWRlcnMpKSB7XG4gICAgICAgICAgICBoZWFkZXJzWyd4LXJlcXVlc3RlZC13aXRoJ10gPSAnWE1MSHR0cFJlcXVlc3QnO1xuICAgICAgICB9XG4gICAgICAgIHZhciB3aXRoQ3JlZGVudGlhbHMgPSBjb25maWcud2l0aENyZWRlbnRpYWxzLCB4c3JmQ29va2llTmFtZSA9IGNvbmZpZy54c3JmQ29va2llTmFtZSwgeHNyZkhlYWRlck5hbWUgPSBjb25maWcueHNyZkhlYWRlck5hbWU7XG4gICAgICAgIGlmICgod2l0aENyZWRlbnRpYWxzIHx8ICFjcm9zc0RvbWFpbikgJiYgeHNyZkNvb2tpZU5hbWUgJiYgeHNyZkhlYWRlck5hbWUpIHtcbiAgICAgICAgICAgIHZhciB4c3JmQ29va2llID0gKF9iID0gKF9hID0gZG9jdW1lbnQgPT09IG51bGwgfHwgZG9jdW1lbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRvY3VtZW50LmNvb2tpZS5tYXRjaChuZXcgUmVnRXhwKFwiKF58O1xcXFxzKikoXCIgKyB4c3JmQ29va2llTmFtZSArIFwiKT0oW147XSopXCIpKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnBvcCgpKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiAnJztcbiAgICAgICAgICAgIGlmICh4c3JmQ29va2llKSB7XG4gICAgICAgICAgICAgICAgaGVhZGVyc1t4c3JmSGVhZGVyTmFtZV0gPSB4c3JmQ29va2llO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciBib2R5ID0gZXh0cmFjdENvbnRlbnRUeXBlQW5kTWF5YmVTZXJpYWxpemVCb2R5KGNvbmZpZ3VyZWRCb2R5LCBoZWFkZXJzKTtcbiAgICAgICAgdmFyIF9yZXF1ZXN0ID0gX19hc3NpZ24oX19hc3NpZ24oe30sIGNvbmZpZyksIHsgdXJsOiB1cmwsXG4gICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgICAgICAgICAgYm9keTogYm9keSB9KTtcbiAgICAgICAgdmFyIHhocjtcbiAgICAgICAgeGhyID0gaW5pdC5jcmVhdGVYSFIgPyBpbml0LmNyZWF0ZVhIUigpIDogbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgIHtcbiAgICAgICAgICAgIHZhciBwcm9ncmVzc1N1YnNjcmliZXJfMSA9IGluaXQucHJvZ3Jlc3NTdWJzY3JpYmVyLCBfYyA9IGluaXQuaW5jbHVkZURvd25sb2FkUHJvZ3Jlc3MsIGluY2x1ZGVEb3dubG9hZFByb2dyZXNzID0gX2MgPT09IHZvaWQgMCA/IGZhbHNlIDogX2MsIF9kID0gaW5pdC5pbmNsdWRlVXBsb2FkUHJvZ3Jlc3MsIGluY2x1ZGVVcGxvYWRQcm9ncmVzcyA9IF9kID09PSB2b2lkIDAgPyBmYWxzZSA6IF9kO1xuICAgICAgICAgICAgdmFyIGFkZEVycm9yRXZlbnQgPSBmdW5jdGlvbiAodHlwZSwgZXJyb3JGYWN0b3J5KSB7XG4gICAgICAgICAgICAgICAgeGhyLmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgICAgIHZhciBlcnJvciA9IGVycm9yRmFjdG9yeSgpO1xuICAgICAgICAgICAgICAgICAgICAoX2EgPSBwcm9ncmVzc1N1YnNjcmliZXJfMSA9PT0gbnVsbCB8fCBwcm9ncmVzc1N1YnNjcmliZXJfMSA9PT0gdm9pZCAwID8gdm9pZCAwIDogcHJvZ3Jlc3NTdWJzY3JpYmVyXzEuZXJyb3IpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKHByb2dyZXNzU3Vic2NyaWJlcl8xLCBlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uLmVycm9yKGVycm9yKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBhZGRFcnJvckV2ZW50KCd0aW1lb3V0JywgZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IEFqYXhUaW1lb3V0RXJyb3IoeGhyLCBfcmVxdWVzdCk7IH0pO1xuICAgICAgICAgICAgYWRkRXJyb3JFdmVudCgnYWJvcnQnLCBmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgQWpheEVycm9yKCdhYm9ydGVkJywgeGhyLCBfcmVxdWVzdCk7IH0pO1xuICAgICAgICAgICAgdmFyIGNyZWF0ZVJlc3BvbnNlXzEgPSBmdW5jdGlvbiAoZGlyZWN0aW9uLCBldmVudCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQWpheFJlc3BvbnNlKGV2ZW50LCB4aHIsIF9yZXF1ZXN0LCBkaXJlY3Rpb24gKyBcIl9cIiArIGV2ZW50LnR5cGUpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHZhciBhZGRQcm9ncmVzc0V2ZW50XzEgPSBmdW5jdGlvbiAodGFyZ2V0LCB0eXBlLCBkaXJlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb24ubmV4dChjcmVhdGVSZXNwb25zZV8xKGRpcmVjdGlvbiwgZXZlbnQpKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoaW5jbHVkZVVwbG9hZFByb2dyZXNzKSB7XG4gICAgICAgICAgICAgICAgW0xPQURTVEFSVCwgUFJPR1JFU1MsIExPQURdLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHsgcmV0dXJuIGFkZFByb2dyZXNzRXZlbnRfMSh4aHIudXBsb2FkLCB0eXBlLCBVUExPQUQpOyB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwcm9ncmVzc1N1YnNjcmliZXJfMSkge1xuICAgICAgICAgICAgICAgIFtMT0FEU1RBUlQsIFBST0dSRVNTXS5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7IHJldHVybiB4aHIudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgZnVuY3Rpb24gKGUpIHsgdmFyIF9hOyByZXR1cm4gKF9hID0gcHJvZ3Jlc3NTdWJzY3JpYmVyXzEgPT09IG51bGwgfHwgcHJvZ3Jlc3NTdWJzY3JpYmVyXzEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHByb2dyZXNzU3Vic2NyaWJlcl8xLm5leHQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKHByb2dyZXNzU3Vic2NyaWJlcl8xLCBlKTsgfSk7IH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGluY2x1ZGVEb3dubG9hZFByb2dyZXNzKSB7XG4gICAgICAgICAgICAgICAgW0xPQURTVEFSVCwgUFJPR1JFU1NdLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHsgcmV0dXJuIGFkZFByb2dyZXNzRXZlbnRfMSh4aHIsIHR5cGUsIERPV05MT0FEKTsgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgZW1pdEVycm9yXzEgPSBmdW5jdGlvbiAoc3RhdHVzKSB7XG4gICAgICAgICAgICAgICAgdmFyIG1zZyA9ICdhamF4IGVycm9yJyArIChzdGF0dXMgPyAnICcgKyBzdGF0dXMgOiAnJyk7XG4gICAgICAgICAgICAgICAgZGVzdGluYXRpb24uZXJyb3IobmV3IEFqYXhFcnJvcihtc2csIHhociwgX3JlcXVlc3QpKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB4aHIuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAgICAoX2EgPSBwcm9ncmVzc1N1YnNjcmliZXJfMSA9PT0gbnVsbCB8fCBwcm9ncmVzc1N1YnNjcmliZXJfMSA9PT0gdm9pZCAwID8gdm9pZCAwIDogcHJvZ3Jlc3NTdWJzY3JpYmVyXzEuZXJyb3IpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKHByb2dyZXNzU3Vic2NyaWJlcl8xLCBlKTtcbiAgICAgICAgICAgICAgICBlbWl0RXJyb3JfMSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB4aHIuYWRkRXZlbnRMaXN0ZW5lcihMT0FELCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICAgICAgICAgIHZhciBzdGF0dXMgPSB4aHIuc3RhdHVzO1xuICAgICAgICAgICAgICAgIGlmIChzdGF0dXMgPCA0MDApIHtcbiAgICAgICAgICAgICAgICAgICAgKF9hID0gcHJvZ3Jlc3NTdWJzY3JpYmVyXzEgPT09IG51bGwgfHwgcHJvZ3Jlc3NTdWJzY3JpYmVyXzEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHByb2dyZXNzU3Vic2NyaWJlcl8xLmNvbXBsZXRlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2FsbChwcm9ncmVzc1N1YnNjcmliZXJfMSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXNwb25zZSA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gY3JlYXRlUmVzcG9uc2VfMShET1dOTE9BRCwgZXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb24ubmV4dChyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAoX2IgPSBwcm9ncmVzc1N1YnNjcmliZXJfMSA9PT0gbnVsbCB8fCBwcm9ncmVzc1N1YnNjcmliZXJfMSA9PT0gdm9pZCAwID8gdm9pZCAwIDogcHJvZ3Jlc3NTdWJzY3JpYmVyXzEuZXJyb3IpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKHByb2dyZXNzU3Vic2NyaWJlcl8xLCBldmVudCk7XG4gICAgICAgICAgICAgICAgICAgIGVtaXRFcnJvcl8xKHN0YXR1cyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHVzZXIgPSBfcmVxdWVzdC51c2VyLCBtZXRob2QgPSBfcmVxdWVzdC5tZXRob2QsIGFzeW5jID0gX3JlcXVlc3QuYXN5bmM7XG4gICAgICAgIGlmICh1c2VyKSB7XG4gICAgICAgICAgICB4aHIub3BlbihtZXRob2QsIHVybCwgYXN5bmMsIHVzZXIsIF9yZXF1ZXN0LnBhc3N3b3JkKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHhoci5vcGVuKG1ldGhvZCwgdXJsLCBhc3luYyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFzeW5jKSB7XG4gICAgICAgICAgICB4aHIudGltZW91dCA9IF9yZXF1ZXN0LnRpbWVvdXQ7XG4gICAgICAgICAgICB4aHIucmVzcG9uc2VUeXBlID0gX3JlcXVlc3QucmVzcG9uc2VUeXBlO1xuICAgICAgICB9XG4gICAgICAgIGlmICgnd2l0aENyZWRlbnRpYWxzJyBpbiB4aHIpIHtcbiAgICAgICAgICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSBfcmVxdWVzdC53aXRoQ3JlZGVudGlhbHM7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIga2V5IGluIGhlYWRlcnMpIHtcbiAgICAgICAgICAgIGlmIChoZWFkZXJzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihrZXksIGhlYWRlcnNba2V5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJvZHkpIHtcbiAgICAgICAgICAgIHhoci5zZW5kKGJvZHkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgeGhyLnNlbmQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHhociAmJiB4aHIucmVhZHlTdGF0ZSAhPT0gNCkge1xuICAgICAgICAgICAgICAgIHhoci5hYm9ydCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH0pO1xufVxuZnVuY3Rpb24gZXh0cmFjdENvbnRlbnRUeXBlQW5kTWF5YmVTZXJpYWxpemVCb2R5KGJvZHksIGhlYWRlcnMpIHtcbiAgICB2YXIgX2E7XG4gICAgaWYgKCFib2R5IHx8XG4gICAgICAgIHR5cGVvZiBib2R5ID09PSAnc3RyaW5nJyB8fFxuICAgICAgICBpc0Zvcm1EYXRhKGJvZHkpIHx8XG4gICAgICAgIGlzVVJMU2VhcmNoUGFyYW1zKGJvZHkpIHx8XG4gICAgICAgIGlzQXJyYXlCdWZmZXIoYm9keSkgfHxcbiAgICAgICAgaXNGaWxlKGJvZHkpIHx8XG4gICAgICAgIGlzQmxvYihib2R5KSB8fFxuICAgICAgICBpc1JlYWRhYmxlU3RyZWFtKGJvZHkpKSB7XG4gICAgICAgIHJldHVybiBib2R5O1xuICAgIH1cbiAgICBpZiAoaXNBcnJheUJ1ZmZlclZpZXcoYm9keSkpIHtcbiAgICAgICAgcmV0dXJuIGJvZHkuYnVmZmVyO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGJvZHkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIGhlYWRlcnNbJ2NvbnRlbnQtdHlwZSddID0gKF9hID0gaGVhZGVyc1snY29udGVudC10eXBlJ10pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6ICdhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTgnO1xuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoYm9keSk7XG4gICAgfVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gYm9keSB0eXBlJyk7XG59XG52YXIgX3RvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbmZ1bmN0aW9uIHRvU3RyaW5nQ2hlY2sob2JqLCBuYW1lKSB7XG4gICAgcmV0dXJuIF90b1N0cmluZy5jYWxsKG9iaikgPT09IFwiW29iamVjdCBcIiArIG5hbWUgKyBcIl1cIjtcbn1cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXIoYm9keSkge1xuICAgIHJldHVybiB0b1N0cmluZ0NoZWNrKGJvZHksICdBcnJheUJ1ZmZlcicpO1xufVxuZnVuY3Rpb24gaXNGaWxlKGJvZHkpIHtcbiAgICByZXR1cm4gdG9TdHJpbmdDaGVjayhib2R5LCAnRmlsZScpO1xufVxuZnVuY3Rpb24gaXNCbG9iKGJvZHkpIHtcbiAgICByZXR1cm4gdG9TdHJpbmdDaGVjayhib2R5LCAnQmxvYicpO1xufVxuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlclZpZXcoYm9keSkge1xuICAgIHJldHVybiB0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIEFycmF5QnVmZmVyLmlzVmlldyhib2R5KTtcbn1cbmZ1bmN0aW9uIGlzRm9ybURhdGEoYm9keSkge1xuICAgIHJldHVybiB0eXBlb2YgRm9ybURhdGEgIT09ICd1bmRlZmluZWQnICYmIGJvZHkgaW5zdGFuY2VvZiBGb3JtRGF0YTtcbn1cbmZ1bmN0aW9uIGlzVVJMU2VhcmNoUGFyYW1zKGJvZHkpIHtcbiAgICByZXR1cm4gdHlwZW9mIFVSTFNlYXJjaFBhcmFtcyAhPT0gJ3VuZGVmaW5lZCcgJiYgYm9keSBpbnN0YW5jZW9mIFVSTFNlYXJjaFBhcmFtcztcbn1cbmZ1bmN0aW9uIGlzUmVhZGFibGVTdHJlYW0oYm9keSkge1xuICAgIHJldHVybiB0eXBlb2YgUmVhZGFibGVTdHJlYW0gIT09ICd1bmRlZmluZWQnICYmIGJvZHkgaW5zdGFuY2VvZiBSZWFkYWJsZVN0cmVhbTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFqYXguanMubWFwIiwiaW1wb3J0IHsgY2F0Y2hFcnJvciwgZnJvbSwgbWFwIH0gZnJvbSBcInJ4anNcIjtcbmltcG9ydCB7IGFqYXggfSBmcm9tIFwicnhqcy9hamF4XCI7XG52YXIgQVBJX1VSTCA9IFwiaHR0cDovL2xvY2FsaG9zdDozMDAwXCI7XG5leHBvcnQgZnVuY3Rpb24gZ2V0Rm9vZCh0eXBlKSB7XG4gICAgcmV0dXJuIGZyb20oZmV0Y2goXCJcIi5jb25jYXQoQVBJX1VSTCwgXCIvZm9vZC8/dHlwZT1cIikuY29uY2F0KHR5cGUpKVxuICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgaWYgKHJlc3BvbnNlLm9rKVxuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgY29uc29sZS5sb2cocmVzcG9uc2Uuc3RhdHVzVGV4dCk7XG4gICAgfSlcbiAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikgeyByZXR1cm4gY29uc29sZS5sb2coZXJyb3IpOyB9KSk7XG59XG5leHBvcnQgdmFyIGRhdGFBUEkgPSBhamF4LmdldEpTT04oXCJcIi5jb25jYXQoQVBJX1VSTCwgXCIvZGJcIikpLnBpcGUobWFwKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgIHJldHVybiByZXNwb25zZTtcbn0pLCBjYXRjaEVycm9yKGZ1bmN0aW9uIChlcnIpIHtcbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgdGhyb3cgZXJyO1xufSkpO1xuZXhwb3J0IGZ1bmN0aW9uIGdldEZydWl0KHR5cGUpIHtcbiAgICByZXR1cm4gZnJvbShmZXRjaChcIlwiLmNvbmNhdChBUElfVVJMLCBcIi9mcnVpdC8/dHlwZT1cIikuY29uY2F0KHR5cGUpKVxuICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgaWYgKHJlc3BvbnNlLm9rKVxuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgY29uc29sZS5sb2cocmVzcG9uc2Uuc3RhdHVzVGV4dCk7XG4gICAgfSlcbiAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikgeyByZXR1cm4gY29uc29sZS5sb2coZXJyb3IpOyB9KSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0VmVnZXRhYmxlKHR5cGUpIHtcbiAgICByZXR1cm4gZnJvbShmZXRjaChcIlwiLmNvbmNhdChBUElfVVJMLCBcIi92ZWdldGFibGUvP3R5cGU9XCIpLmNvbmNhdCh0eXBlKSlcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgIGlmIChyZXNwb25zZS5vaylcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlLnN0YXR1c1RleHQpO1xuICAgIH0pXG4gICAgICAgIC5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHsgcmV0dXJuIGNvbnNvbGUubG9nKGVycm9yKTsgfSkpO1xufVxuIiwiaW1wb3J0IHsgaW5uZXJGcm9tIH0gZnJvbSAnLi4vb2JzZXJ2YWJsZS9pbm5lckZyb20nO1xuaW1wb3J0IHsgY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyIH0gZnJvbSAnLi9PcGVyYXRvclN1YnNjcmliZXInO1xuaW1wb3J0IHsgb3BlcmF0ZSB9IGZyb20gJy4uL3V0aWwvbGlmdCc7XG5leHBvcnQgZnVuY3Rpb24gY2F0Y2hFcnJvcihzZWxlY3Rvcikge1xuICAgIHJldHVybiBvcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGlubmVyU3ViID0gbnVsbDtcbiAgICAgICAgdmFyIHN5bmNVbnN1YiA9IGZhbHNlO1xuICAgICAgICB2YXIgaGFuZGxlZFJlc3VsdDtcbiAgICAgICAgaW5uZXJTdWIgPSBzb3VyY2Uuc3Vic2NyaWJlKGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgaGFuZGxlZFJlc3VsdCA9IGlubmVyRnJvbShzZWxlY3RvcihlcnIsIGNhdGNoRXJyb3Ioc2VsZWN0b3IpKHNvdXJjZSkpKTtcbiAgICAgICAgICAgIGlmIChpbm5lclN1Yikge1xuICAgICAgICAgICAgICAgIGlubmVyU3ViLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgaW5uZXJTdWIgPSBudWxsO1xuICAgICAgICAgICAgICAgIGhhbmRsZWRSZXN1bHQuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc3luY1Vuc3ViID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgICAgICBpZiAoc3luY1Vuc3ViKSB7XG4gICAgICAgICAgICBpbm5lclN1Yi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgaW5uZXJTdWIgPSBudWxsO1xuICAgICAgICAgICAgaGFuZGxlZFJlc3VsdC5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNhdGNoRXJyb3IuanMubWFwIiwiaW1wb3J0IHsgc2NoZWR1bGVkIH0gZnJvbSAnLi4vc2NoZWR1bGVkL3NjaGVkdWxlZCc7XG5pbXBvcnQgeyBpbm5lckZyb20gfSBmcm9tICcuL2lubmVyRnJvbSc7XG5leHBvcnQgZnVuY3Rpb24gZnJvbShpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgcmV0dXJuIHNjaGVkdWxlciA/IHNjaGVkdWxlZChpbnB1dCwgc2NoZWR1bGVyKSA6IGlubmVyRnJvbShpbnB1dCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mcm9tLmpzLm1hcCIsInZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xudmFyIF9fZ2VuZXJhdG9yID0gKHRoaXMgJiYgdGhpcy5fX2dlbmVyYXRvcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIGJvZHkpIHtcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xuICAgICAgICB3aGlsZSAoZyAmJiAoZyA9IDAsIG9wWzBdICYmIChfID0gMCkpLCBfKSB0cnkge1xuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XG4gICAgfVxufTtcbmltcG9ydCB7IGRhdGFBUEksIGdldEZydWl0IH0gZnJvbSBcIi4uL29ic2VydmFibGVzL2FwaXNlcnZpY2VcIjtcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVHYW1lTGF5b3V0KGJvZHkpIHtcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB1cHBlckNvbnRhaW5lciwgdGl0bGUxLCBzc3MsIHRpdGxlMiwgbG93ZXJDb250YWluZXIsIGxlZnRDb250YWluZXIsIGdhbWVDb250YWluZXIsIGNhbnZhcywgcmlnaHRDb250YWluZXIsIHNldHRpbmdzU2VjdGlvbiwgZGltRGl2LCBzaGFwZURpdiwgZm9vZERpdiwgZnJ1aXREaXYsIHZlZ2V0YWJsZURpdiwgZGltZW5zaW9uLCBzbGlkZXIsIHNsaWRlclZhbHVlLCB3LCBzdGFydEJ1dHRvbiwgc2hvd1Jlc3VsdHNCdXR0b24sIHJlc3VsdHNTZWN0aW9uO1xuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICB1cHBlckNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgdXBwZXJDb250YWluZXIuY2xhc3NMaXN0LmFkZCgndXBwZXItY29udGFpbmVyJyk7XG4gICAgICAgICAgICBib2R5LmFwcGVuZENoaWxkKHVwcGVyQ29udGFpbmVyKTtcbiAgICAgICAgICAgIHRpdGxlMSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2gxJyk7XG4gICAgICAgICAgICB0aXRsZTEudGV4dENvbnRlbnQgPSAncnhqJztcbiAgICAgICAgICAgIHVwcGVyQ29udGFpbmVyLmFwcGVuZENoaWxkKHRpdGxlMSk7XG4gICAgICAgICAgICBzc3MgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcbiAgICAgICAgICAgIHNzcy5zcmMgPSAnc3JjXFxcXGFzc2V0c1xcXFxzbmFrZSAoMSkucG5nJztcbiAgICAgICAgICAgIHNzcy5hbHQgPSAnc25ha2UnO1xuICAgICAgICAgICAgc3NzLmNsYXNzTGlzdC5hZGQoJ3NzcycpO1xuICAgICAgICAgICAgdXBwZXJDb250YWluZXIuYXBwZW5kQ2hpbGQoc3NzKTtcbiAgICAgICAgICAgIHRpdGxlMiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2gxJyk7XG4gICAgICAgICAgICB0aXRsZTIudGV4dENvbnRlbnQgPSAnbmFrZSc7XG4gICAgICAgICAgICB1cHBlckNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aXRsZTIpO1xuICAgICAgICAgICAgbG93ZXJDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIGxvd2VyQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ2xvd2VyLWNvbnRhaW5lcicpO1xuICAgICAgICAgICAgYm9keS5hcHBlbmRDaGlsZChsb3dlckNvbnRhaW5lcik7XG4gICAgICAgICAgICBsZWZ0Q29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICBsZWZ0Q29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ2xlZnQtY29udGFpbmVyJyk7XG4gICAgICAgICAgICBsb3dlckNvbnRhaW5lci5hcHBlbmRDaGlsZChsZWZ0Q29udGFpbmVyKTtcbiAgICAgICAgICAgIGdhbWVDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIGdhbWVDb250YWluZXIuY2xhc3NMaXN0LmFkZCgnZ2FtZS1jb250YWluZXInKTtcbiAgICAgICAgICAgIGxvd2VyQ29udGFpbmVyLmFwcGVuZENoaWxkKGdhbWVDb250YWluZXIpO1xuICAgICAgICAgICAgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgICAgICAgICBjYW52YXMuaWQgPSAnZ2FtZS1jYW52YXMnO1xuICAgICAgICAgICAgZ2FtZUNvbnRhaW5lci5hcHBlbmRDaGlsZChjYW52YXMpO1xuICAgICAgICAgICAgLy9wcm9ibm9cbiAgICAgICAgICAgIGRyYXdHcmlkKGNhbnZhcywgMTApO1xuICAgICAgICAgICAgZHJhd0Zvb2QoY2FudmFzLCAxMCwgJ2FwcGxlJyk7XG4gICAgICAgICAgICByaWdodENvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgcmlnaHRDb250YWluZXIuY2xhc3NMaXN0LmFkZCgncmlnaHQtY29udGFpbmVyJyk7XG4gICAgICAgICAgICBsb3dlckNvbnRhaW5lci5hcHBlbmRDaGlsZChyaWdodENvbnRhaW5lcik7XG4gICAgICAgICAgICBzZXR0aW5nc1NlY3Rpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIHNldHRpbmdzU2VjdGlvbi5jbGFzc0xpc3QuYWRkKCdzZXR0aW5ncy1zZWN0aW9uJyk7XG4gICAgICAgICAgICBkaW1EaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIGRpbURpdi5jbGFzc0xpc3QuYWRkKCdkaW1EaXYnKTtcbiAgICAgICAgICAgIGRpbURpdi5pZCA9ICdkaW1EaXYnO1xuICAgICAgICAgICAgc2V0dGluZ3NTZWN0aW9uLmFwcGVuZENoaWxkKGRpbURpdik7XG4gICAgICAgICAgICBzaGFwZURpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgc2hhcGVEaXYuY2xhc3NMaXN0LmFkZCgnc2hhcGVEaXYnKTtcbiAgICAgICAgICAgIHNoYXBlRGl2LmlkID0gJ3NoYXBlRGl2JztcbiAgICAgICAgICAgIHNldHRpbmdzU2VjdGlvbi5hcHBlbmRDaGlsZChzaGFwZURpdik7XG4gICAgICAgICAgICBmb29kRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICBmb29kRGl2LmNsYXNzTGlzdC5hZGQoJ2Zvb2REaXYnKTtcbiAgICAgICAgICAgIGZvb2REaXYuaWQgPSAnZm9vZERpdic7XG4gICAgICAgICAgICBzZXR0aW5nc1NlY3Rpb24uYXBwZW5kQ2hpbGQoZm9vZERpdik7XG4gICAgICAgICAgICBmcnVpdERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgZnJ1aXREaXYuY2xhc3NMaXN0LmFkZCgnZnJ1aXREaXYnKTtcbiAgICAgICAgICAgIGZydWl0RGl2LmlkID0gJ2ZydWl0RGl2JztcbiAgICAgICAgICAgIHNldHRpbmdzU2VjdGlvbi5hcHBlbmRDaGlsZChmcnVpdERpdik7XG4gICAgICAgICAgICB2ZWdldGFibGVEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIHZlZ2V0YWJsZURpdi5jbGFzc0xpc3QuYWRkKCd2ZWdldGFibGVEaXYnKTtcbiAgICAgICAgICAgIHZlZ2V0YWJsZURpdi5pZCA9ICd2ZWdldGFibGVEaXYnO1xuICAgICAgICAgICAgc2V0dGluZ3NTZWN0aW9uLmFwcGVuZENoaWxkKHZlZ2V0YWJsZURpdik7XG4gICAgICAgICAgICBkaW1lbnNpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdoMycpO1xuICAgICAgICAgICAgZGltZW5zaW9uLmNsYXNzTGlzdC5hZGQoJ2RpbWVuc2lvbicpO1xuICAgICAgICAgICAgZGltZW5zaW9uLnRleHRDb250ZW50ID0gJ0RpbWVuc2lvbic7XG4gICAgICAgICAgICBkaW1EaXYuYXBwZW5kQ2hpbGQoZGltZW5zaW9uKTtcbiAgICAgICAgICAgIHNsaWRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgICAgICAgICBzbGlkZXIudHlwZSA9ICdyYW5nZSc7XG4gICAgICAgICAgICBzbGlkZXIubWluID0gJzUnO1xuICAgICAgICAgICAgc2xpZGVyLm1heCA9ICcxMCc7XG4gICAgICAgICAgICBzbGlkZXIuc3RlcCA9ICcxJztcbiAgICAgICAgICAgIHNsaWRlci5jbGFzc0xpc3QuYWRkKCdzbGlkZXInKTtcbiAgICAgICAgICAgIHNsaWRlci5pZCA9ICdzbGlkZXInO1xuICAgICAgICAgICAgZGltRGl2LmFwcGVuZENoaWxkKHNsaWRlcik7XG4gICAgICAgICAgICBzbGlkZXJWYWx1ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RleHQnKTtcbiAgICAgICAgICAgIHNsaWRlclZhbHVlLmNsYXNzTGlzdC5hZGQoJ3NsaWRlclZhbHVlJyk7XG4gICAgICAgICAgICBzbGlkZXJWYWx1ZS5pZCA9ICdzbGlkZXJWYWx1ZSc7XG4gICAgICAgICAgICBzbGlkZXJWYWx1ZS50ZXh0Q29udGVudCA9ICcxMCc7XG4gICAgICAgICAgICBkaW1EaXYuYXBwZW5kQ2hpbGQoc2xpZGVyVmFsdWUpO1xuICAgICAgICAgICAgdyA9IHNsaWRlci52YWx1ZTtcbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyBjb25zdCByZXNwb25zZSA6IFJlc3BvbnNlID0gYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUpPT57XG4gICAgICAgICAgICAvLyAgICAgZGF0YUFQSS5zdWJzY3JpYmUoKGRhdGEpID0+IHtcbiAgICAgICAgICAgIC8vICAgICAvLyBjb25zdCBzaGFwZXMgPSByZXNwb25zZS5zaGFwZXM7XG4gICAgICAgICAgICAvLyAgICAgLy8gY29uc3QgZm9vZCA9IHJlc3BvbnNlLmZvb2Q7XG4gICAgICAgICAgICAvLyAgICAgLy8gY29uc3QgZnJ1aXQgPSByZXNwb25zZS5mcnVpdDtcbiAgICAgICAgICAgIC8vICAgICAvLyBjb25zdCB2ZWdldGFibGUgPSByZXNwb25zZS52ZWdldGFibGU7XG4gICAgICAgICAgICAvLyAgICAgcmVzb2x2ZShkYXRhKTtcbiAgICAgICAgICAgIC8vIH0pO1xuICAgICAgICAgICAgLy8gfSk7XG4gICAgICAgICAgICBkYXRhQVBJLnN1YnNjcmliZShmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICBjcmVhdGVTaGFwZXMocmVzcG9uc2Uuc2hhcGVzLCAnc2hhcGVEaXYnKTtcbiAgICAgICAgICAgICAgICBjcmVhdGVGb29kKHJlc3BvbnNlLmZvb2QsIHJlc3BvbnNlLmZydWl0LCByZXNwb25zZS52ZWdldGFibGUsICdmb29kRGl2Jyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGxlZnRDb250YWluZXIuYXBwZW5kQ2hpbGQoc2V0dGluZ3NTZWN0aW9uKTtcbiAgICAgICAgICAgIHN0YXJ0QnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgICAgICAgICBzdGFydEJ1dHRvbi50ZXh0Q29udGVudCA9ICdTVEFSVCBHQU1FJztcbiAgICAgICAgICAgIHN0YXJ0QnV0dG9uLmlkID0gJ3N0YXJ0LWJ1dHRvbic7XG4gICAgICAgICAgICBsZWZ0Q29udGFpbmVyLmFwcGVuZENoaWxkKHN0YXJ0QnV0dG9uKTtcbiAgICAgICAgICAgIHNob3dSZXN1bHRzQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgICAgICAgICBzaG93UmVzdWx0c0J1dHRvbi50ZXh0Q29udGVudCA9ICdTaG93IFJlc3VsdHMnO1xuICAgICAgICAgICAgc2hvd1Jlc3VsdHNCdXR0b24uaWQgPSAnc2hvdy1yZXN1bHRzLWJ1dHRvbic7XG4gICAgICAgICAgICByaWdodENvbnRhaW5lci5hcHBlbmRDaGlsZChzaG93UmVzdWx0c0J1dHRvbik7XG4gICAgICAgICAgICByZXN1bHRzU2VjdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgcmVzdWx0c1NlY3Rpb24uY2xhc3NMaXN0LmFkZCgncmVzdWx0cy1zZWN0aW9uJyk7XG4gICAgICAgICAgICByZXN1bHRzU2VjdGlvbi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgICAgLy9kaXNwbGF5IHJlc3VsdHNcbiAgICAgICAgICAgIHJpZ2h0Q29udGFpbmVyLmFwcGVuZENoaWxkKHJlc3VsdHNTZWN0aW9uKTtcbiAgICAgICAgICAgIHNob3dSZXN1bHRzQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdHNTZWN0aW9uLnN0eWxlLmRpc3BsYXkgPSByZXN1bHRzU2VjdGlvbi5zdHlsZS5kaXNwbGF5ID09PSAnbm9uZScgPyAnYmxvY2snIDogJ25vbmUnO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gY3JlYXRlU2hhcGVzKHNoYXBlcywgY29udGFpbmVySUQpIHtcbiAgICAvLyByZXR1cm4gbmV3IFByb21pc2U8dm9pZD4oKHJlc29sdmUpID0+IHtcbiAgICB2YXIgc2hhcGVEaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChjb250YWluZXJJRCk7XG4gICAgdmFyIHNoYXBlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaDMnKTtcbiAgICBzaGFwZS5jbGFzc0xpc3QuYWRkKCdzaGFwZScpO1xuICAgIHNoYXBlLnRleHRDb250ZW50ID0gJ1NuYWtlIHNoYXBlJztcbiAgICBzaGFwZURpdi5hcHBlbmRDaGlsZChzaGFwZSk7XG4gICAgdmFyIHNoYXBlQ2hlY2tib3hlcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHNoYXBlQ2hlY2tib3hlcy5jbGFzc0xpc3QuYWRkKCdzaGFwZUNoZWNrYm94ZXMnKTtcbiAgICBzaGFwZURpdi5hcHBlbmRDaGlsZChzaGFwZUNoZWNrYm94ZXMpO1xuICAgIHZhciBzaGFwZUxhYmVscyA9IHtcbiAgICAgICAgcm91bmQ6ICdcXHUyNUNGJyxcbiAgICAgICAgc3F1YXJlOiAnXFx1MjVBMCdcbiAgICB9O1xuICAgIHNoYXBlcy5mb3JFYWNoKGZ1bmN0aW9uIChzaGFwZSkge1xuICAgICAgICB2YXIgc2hhcGVDaGVja2JveENvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBzaGFwZUNoZWNrYm94Q29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ3NoYXBlQ2hlY2tib3hDb250YWluZXInKTtcbiAgICAgICAgdmFyIHNoYXBlQ2hlY2tib3ggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICAgICAgICBzaGFwZUNoZWNrYm94LnR5cGUgPSAncmFkaW8nO1xuICAgICAgICBzaGFwZUNoZWNrYm94Lm5hbWUgPSAnc2hhcGVzJztcbiAgICAgICAgc2hhcGVDaGVja2JveC52YWx1ZSA9IHNoYXBlLnR5cGU7XG4gICAgICAgIHNoYXBlQ2hlY2tib3guaWQgPSBzaGFwZS5pZC50b1N0cmluZygpO1xuICAgICAgICB2YXIgc2hhcGVMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xhYmVsJyk7XG4gICAgICAgIHNoYXBlTGFiZWwuY2xhc3NMaXN0LmFkZCgnc2hhcGVMYWJlbCcpO1xuICAgICAgICBzaGFwZUxhYmVsLmlubmVySFRNTCA9IFwiXCIuY29uY2F0KHNoYXBlTGFiZWxzW3NoYXBlLnR5cGVdKTtcbiAgICAgICAgc2hhcGVDaGVja2JveENvbnRhaW5lci5hcHBlbmRDaGlsZChzaGFwZUxhYmVsKTtcbiAgICAgICAgc2hhcGVDaGVja2JveENvbnRhaW5lci5hcHBlbmRDaGlsZChzaGFwZUNoZWNrYm94KTtcbiAgICAgICAgc2hhcGVDaGVja2JveGVzLmFwcGVuZENoaWxkKHNoYXBlQ2hlY2tib3hDb250YWluZXIpO1xuICAgIH0pO1xuICAgIC8vICAgICByZXNvbHZlKCk7XG4gICAgLy8gfSk7XG59XG5mdW5jdGlvbiBjcmVhdGVGb29kKGZvb2QsIC8vYXN5bmNcbmZydWl0LCB2ZWdldGFibGUsIGNvbnRhaW5lcklEKSB7XG4gICAgLy8gcmV0dXJuIG5ldyBQcm9taXNlPHZvaWQ+KChyZXNvbHZlKSA9PiB7XG4gICAgdmFyIGZvb2REaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChjb250YWluZXJJRCk7XG4gICAgdmFyIGZvb2RUeXBlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaDMnKTtcbiAgICBmb29kVHlwZS5jbGFzc0xpc3QuYWRkKCdmb29kVHlwZScpO1xuICAgIGZvb2RUeXBlLnRleHRDb250ZW50ID0gJ0Zvb2QnO1xuICAgIGZvb2REaXYuYXBwZW5kQ2hpbGQoZm9vZFR5cGUpO1xuICAgIHZhciBmb29kQ2hlY2tib3hlcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGZvb2RDaGVja2JveGVzLmNsYXNzTGlzdC5hZGQoJ2Zvb2RDaGVja2JveGVzJyk7XG4gICAgZm9vZERpdi5hcHBlbmRDaGlsZChmb29kQ2hlY2tib3hlcyk7XG4gICAgZm9vZC5mb3JFYWNoKGZ1bmN0aW9uIChmb29kKSB7XG4gICAgICAgIHZhciBmb29kQ2hlY2tib3hDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgZm9vZENoZWNrYm94Q29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ2Zvb2RDaGVja2JveENvbnRhaW5lcicpO1xuICAgICAgICB2YXIgZm9vZENoZWNrYm94ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICAgICAgZm9vZENoZWNrYm94LnR5cGUgPSAncmFkaW8nO1xuICAgICAgICBmb29kQ2hlY2tib3gubmFtZSA9ICdmb29kJztcbiAgICAgICAgZm9vZENoZWNrYm94LnZhbHVlID0gZm9vZC50eXBlO1xuICAgICAgICBmb29kQ2hlY2tib3guaWQgPSBmb29kLmlkLnRvU3RyaW5nKCk7XG4gICAgICAgIHZhciBmb29kTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsYWJlbCcpO1xuICAgICAgICBmb29kTGFiZWwuY2xhc3NMaXN0LmFkZCgnZm9vZExhYmVsJyk7XG4gICAgICAgIGZvb2RMYWJlbC5pbm5lckhUTUwgPSBcIlwiLmNvbmNhdChmb29kLnR5cGUpO1xuICAgICAgICBmb29kQ2hlY2tib3hDb250YWluZXIuYXBwZW5kQ2hpbGQoZm9vZExhYmVsKTtcbiAgICAgICAgZm9vZENoZWNrYm94Q29udGFpbmVyLmFwcGVuZENoaWxkKGZvb2RDaGVja2JveCk7XG4gICAgICAgIGZvb2RDaGVja2JveGVzLmFwcGVuZENoaWxkKGZvb2RDaGVja2JveENvbnRhaW5lcik7XG4gICAgfSk7XG4gICAgdmFyIGZydWl0RGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZydWl0RGl2Jyk7XG4gICAgZnJ1aXQuZm9yRWFjaChmdW5jdGlvbiAoZnJ1aXQpIHtcbiAgICAgICAgdmFyIGZydWl0Q2hlY2tib3hDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgZnJ1aXRDaGVja2JveENvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdmcnVpdENoZWNrYm94Q29udGFpbmVyJyk7XG4gICAgICAgIHZhciBmcnVpdENoZWNrYm94ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICAgICAgZnJ1aXRDaGVja2JveC50eXBlID0gJ2NoZWNrYm94JztcbiAgICAgICAgZnJ1aXRDaGVja2JveC5uYW1lID0gJ2ZydWl0JztcbiAgICAgICAgZnJ1aXRDaGVja2JveC52YWx1ZSA9IGZydWl0LnR5cGU7XG4gICAgICAgIHZhciBmcnVpdExhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7XG4gICAgICAgIGZydWl0TGFiZWwuY2xhc3NMaXN0LmFkZCgnZnJ1aXRMYWJlbCcpO1xuICAgICAgICAvLyBmcnVpdExhYmVsLmlubmVySFRNTCA9IGAke2ZydWl0LnR5cGV9YDtcbiAgICAgICAgZnJ1aXRMYWJlbC5zcmMgPSBcInNyY1xcXFxhc3NldHNcXFxcXCIuY29uY2F0KGZydWl0LnR5cGUsIFwiLnBuZ1wiKTtcbiAgICAgICAgZnJ1aXRDaGVja2JveENvbnRhaW5lci5hcHBlbmRDaGlsZChmcnVpdExhYmVsKTtcbiAgICAgICAgZnJ1aXRDaGVja2JveENvbnRhaW5lci5hcHBlbmRDaGlsZChmcnVpdENoZWNrYm94KTtcbiAgICAgICAgZnJ1aXREaXYuYXBwZW5kQ2hpbGQoZnJ1aXRDaGVja2JveENvbnRhaW5lcik7XG4gICAgfSk7XG4gICAgZnJ1aXREaXYuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICB2YXIgdmVnZXRhYmxlRGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3ZlZ2V0YWJsZURpdicpO1xuICAgIHZlZ2V0YWJsZS5mb3JFYWNoKGZ1bmN0aW9uICh2ZWdldGFibGUpIHtcbiAgICAgICAgdmFyIHZlZ2V0YWJsZUNoZWNrYm94Q29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHZlZ2V0YWJsZUNoZWNrYm94Q29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ3ZlZ2V0YWJsZUNoZWNrYm94Q29udGFpbmVyJyk7XG4gICAgICAgIHZhciB2ZWdldGFibGVDaGVja2JveCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgICAgIHZlZ2V0YWJsZUNoZWNrYm94LnR5cGUgPSAnY2hlY2tib3gnO1xuICAgICAgICB2ZWdldGFibGVDaGVja2JveC5uYW1lID0gJ3ZlZ2V0YWJsZSc7XG4gICAgICAgIHZlZ2V0YWJsZUNoZWNrYm94LnZhbHVlID0gdmVnZXRhYmxlLnR5cGU7XG4gICAgICAgIHZhciB2ZWdldGFibGVMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuICAgICAgICB2ZWdldGFibGVMYWJlbC5jbGFzc0xpc3QuYWRkKCd2ZWdldGFibGVMYWJlbCcpO1xuICAgICAgICB2ZWdldGFibGVMYWJlbC5zcmMgPSBcInNyY1xcXFxhc3NldHNcXFxcXCIuY29uY2F0KHZlZ2V0YWJsZS50eXBlLCBcIi5wbmdcIik7XG4gICAgICAgIHZlZ2V0YWJsZUNoZWNrYm94Q29udGFpbmVyLmFwcGVuZENoaWxkKHZlZ2V0YWJsZUxhYmVsKTtcbiAgICAgICAgdmVnZXRhYmxlQ2hlY2tib3hDb250YWluZXIuYXBwZW5kQ2hpbGQodmVnZXRhYmxlQ2hlY2tib3gpO1xuICAgICAgICB2ZWdldGFibGVEaXYuYXBwZW5kQ2hpbGQodmVnZXRhYmxlQ2hlY2tib3hDb250YWluZXIpO1xuICAgIH0pO1xuICAgIHZlZ2V0YWJsZURpdi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgIHZhciBmcnVpdFJhZGlvID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaW5wdXRbbmFtZT1cImZvb2RcIl1bdmFsdWU9XCJmcnVpdFwiXScpO1xuICAgIGZydWl0UmFkaW8uYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoZnJ1aXRSYWRpby5jaGVja2VkKSB7XG4gICAgICAgICAgICBmcnVpdERpdi5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnO1xuICAgICAgICAgICAgdmVnZXRhYmxlRGl2LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBmcnVpdERpdi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgdmFyIHZlZ2V0YWJsZVJhZGlvID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaW5wdXRbbmFtZT1cImZvb2RcIl1bdmFsdWU9XCJ2ZWdldGFibGVcIl0nKTtcbiAgICB2ZWdldGFibGVSYWRpby5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh2ZWdldGFibGVSYWRpby5jaGVja2VkKSB7XG4gICAgICAgICAgICB2ZWdldGFibGVEaXYuc3R5bGUuZGlzcGxheSA9ICdmbGV4JztcbiAgICAgICAgICAgIGZydWl0RGl2LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2ZWdldGFibGVEaXYuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIC8vIHJlc29sdmUoKTtcbiAgICAvLyB9KTtcbn1cbmZ1bmN0aW9uIGRyYXdHcmlkKGNhbnZhcywgZGltZW5zaW9uKSB7XG4gICAgdmFyIGNlbGxXID0gY2FudmFzLndpZHRoIC8gZGltZW5zaW9uO1xuICAgIHZhciBjZWxsSCA9IGNhbnZhcy5oZWlnaHQgLyBkaW1lbnNpb247XG4gICAgdmFyIGN2UmVjdCA9IGNhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICB2YXIgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgaWYgKCFjdHgpXG4gICAgICAgIHJldHVybjtcbiAgICBjdHguY2xlYXJSZWN0KGN2UmVjdC5sZWZ0LCBjdlJlY3QudG9wLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xuICAgIGN0eC5zdHJva2VTdHlsZSA9ICdncmVlbic7XG4gICAgY3R4LmxpbmVXaWR0aCA9IDEuMjtcbiAgICBmb3IgKHZhciB4ID0gMDsgeCA8IGNhbnZhcy53aWR0aDsgeCArPSBjZWxsVykge1xuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIGN0eC5tb3ZlVG8oeCwgMCk7XG4gICAgICAgIGN0eC5saW5lVG8oeCwgY2FudmFzLmhlaWdodCk7XG4gICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICB9XG4gICAgZm9yICh2YXIgeSA9IDA7IHkgPCBjYW52YXMuaGVpZ2h0OyB5ICs9IGNlbGxIKSB7XG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgY3R4Lm1vdmVUbygwLCB5KTtcbiAgICAgICAgY3R4LmxpbmVUbyhjYW52YXMud2lkdGgsIHkpO1xuICAgICAgICBjdHguc3Ryb2tlKCk7XG4gICAgfVxufVxuZnVuY3Rpb24gZHJhd0Zvb2QoY2FudmFzLCBkaW1lbnNpb24sIHNyYykge1xuICAgIHZhciB4ID0gMDtcbiAgICB2YXIgeSA9IDA7XG4gICAgdmFyIHNsaWRlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzbGlkZXInKTsgLy9OVUxMXG4gICAgLy8gY29uc3QgdmFsID0gIHNsaWRlci52YWx1ZSBhcyB1bmtub3duIGFzIG51bWJlcjtcbiAgICAvLyBjb25zb2xlLmxvZyh2YWwpO1xuICAgIHZhciB3aWR0aCA9IGNhbnZhcy53aWR0aCAvIGRpbWVuc2lvbjtcbiAgICB2YXIgaGVpZ2h0ID0gY2FudmFzLmhlaWdodCAvIGRpbWVuc2lvbjtcbiAgICB2YXIgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgaWYgKCFjdHgpXG4gICAgICAgIHJldHVybjtcbiAgICB2YXIgZm9vZCA9IG5ldyBJbWFnZSgpO1xuICAgIGZvb2Quc3JjID0gXCJzcmNcXFxcYXNzZXRzXFxcXFwiICsgc3JjICsgXCIucG5nXCI7XG4gICAgZm9vZC5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciByYW5kMSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGRpbWVuc2lvbikgKiB3aWR0aDtcbiAgICAgICAgdmFyIHJhbmQyID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogZGltZW5zaW9uKSAqIGhlaWdodDtcbiAgICAgICAgeCA9IHJhbmQxO1xuICAgICAgICB5ID0gcmFuZDI7XG4gICAgICAgIGN0eC5kcmF3SW1hZ2UoZm9vZCwgcmFuZDEsIHJhbmQyLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICB9O1xuICAgIC8vdnJhY2EgaSBib2p1IG5hY3J0YW5lIGhyYW5lIGRhIGJpIHptaWphIG5ha29uIHBvamVkZW5vZyB2b2NhL3BvdnJjYSBwcm9tZW5pbGEgYm9qdVxuICAgIHZhciBmcnVpdENvbG9yID0gZ2V0RnJ1aXQoc3JjKS5zdWJzY3JpYmUoZnVuY3Rpb24gKGZydWl0KSB7XG4gICAgICAgIHJldHVybiBmcnVpdC5jb2xvcjtcbiAgICB9KTtcbiAgICB2YXIgdmVnZXRhYmxlQ29sb3IgPSBnZXRGcnVpdChzcmMpLnN1YnNjcmliZShmdW5jdGlvbiAodmVnZXRhYmxlKSB7XG4gICAgICAgIHJldHVybiB2ZWdldGFibGUuY29sb3I7XG4gICAgfSk7XG4gICAgLy9kb3JhZGl0aVxuICAgIHJldHVybiB7IHg6IHgsIHk6IHkgfTtcbn1cbmZ1bmN0aW9uIGRyYXdTbmFrZShjYW52YXMsIGRpbWVuc2lvbiwgc2hhcGUsIGNvbG9yLCBsZW5ndGgsIGhlYWQpIHtcbiAgICB2YXIgd2lkdGggPSBjYW52YXMud2lkdGggLyBkaW1lbnNpb247XG4gICAgdmFyIGhlaWdodCA9IGNhbnZhcy5oZWlnaHQgLyBkaW1lbnNpb247XG4gICAgdmFyIGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgIGlmICghY3R4KVxuICAgICAgICByZXR1cm47XG4gICAgY3R4LmZpbGxTdHlsZSA9IGNvbG9yO1xuICAgIGN0eC5zdHJva2VTdHlsZSA9ICdibGFjayc7XG4gICAgY3R4LmxpbmVXaWR0aCA9IDI7XG4gICAgdmFyIGN2UmVjdCA9IGNhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBjdHguY2xlYXJSZWN0KGN2UmVjdC5sZWZ0LCBjdlJlY3QudG9wLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xuICAgIGlmIChzaGFwZSA9PT0gJ3JvdW5kJykge1xuICAgICAgICBjdHguYXJjKGhlYWQueCwgaGVhZC55LCB3aWR0aCAvIDIsIDAsIDIgKiBNYXRoLlBJKTtcbiAgICB9XG4gICAgLy9kb3JhZGl0aSBsb2dpa3UgemEgcG9tZXJhbmplIHptaWplLCBwcmF2YWMga2FvIHBhcmFtZXRhcj8gXG59XG4iLCJpbXBvcnQgeyBjcmVhdGVHYW1lTGF5b3V0IH0gZnJvbSBcIi4vdmlldy9pbml0aWFsVmlld1wiO1xuY3JlYXRlR2FtZUxheW91dChkb2N1bWVudC5ib2R5KTtcbiJdLCJuYW1lcyI6WyJpc0Z1bmN0aW9uIiwidmFsdWUiLCJvcGVyYXRlIiwiaW5pdCIsInNvdXJjZSIsImxpZnQiLCJoYXNMaWZ0IiwibGlmdGVkU291cmNlIiwidGhpcyIsImVyciIsImVycm9yIiwiVHlwZUVycm9yIiwiZXh0ZW5kU3RhdGljcyIsImQiLCJiIiwiT2JqZWN0Iiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJBcnJheSIsInAiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJfX2V4dGVuZHMiLCJTdHJpbmciLCJfXyIsImNvbnN0cnVjdG9yIiwiY3JlYXRlIiwiX19hc3NpZ24iLCJhc3NpZ24iLCJ0IiwicyIsImkiLCJuIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiYXBwbHkiLCJfX2dlbmVyYXRvciIsInRoaXNBcmciLCJib2R5IiwiZiIsInkiLCJnIiwiXyIsImxhYmVsIiwic2VudCIsInRyeXMiLCJvcHMiLCJuZXh0IiwidmVyYiIsIlN5bWJvbCIsIml0ZXJhdG9yIiwidiIsIm9wIiwiZG9uZSIsInBvcCIsInB1c2giLCJlIiwic3RlcCIsIl9fdmFsdWVzIiwibyIsIm0iLCJfX3JlYWQiLCJyIiwiYXIiLCJfX3NwcmVhZEFycmF5IiwidG8iLCJmcm9tIiwicGFjayIsImwiLCJzbGljZSIsImNvbmNhdCIsIl9fYXdhaXQiLCJjcmVhdGVFcnJvckNsYXNzIiwiY3JlYXRlSW1wbCIsImN0b3JGdW5jIiwiaW5zdGFuY2UiLCJFcnJvciIsInN0YWNrIiwiU3VwcHJlc3NlZEVycm9yIiwiVW5zdWJzY3JpcHRpb25FcnJvciIsIl9zdXBlciIsImVycm9ycyIsIm1lc3NhZ2UiLCJtYXAiLCJ0b1N0cmluZyIsImpvaW4iLCJuYW1lIiwiYXJyUmVtb3ZlIiwiYXJyIiwiaXRlbSIsImluZGV4IiwiaW5kZXhPZiIsInNwbGljZSIsIlN1YnNjcmlwdGlvbiIsImluaXRpYWxUZWFyZG93biIsImNsb3NlZCIsIl9wYXJlbnRhZ2UiLCJfZmluYWxpemVycyIsImVtcHR5IiwidW5zdWJzY3JpYmUiLCJlXzEiLCJfYSIsImVfMiIsIl9iIiwiaXNBcnJheSIsIl9wYXJlbnRhZ2VfMSIsIl9wYXJlbnRhZ2VfMV8xIiwicmVtb3ZlIiwiZV8xXzEiLCJyZXR1cm4iLCJpbml0aWFsRmluYWxpemVyIiwiX2ZpbmFsaXplcnNfMSIsIl9maW5hbGl6ZXJzXzFfMSIsImZpbmFsaXplciIsImV4ZWNGaW5hbGl6ZXIiLCJlXzJfMSIsImFkZCIsInRlYXJkb3duIiwiX2hhc1BhcmVudCIsIl9hZGRQYXJlbnQiLCJwYXJlbnQiLCJpbmNsdWRlcyIsIl9yZW1vdmVQYXJlbnQiLCJFTVBUWSIsImlzU3Vic2NyaXB0aW9uIiwiY29uZmlnIiwib25VbmhhbmRsZWRFcnJvciIsIm9uU3RvcHBlZE5vdGlmaWNhdGlvbiIsIlByb21pc2UiLCJ1bmRlZmluZWQiLCJ1c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nIiwidXNlRGVwcmVjYXRlZE5leHRDb250ZXh0IiwidGltZW91dFByb3ZpZGVyIiwic2V0VGltZW91dCIsImhhbmRsZXIiLCJ0aW1lb3V0IiwiYXJncyIsIl9pIiwiZGVsZWdhdGUiLCJjbGVhclRpbWVvdXQiLCJoYW5kbGUiLCJyZXBvcnRVbmhhbmRsZWRFcnJvciIsIm5vb3AiLCJDT01QTEVURV9OT1RJRklDQVRJT04iLCJjcmVhdGVOb3RpZmljYXRpb24iLCJraW5kIiwiY29udGV4dCIsIlN1YnNjcmliZXIiLCJkZXN0aW5hdGlvbiIsIl90aGlzIiwiaXNTdG9wcGVkIiwiRU1QVFlfT0JTRVJWRVIiLCJjb21wbGV0ZSIsIlNhZmVTdWJzY3JpYmVyIiwiaGFuZGxlU3RvcHBlZE5vdGlmaWNhdGlvbiIsIm5leHROb3RpZmljYXRpb24iLCJfbmV4dCIsIl9lcnJvciIsIl9jb21wbGV0ZSIsIl9iaW5kIiwiRnVuY3Rpb24iLCJiaW5kIiwiZm4iLCJDb25zdW1lck9ic2VydmVyIiwicGFydGlhbE9ic2VydmVyIiwiaGFuZGxlVW5oYW5kbGVkRXJyb3IiLCJvYnNlcnZlck9yTmV4dCIsImNvbnRleHRfMSIsImVycm9yVGhyb3duIiwibm90aWZpY2F0aW9uIiwic3Vic2NyaWJlciIsImNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlciIsIm9uTmV4dCIsIm9uQ29tcGxldGUiLCJvbkVycm9yIiwib25GaW5hbGl6ZSIsIk9wZXJhdG9yU3Vic2NyaWJlciIsInNob3VsZFVuc3Vic2NyaWJlIiwiY2xvc2VkXzEiLCJwcm9qZWN0Iiwic3Vic2NyaWJlIiwiaXNBcnJheUxpa2UiLCJ4IiwiaXNQcm9taXNlIiwidGhlbiIsIm9ic2VydmFibGUiLCJpZGVudGl0eSIsIk9ic2VydmFibGUiLCJfc3Vic2NyaWJlIiwib3BlcmF0b3IiLCJpc09ic2VydmVyIiwiY2IiLCJpc1Jvb3QiLCJlcnJvckNvbnRleHQiLCJfdHJ5U3Vic2NyaWJlIiwic2luayIsImZvckVhY2giLCJwcm9taXNlQ3RvciIsImdldFByb21pc2VDdG9yIiwicmVzb2x2ZSIsInJlamVjdCIsInBpcGUiLCJvcGVyYXRpb25zIiwiZm5zIiwiaW5wdXQiLCJyZWR1Y2UiLCJwcmV2IiwidG9Qcm9taXNlIiwiaXNJbnRlcm9wT2JzZXJ2YWJsZSIsImlzQXN5bmNJdGVyYWJsZSIsIm9iaiIsImFzeW5jSXRlcmF0b3IiLCJjcmVhdGVJbnZhbGlkT2JzZXJ2YWJsZVR5cGVFcnJvciIsImlzSXRlcmFibGUiLCJyZWFkYWJsZVN0cmVhbUxpa2VUb0FzeW5jR2VuZXJhdG9yIiwicmVhZGFibGVTdHJlYW0iLCJfYXJndW1lbnRzIiwiZ2VuZXJhdG9yIiwicSIsImEiLCJyZXN1bWUiLCJmdWxmaWxsIiwic2V0dGxlIiwic2hpZnQiLCJfX2FzeW5jR2VuZXJhdG9yIiwicmVhZGVyIiwiZ2V0UmVhZGVyIiwicmVhZCIsInJlbGVhc2VMb2NrIiwiaXNSZWFkYWJsZVN0cmVhbUxpa2UiLCJpbm5lckZyb20iLCJvYnMiLCJhcnJheSIsInByb21pc2UiLCJmcm9tQXN5bmNJdGVyYWJsZSIsIml0ZXJhYmxlIiwiaXRlcmFibGVfMSIsIml0ZXJhYmxlXzFfMSIsImFzeW5jSXRlcmFibGUiLCJhc3luY0l0ZXJhYmxlXzEiLCJhc3luY0l0ZXJhYmxlXzFfMSIsIlAiLCJfX2FzeW5jVmFsdWVzIiwiZnVsZmlsbGVkIiwicmVqZWN0ZWQiLCJyZXN1bHQiLCJwcm9jZXNzIiwiY2F0Y2giLCJnZXRYSFJSZXNwb25zZSIsInhociIsInJlc3BvbnNlVHlwZSIsInJlc3BvbnNlIiwiaWVYSFIiLCJKU09OIiwicGFyc2UiLCJyZXNwb25zZVRleHQiLCJyZXNwb25zZVhNTCIsIkFqYXhSZXNwb25zZSIsIm9yaWdpbmFsRXZlbnQiLCJyZXF1ZXN0IiwidHlwZSIsInN0YXR1cyIsImFsbEhlYWRlcnMiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJyZXNwb25zZUhlYWRlcnMiLCJzcGxpdCIsImhlYWRlcnMiLCJsaW5lIiwibG9hZGVkIiwidG90YWwiLCJBamF4RXJyb3IiLCJBamF4VGltZW91dEVycm9yIiwiQWpheFRpbWVvdXRFcnJvckltcGwiLCJtYXBSZXNwb25zZSIsImFqYXgiLCJ1cmxPckNvbmZpZyIsInVybCIsInNlYXJjaFBhcmFtc18xIiwiYXN5bmMiLCJjcm9zc0RvbWFpbiIsIndpdGhDcmVkZW50aWFscyIsIm1ldGhvZCIsInF1ZXJ5UGFyYW1zIiwiY29uZmlndXJlZEJvZHkiLCJjb25maWd1cmVkSGVhZGVycyIsInBhcnRzIiwiVVJMU2VhcmNoUGFyYW1zIiwia2V5Iiwic2V0IiwidG9Mb3dlckNhc2UiLCJ4c3JmQ29va2llTmFtZSIsInhzcmZIZWFkZXJOYW1lIiwieHNyZkNvb2tpZSIsImRvY3VtZW50IiwiY29va2llIiwibWF0Y2giLCJSZWdFeHAiLCJGb3JtRGF0YSIsImlzRm9ybURhdGEiLCJpc1VSTFNlYXJjaFBhcmFtcyIsInRvU3RyaW5nQ2hlY2siLCJpc0FycmF5QnVmZmVyIiwiaXNGaWxlIiwiaXNCbG9iIiwiUmVhZGFibGVTdHJlYW0iLCJpc1JlYWRhYmxlU3RyZWFtIiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJpc0FycmF5QnVmZmVyVmlldyIsImJ1ZmZlciIsInN0cmluZ2lmeSIsImV4dHJhY3RDb250ZW50VHlwZUFuZE1heWJlU2VyaWFsaXplQm9keSIsIl9yZXF1ZXN0IiwiY3JlYXRlWEhSIiwiWE1MSHR0cFJlcXVlc3QiLCJwcm9ncmVzc1N1YnNjcmliZXJfMSIsInByb2dyZXNzU3Vic2NyaWJlciIsIl9jIiwiaW5jbHVkZURvd25sb2FkUHJvZ3Jlc3MiLCJfZCIsImluY2x1ZGVVcGxvYWRQcm9ncmVzcyIsImFkZEVycm9yRXZlbnQiLCJlcnJvckZhY3RvcnkiLCJhZGRFdmVudExpc3RlbmVyIiwiY3JlYXRlUmVzcG9uc2VfMSIsImRpcmVjdGlvbiIsImV2ZW50IiwiYWRkUHJvZ3Jlc3NFdmVudF8xIiwidGFyZ2V0IiwiTE9BRFNUQVJUIiwiUFJPR1JFU1MiLCJMT0FEIiwidXBsb2FkIiwiVVBMT0FEIiwiRE9XTkxPQUQiLCJlbWl0RXJyb3JfMSIsIm1zZyIsInVzZXIiLCJvcGVuIiwicGFzc3dvcmQiLCJzZXRSZXF1ZXN0SGVhZGVyIiwic2VuZCIsInJlYWR5U3RhdGUiLCJhYm9ydCIsImdldCIsInBvc3QiLCJkZWxldGUiLCJwdXQiLCJwYXRjaCIsImdldEpTT04iLCJfdG9TdHJpbmciLCJBUElfVVJMIiwiZGF0YUFQSSIsImNhdGNoRXJyb3IiLCJzZWxlY3RvciIsImhhbmRsZWRSZXN1bHQiLCJpbm5lclN1YiIsInN5bmNVbnN1YiIsImNvbnNvbGUiLCJnZXRGcnVpdCIsImZldGNoIiwib2siLCJqc29uIiwibG9nIiwic3RhdHVzVGV4dCIsInVwcGVyQ29udGFpbmVyIiwidGl0bGUxIiwic3NzIiwidGl0bGUyIiwibG93ZXJDb250YWluZXIiLCJsZWZ0Q29udGFpbmVyIiwiZ2FtZUNvbnRhaW5lciIsImNhbnZhcyIsInJpZ2h0Q29udGFpbmVyIiwic2V0dGluZ3NTZWN0aW9uIiwiZGltRGl2Iiwic2hhcGVEaXYiLCJmb29kRGl2IiwiZnJ1aXREaXYiLCJ2ZWdldGFibGVEaXYiLCJkaW1lbnNpb24iLCJzbGlkZXIiLCJzbGlkZXJWYWx1ZSIsInN0YXJ0QnV0dG9uIiwic2hvd1Jlc3VsdHNCdXR0b24iLCJyZXN1bHRzU2VjdGlvbiIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc0xpc3QiLCJhcHBlbmRDaGlsZCIsInRleHRDb250ZW50Iiwic3JjIiwiYWx0IiwiaWQiLCJjZWxsVyIsIndpZHRoIiwiY2VsbEgiLCJoZWlnaHQiLCJjdlJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJjdHgiLCJnZXRDb250ZXh0IiwiY2xlYXJSZWN0IiwibGVmdCIsInRvcCIsInN0cm9rZVN0eWxlIiwibGluZVdpZHRoIiwiYmVnaW5QYXRoIiwibW92ZVRvIiwibGluZVRvIiwic3Ryb2tlIiwiZHJhd0dyaWQiLCJnZXRFbGVtZW50QnlJZCIsImZvb2QiLCJJbWFnZSIsIm9ubG9hZCIsInJhbmQxIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwicmFuZDIiLCJkcmF3SW1hZ2UiLCJmcnVpdCIsImNvbG9yIiwidmVnZXRhYmxlIiwiZHJhd0Zvb2QiLCJtaW4iLCJtYXgiLCJzaGFwZXMiLCJjb250YWluZXJJRCIsInNoYXBlIiwic2hhcGVDaGVja2JveGVzIiwic2hhcGVMYWJlbHMiLCJyb3VuZCIsInNxdWFyZSIsInNoYXBlQ2hlY2tib3hDb250YWluZXIiLCJzaGFwZUNoZWNrYm94Iiwic2hhcGVMYWJlbCIsImlubmVySFRNTCIsImNyZWF0ZVNoYXBlcyIsImZvb2RUeXBlIiwiZm9vZENoZWNrYm94ZXMiLCJmb29kQ2hlY2tib3hDb250YWluZXIiLCJmb29kQ2hlY2tib3giLCJmb29kTGFiZWwiLCJmcnVpdENoZWNrYm94Q29udGFpbmVyIiwiZnJ1aXRDaGVja2JveCIsImZydWl0TGFiZWwiLCJzdHlsZSIsImRpc3BsYXkiLCJ2ZWdldGFibGVDaGVja2JveENvbnRhaW5lciIsInZlZ2V0YWJsZUNoZWNrYm94IiwidmVnZXRhYmxlTGFiZWwiLCJmcnVpdFJhZGlvIiwicXVlcnlTZWxlY3RvciIsImNoZWNrZWQiLCJ2ZWdldGFibGVSYWRpbyIsImNyZWF0ZUZvb2QiLCJjcmVhdGVHYW1lTGF5b3V0Il0sInNvdXJjZVJvb3QiOiIifQ==