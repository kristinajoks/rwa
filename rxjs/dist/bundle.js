(()=>{"use strict";var e=function(t,n){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},e(t,n)};function t(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}function n(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(c){return function(u){return function(c){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,c[0]&&(a=0)),a;)try{if(n=1,r&&(o=2&c[0]?r.return:c[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,c[1])).done)return o;switch(r=0,o&&(c=[2&c[0],o.value]),c[0]){case 0:case 1:o=c;break;case 4:return a.label++,{value:c[1],done:!1};case 5:a.label++,r=c[1],c=[0];continue;case 7:c=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==c[0]&&2!==c[0])){a=0;continue}if(3===c[0]&&(!o||c[1]>o[0]&&c[1]<o[3])){a.label=c[1];break}if(6===c[0]&&a.label<o[1]){a.label=o[1],o=c;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(c);break}o[2]&&a.ops.pop(),a.trys.pop();continue}c=t.call(e,a)}catch(e){c=[6,e],r=0}finally{n=o=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,u])}}}function r(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function o(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a}function i(e,t,n){if(n||2===arguments.length)for(var r,o=0,i=t.length;o<i;o++)!r&&o in t||(r||(r=Array.prototype.slice.call(t,0,o)),r[o]=t[o]);return e.concat(r||Array.prototype.slice.call(t))}function a(e){return this instanceof a?(this.v=e,this):new a(e)}Object.create,Object.create,"function"==typeof SuppressedError&&SuppressedError;var c=function(e){return e&&"number"==typeof e.length&&"function"!=typeof e};function u(e){return"function"==typeof e}function s(e){return u(null==e?void 0:e.then)}var l,d=((l=function(e){var t;t=this,Error.call(t),t.stack=(new Error).stack,this.message=e?e.length+" errors occurred during unsubscription:\n"+e.map((function(e,t){return t+1+") "+e.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=e}).prototype=Object.create(Error.prototype),l.prototype.constructor=l,l);function f(e,t){if(e){var n=e.indexOf(t);0<=n&&e.splice(n,1)}}var p=function(){function e(e){this.initialTeardown=e,this.closed=!1,this._parentage=null,this._finalizers=null}var t;return e.prototype.unsubscribe=function(){var e,t,n,a,c;if(!this.closed){this.closed=!0;var s=this._parentage;if(s)if(this._parentage=null,Array.isArray(s))try{for(var l=r(s),f=l.next();!f.done;f=l.next())f.value.remove(this)}catch(t){e={error:t}}finally{try{f&&!f.done&&(t=l.return)&&t.call(l)}finally{if(e)throw e.error}}else s.remove(this);var p=this.initialTeardown;if(u(p))try{p()}catch(e){c=e instanceof d?e.errors:[e]}var h=this._finalizers;if(h){this._finalizers=null;try{for(var y=r(h),m=y.next();!m.done;m=y.next()){var b=m.value;try{v(b)}catch(e){c=null!=c?c:[],e instanceof d?c=i(i([],o(c)),o(e.errors)):c.push(e)}}}catch(e){n={error:e}}finally{try{m&&!m.done&&(a=y.return)&&a.call(y)}finally{if(n)throw n.error}}}if(c)throw new d(c)}},e.prototype.add=function(t){var n;if(t&&t!==this)if(this.closed)v(t);else{if(t instanceof e){if(t.closed||t._hasParent(this))return;t._addParent(this)}(this._finalizers=null!==(n=this._finalizers)&&void 0!==n?n:[]).push(t)}},e.prototype._hasParent=function(e){var t=this._parentage;return t===e||Array.isArray(t)&&t.includes(e)},e.prototype._addParent=function(e){var t=this._parentage;this._parentage=Array.isArray(t)?(t.push(e),t):t?[t,e]:e},e.prototype._removeParent=function(e){var t=this._parentage;t===e?this._parentage=null:Array.isArray(t)&&f(t,e)},e.prototype.remove=function(t){var n=this._finalizers;n&&f(n,t),t instanceof e&&t._removeParent(this)},e.EMPTY=((t=new e).closed=!0,t),e}();function h(e){return e instanceof p||e&&"closed"in e&&u(e.remove)&&u(e.add)&&u(e.unsubscribe)}function v(e){u(e)?e():e.unsubscribe()}p.EMPTY;var y={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1},m={setTimeout:function(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var a=m.delegate;return(null==a?void 0:a.setTimeout)?a.setTimeout.apply(a,i([e,t],o(n))):setTimeout.apply(void 0,i([e,t],o(n)))},clearTimeout:function(e){var t=m.delegate;return((null==t?void 0:t.clearTimeout)||clearTimeout)(e)},delegate:void 0};function b(e){m.setTimeout((function(){var t=y.onUnhandledError;if(!t)throw e;t(e)}))}function g(){}var w=E("C",void 0,void 0);function E(e,t,n){return{kind:e,value:t,error:n}}var x=null,C=function(e){function n(t){var n=e.call(this)||this;return n.isStopped=!1,t?(n.destination=t,h(t)&&t.add(n)):n.destination=I,n}return t(n,e),n.create=function(e,t,n){return new T(e,t,n)},n.prototype.next=function(e){this.isStopped?D(function(e){return E("N",e,void 0)}(e),this):this._next(e)},n.prototype.error=function(e){this.isStopped?D(E("E",void 0,e),this):(this.isStopped=!0,this._error(e))},n.prototype.complete=function(){this.isStopped?D(w,this):(this.isStopped=!0,this._complete())},n.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,e.prototype.unsubscribe.call(this),this.destination=null)},n.prototype._next=function(e){this.destination.next(e)},n.prototype._error=function(e){try{this.destination.error(e)}finally{this.unsubscribe()}},n.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},n}(p),L=Function.prototype.bind;function S(e,t){return L.call(e,t)}var _=function(){function e(e){this.partialObserver=e}return e.prototype.next=function(e){var t=this.partialObserver;if(t.next)try{t.next(e)}catch(e){k(e)}},e.prototype.error=function(e){var t=this.partialObserver;if(t.error)try{t.error(e)}catch(e){k(e)}else k(e)},e.prototype.complete=function(){var e=this.partialObserver;if(e.complete)try{e.complete()}catch(e){k(e)}},e}(),T=function(e){function n(t,n,r){var o,i,a=e.call(this)||this;return u(t)||!t?o={next:null!=t?t:void 0,error:null!=n?n:void 0,complete:null!=r?r:void 0}:a&&y.useDeprecatedNextContext?((i=Object.create(t)).unsubscribe=function(){return a.unsubscribe()},o={next:t.next&&S(t.next,i),error:t.error&&S(t.error,i),complete:t.complete&&S(t.complete,i)}):o=t,a.destination=new _(o),a}return t(n,e),n}(C);function k(e){var t;y.useDeprecatedSynchronousErrorHandling?(t=e,y.useDeprecatedSynchronousErrorHandling&&x&&(x.errorThrown=!0,x.error=t)):b(e)}function D(e,t){var n=y.onStoppedNotification;n&&m.setTimeout((function(){return n(e,t)}))}var I={closed:!0,next:g,error:function(e){throw e},complete:g},P="function"==typeof Symbol&&Symbol.observable||"@@observable";function A(e){return e}var O=function(){function e(e){e&&(this._subscribe=e)}return e.prototype.lift=function(t){var n=new e;return n.source=this,n.operator=t,n},e.prototype.subscribe=function(e,t,n){var r,o=this,i=(r=e)&&r instanceof C||function(e){return e&&u(e.next)&&u(e.error)&&u(e.complete)}(r)&&h(r)?e:new T(e,t,n);return function(e){if(y.useDeprecatedSynchronousErrorHandling){var t=!x;if(t&&(x={errorThrown:!1,error:null}),e(),t){var n=x,r=n.errorThrown,o=n.error;if(x=null,r)throw o}}else e()}((function(){var e=o,t=e.operator,n=e.source;i.add(t?t.call(i,n):n?o._subscribe(i):o._trySubscribe(i))})),i},e.prototype._trySubscribe=function(e){try{return this._subscribe(e)}catch(t){e.error(t)}},e.prototype.forEach=function(e,t){var n=this;return new(t=j(t))((function(t,r){var o=new T({next:function(t){try{e(t)}catch(e){r(e),o.unsubscribe()}},error:r,complete:t});n.subscribe(o)}))},e.prototype._subscribe=function(e){var t;return null===(t=this.source)||void 0===t?void 0:t.subscribe(e)},e.prototype[P]=function(){return this},e.prototype.pipe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return(0===(n=e).length?A:1===n.length?n[0]:function(e){return n.reduce((function(e,t){return t(e)}),e)})(this);var n},e.prototype.toPromise=function(e){var t=this;return new(e=j(e))((function(e,n){var r;t.subscribe((function(e){return r=e}),(function(e){return n(e)}),(function(){return e(r)}))}))},e.create=function(t){return new e(t)},e}();function j(e){var t;return null!==(t=null!=e?e:y.Promise)&&void 0!==t?t:Promise}function R(e){return u(e[P])}function z(e){return Symbol.asyncIterator&&u(null==e?void 0:e[Symbol.asyncIterator])}function M(e){return new TypeError("You provided "+(null!==e&&"object"==typeof e?"an invalid object":"'"+e+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}var B="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function H(e){return u(null==e?void 0:e[B])}function U(e){return function(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=n.apply(e,t||[]),i=[];return r={},c("next"),c("throw"),c("return"),r[Symbol.asyncIterator]=function(){return this},r;function c(e){o[e]&&(r[e]=function(t){return new Promise((function(n,r){i.push([e,t,n,r])>1||u(e,t)}))})}function u(e,t){try{(n=o[e](t)).value instanceof a?Promise.resolve(n.value.v).then(s,l):d(i[0][2],n)}catch(e){d(i[0][3],e)}var n}function s(e){u("next",e)}function l(e){u("throw",e)}function d(e,t){e(t),i.shift(),i.length&&u(i[0][0],i[0][1])}}(this,arguments,(function(){var t,r,o;return n(this,(function(n){switch(n.label){case 0:t=e.getReader(),n.label=1;case 1:n.trys.push([1,,9,10]),n.label=2;case 2:return[4,a(t.read())];case 3:return r=n.sent(),o=r.value,r.done?[4,a(void 0)]:[3,5];case 4:return[2,n.sent()];case 5:return[4,a(o)];case 6:return[4,n.sent()];case 7:return n.sent(),[3,2];case 8:return[3,10];case 9:return t.releaseLock(),[7];case 10:return[2]}}))}))}function F(e){return u(null==e?void 0:e.getReader)}function N(e){if(e instanceof O)return e;if(null!=e){if(R(e))return i=e,new O((function(e){var t=i[P]();if(u(t.subscribe))return t.subscribe(e);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(c(e))return o=e,new O((function(e){for(var t=0;t<o.length&&!e.closed;t++)e.next(o[t]);e.complete()}));if(s(e))return n=e,new O((function(e){n.then((function(t){e.closed||(e.next(t),e.complete())}),(function(t){return e.error(t)})).then(null,b)}));if(z(e))return q(e);if(H(e))return t=e,new O((function(e){var n,o;try{for(var i=r(t),a=i.next();!a.done;a=i.next()){var c=a.value;if(e.next(c),e.closed)return}}catch(e){n={error:e}}finally{try{a&&!a.done&&(o=i.return)&&o.call(i)}finally{if(n)throw n.error}}e.complete()}));if(F(e))return q(U(e))}var t,n,o,i;throw M(e)}function q(e){return new O((function(t){(function(e,t){var o,i,a,c,u,s,l,d;return u=this,s=void 0,d=function(){var u,s;return n(this,(function(n){switch(n.label){case 0:n.trys.push([0,5,6,11]),o=function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,n=e[Symbol.asyncIterator];return n?n.call(e):(e=r(e),t={},o("next"),o("throw"),o("return"),t[Symbol.asyncIterator]=function(){return this},t);function o(n){t[n]=e[n]&&function(t){return new Promise((function(r,o){!function(e,t,n,r){Promise.resolve(r).then((function(t){e({value:t,done:n})}),t)}(r,o,(t=e[n](t)).done,t.value)}))}}}(e),n.label=1;case 1:return[4,o.next()];case 2:if((i=n.sent()).done)return[3,4];if(u=i.value,t.next(u),t.closed)return[2];n.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return s=n.sent(),a={error:s},[3,11];case 6:return n.trys.push([6,,9,10]),i&&!i.done&&(c=o.return)?[4,c.call(o)]:[3,8];case 7:n.sent(),n.label=8;case 8:return[3,10];case 9:if(a)throw a.error;return[7];case 10:return[7];case 11:return t.complete(),[2]}}))},new((l=void 0)||(l=Promise))((function(e,t){function n(e){try{o(d.next(e))}catch(e){t(e)}}function r(e){try{o(d.throw(e))}catch(e){t(e)}}function o(t){var o;t.done?e(t.value):(o=t.value,o instanceof l?o:new l((function(e){e(o)}))).then(n,r)}o((d=d.apply(u,s||[])).next())}))})(e,t).catch((function(e){return t.error(e)}))}))}function Y(e){return function(t){if(function(e){return u(null==e?void 0:e.lift)}(t))return t.lift((function(t){try{return e(t,this)}catch(e){this.error(e)}}));throw new TypeError("Unable to lift unknown Observable type")}}function G(e,t,n,r,o){return new V(e,t,n,r,o)}var V=function(e){function n(t,n,r,o,i,a){var c=e.call(this,t)||this;return c.onFinalize=i,c.shouldUnsubscribe=a,c._next=n?function(e){try{n(e)}catch(e){t.error(e)}}:e.prototype._next,c._error=o?function(e){try{o(e)}catch(e){t.error(e)}finally{this.unsubscribe()}}:e.prototype._error,c._complete=r?function(){try{r()}catch(e){t.error(e)}finally{this.unsubscribe()}}:e.prototype._complete,c}return t(n,e),n.prototype.unsubscribe=function(){var t;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var n=this.closed;e.prototype.unsubscribe.call(this),!n&&(null===(t=this.onFinalize)||void 0===t||t.call(this))}},n}(C);function W(e,t){return Y((function(n,r){var o=0;n.subscribe(G(r,(function(n){r.next(e.call(t,n,o++))})))}))}function J(e,t,n,r,o){void 0===r&&(r=0),void 0===o&&(o=!1);var i=t.schedule((function(){n(),o?e.add(this.schedule(null,r)):this.unsubscribe()}),r);if(e.add(i),!o)return i}function K(e,t,n){return void 0===n&&(n=1/0),u(t)?K((function(n,r){return W((function(e,o){return t(n,e,r,o)}))(N(e(n,r)))}),n):("number"==typeof t&&(n=t),Y((function(t,r){return function(e,t,n,r,o,i,a,c){var u=[],s=0,l=0,d=!1,f=function(){!d||u.length||s||t.complete()},p=function(e){return s<r?h(e):u.push(e)},h=function(e){s++;var o=!1;N(n(e,l++)).subscribe(G(t,(function(e){t.next(e)}),(function(){o=!0}),void 0,(function(){if(o)try{s--;for(;u.length&&s<r;)e=void 0,e=u.shift(),h(e);f()}catch(e){t.error(e)}var e})))};return e.subscribe(G(t,p,(function(){d=!0,f()}))),function(){}}(t,r,e,n)})))}var Q=Array.isArray;var X=["addListener","removeListener"],Z=["addEventListener","removeEventListener"],$=["on","off"];function ee(e,t,n,r){if(u(n)&&(r=n,n=void 0),r)return ee(e,t,n).pipe((a=r,W((function(e){return function(e,t){return Q(t)?e.apply(void 0,i([],o(t))):e(t)}(a,e)}))));var a,s=o(function(e){return u(e.addEventListener)&&u(e.removeEventListener)}(e)?Z.map((function(r){return function(o){return e[r](t,o,n)}})):function(e){return u(e.addListener)&&u(e.removeListener)}(e)?X.map(te(e,t)):function(e){return u(e.on)&&u(e.off)}(e)?$.map(te(e,t)):[],2),l=s[0],d=s[1];if(!l&&c(e))return K((function(e){return ee(e,t,n)}))(N(e));if(!l)throw new TypeError("Invalid event target");return new O((function(e){var t=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return e.next(1<t.length?t:t[0])};return l(t),function(){return d(t)}}))}function te(e,t){return function(n){return function(r){return e[n](t,r)}}}function ne(e){return(n=(t=e)[t.length-1])&&u(n.schedule)?e.pop():void 0;var t,n}function re(e,t){return void 0===t&&(t=0),Y((function(n,r){n.subscribe(G(r,(function(n){return J(r,e,(function(){return r.next(n)}),t)}),(function(){return J(r,e,(function(){return r.complete()}),t)}),(function(n){return J(r,e,(function(){return r.error(n)}),t)})))}))}function oe(e,t){return void 0===t&&(t=0),Y((function(n,r){r.add(e.schedule((function(){return n.subscribe(r)}),t))}))}function ie(e,t){if(!e)throw new Error("Iterable cannot be null");return new O((function(n){J(n,t,(function(){var r=e[Symbol.asyncIterator]();J(n,t,(function(){r.next().then((function(e){e.done?n.complete():n.next(e.value)}))}),0,!0)}))}))}function ae(){for(var e,t,n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];return(void 0===(o=1)&&(o=1/0),K(A,o))((e=n,(t=ne(n))?function(e,t){if(null!=e){if(R(e))return function(e,t){return N(e).pipe(oe(t),re(t))}(e,t);if(c(e))return function(e,t){return new O((function(n){var r=0;return t.schedule((function(){r===e.length?n.complete():(n.next(e[r++]),n.closed||this.schedule())}))}))}(e,t);if(s(e))return function(e,t){return N(e).pipe(oe(t),re(t))}(e,t);if(z(e))return ie(e,t);if(H(e))return function(e,t){return new O((function(n){var r;return J(n,t,(function(){r=e[B](),J(n,t,(function(){var e,t,o;try{t=(e=r.next()).value,o=e.done}catch(e){return void n.error(e)}o?n.complete():n.next(t)}),0,!0)})),function(){return u(null==r?void 0:r.return)&&r.return()}}))}(e,t);if(F(e))return function(e,t){return ie(U(e),t)}(e,t)}throw M(e)}(e,t):N(e)));var o}function ce(e,t){var n=e.width/t,r=e.height/t,o=e.getContext("2d");if(!o)throw new Error("Canvas not supported in this browser.");o.clearRect(0,0,e.width,e.height),o.strokeStyle="green",o.lineWidth=1.2,o.lineCap="square",o.lineJoin="miter";for(var i=0;i<=e.width;i+=n)o.beginPath(),o.moveTo(i,0),o.lineTo(i,e.height),o.stroke();for(var a=0;a<=e.height;a+=r)o.beginPath(),o.moveTo(0,a),o.lineTo(e.width,a),o.stroke();return e}!function(e){var t=document.createElement("div");t.classList.add("upper-container"),e.appendChild(t);var n=document.createElement("h1");n.textContent="rxj",t.appendChild(n);var r=document.createElement("img");r.src="src\\assets\\snake (1).png",r.alt="snake",r.classList.add("sss"),t.appendChild(r);var o=document.createElement("h1");o.textContent="nake",t.appendChild(o);var i=document.createElement("div");i.classList.add("lower-container"),e.appendChild(i);var a=document.createElement("div");a.classList.add("left-container"),i.appendChild(a);var c=document.createElement("div");c.classList.add("game-container"),i.appendChild(c);var u=document.createElement("canvas");u.id="game-canvas",c.appendChild(u),function(){var e=document.getElementById("game-canvas");ce(e,10),function(e,t,n,r,o,i){var a=e.getContext("2d"),c=e.getBoundingClientRect();a.clearRect(c.left,c.top,e.width,e.height),a.fillStyle="green",a.strokeStyle="black",a.lineWidth=2;for(var u=0,s=[{x:0,y:0},{x:1,y:0}];u<s.length;u++){var l=s[u],d=l.x*r,f=l.y*o;a.fillRect(d,f,r,o),a.strokeRect(d,f,r,o)}}(e,0,0,e.width/10*.8,e.height/10*.8)}();var s=document.createElement("div");s.classList.add("right-container"),i.appendChild(s);var l=document.createElement("div");l.classList.add("settings-section");var d=document.createElement("div");d.classList.add("dimDiv"),d.id="dimDiv",l.appendChild(d);var f=document.createElement("div");f.classList.add("shapeDiv"),f.id="shapeDiv",l.appendChild(f);var p=document.createElement("div");p.classList.add("foodDiv"),p.id="foodDiv",l.appendChild(p);var h=document.createElement("div");h.classList.add("fruitDiv"),h.id="fruitDiv",l.appendChild(h);var v=document.createElement("div");v.classList.add("vegetableDiv"),v.id="vegetableDiv",l.appendChild(v);var y=document.createElement("div");y.classList.add("speedDiv"),y.id="speedDiv",l.appendChild(y);var m=document.createElement("h3");m.classList.add("dimension"),m.textContent="Dimension",d.appendChild(m);var b=document.createElement("input");b.type="range",b.min="5",b.max="10",b.step="1",b.classList.add("slider"),b.id="slider",d.appendChild(b);var g=document.createElement("text");g.classList.add("sliderValue"),g.id="sliderValue",g.textContent="10",d.appendChild(g),b.value,ee(b,"input").pipe(W((function(e){return e.target.value})),function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=ne(e);return Y((function(t,r){(n?ae(e,t,n):ae(e,t)).subscribe(r)}))}(b.value)).subscribe((function(e){g.textContent=e;var t=ce(document.getElementById("game-canvas"),parseInt(e));!function(e,t,n,r,o){console.log("drawFruit");var i=e.getContext("2d");if(!i)throw new Error("Canvas not supported in this browser.");var a=e.getBoundingClientRect();i.clearRect(a.left,a.top,a.width,a.height);var c=new Image;c.src="src\\assets\\plum.png",c.onload=function(){var e=Math.floor(Math.random()*o)*t,r=Math.floor(Math.random()*o)*n;i.drawImage(c,e,r,t,n)},c.alt="apple",c.classList.add("fruit")}(t,t.width/e,t.height/e,0,e)})),fetch("db.json").then((function(e){return e.json()})).then((function(e){!function(e,t){var n=document.getElementById("shapeDiv"),r=document.createElement("h3");r.classList.add("shape"),r.textContent="Snake shape",n.appendChild(r);var o=document.createElement("div");o.classList.add("shapeCheckboxes"),n.appendChild(o);var i={round:"●",square:"■",zigzag:"▲"};e.forEach((function(e){var t=document.createElement("div");t.classList.add("shapeCheckboxContainer");var n=document.createElement("input");n.type="radio",n.name="shapes",n.value=e.type,n.id=e.id.toString();var r=document.createElement("label");r.classList.add("shapeLabel"),r.innerHTML="".concat(i[e.type]),t.appendChild(r),t.appendChild(n),o.appendChild(t)}))}(e.shapes),function(e,t,n,r){var o=document.getElementById("foodDiv"),i=document.createElement("h3");i.classList.add("foodType"),i.textContent="Food",o.appendChild(i);var a=document.createElement("div");a.classList.add("foodCheckboxes"),o.appendChild(a),e.forEach((function(e){var t=document.createElement("div");t.classList.add("foodCheckboxContainer");var n=document.createElement("input");n.type="radio",n.name="food",n.value=e.type,n.id=e.id.toString();var r=document.createElement("label");r.classList.add("foodLabel"),r.innerHTML="".concat(e.type),t.appendChild(r),t.appendChild(n),a.appendChild(t)}));var c=document.getElementById("fruitDiv");t.forEach((function(e){var t=document.createElement("div");t.classList.add("fruitCheckboxContainer");var n=document.createElement("input");n.type="checkbox",n.name="fruit",n.value=e.type;var r=document.createElement("img");r.classList.add("fruitLabel"),r.src="src\\assets\\".concat(e.type,".png"),t.appendChild(r),t.appendChild(n),c.appendChild(t)})),c.style.display="none";var u=document.getElementById("vegetableDiv");n.forEach((function(e){var t=document.createElement("div");t.classList.add("vegetableCheckboxContainer");var n=document.createElement("input");n.type="checkbox",n.name="vegetable",n.value=e.type;var r=document.createElement("img");r.classList.add("vegetableLabel"),r.src="src\\assets\\".concat(e.type,".png"),t.appendChild(r),t.appendChild(n),u.appendChild(t)})),u.style.display="none";var s=document.querySelector('input[name="food"][value="fruit"]');s.addEventListener("change",(function(){s.checked?(c.style.display="flex",u.style.display="none"):c.style.display="none"}));var l=document.querySelector('input[name="food"][value="vegetable"]');l.addEventListener("change",(function(){l.checked?(u.style.display="flex",c.style.display="none"):u.style.display="none"}))}(e.food,e.fruit,e.vegetable),function(e,t){var n=document.getElementById("speedDiv"),r=document.createElement("h3");r.classList.add("speed"),r.textContent="Speed",n.appendChild(r);var o=document.createElement("div");o.classList.add("speedCheckboxes"),n.appendChild(o),e.forEach((function(e){var t=document.createElement("div");t.classList.add("speedCheckboxContainer");var n=document.createElement("input");n.type="radio",n.name="speed",n.value=e.type,n.id="shapeChbx";var r=document.createElement("label");r.classList.add("speedLabel"),r.innerHTML="".concat(e.type),t.appendChild(r),t.appendChild(n),o.appendChild(t)}))}(e.speed)})).catch((function(e){console.error("Error fetching data:",e)})),a.appendChild(l);var w=document.createElement("button");w.textContent="START GAME",w.id="start-button",a.appendChild(w);var E=document.createElement("button");E.textContent="Show Results",E.id="show-results-button",s.appendChild(E);var x=document.createElement("div");x.classList.add("results-section"),x.style.display="none",s.appendChild(x),E.addEventListener("click",(function(){x.style.display="none"===x.style.display?"block":"none"}))}(document.body)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFlbkIsTUFBTUMsUUFBMkMsU0FBakNrQixFQUFlbkIsTUFBTUMsUUFBcUIsUUFBVSxNQUN2RixHQUlKLENFaktBbUIsQ0FBaUI1RyxTQUFTNVMsSyIsInNvdXJjZXMiOlsid2VicGFjazovL3J4anMvLi9ub2RlX21vZHVsZXMvdHNsaWIvdHNsaWIuZXM2Lm1qcyIsIndlYnBhY2s6Ly9yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNBcnJheUxpa2UuanMiLCJ3ZWJwYWNrOi8vcnhqcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzRnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vcnhqcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzUHJvbWlzZS5qcyIsIndlYnBhY2s6Ly9yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvVW5zdWJzY3JpcHRpb25FcnJvci5qcyIsIndlYnBhY2s6Ly9yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvY3JlYXRlRXJyb3JDbGFzcy5qcyIsIndlYnBhY2s6Ly9yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvYXJyUmVtb3ZlLmpzIiwid2VicGFjazovL3J4anMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvU3Vic2NyaXB0aW9uLmpzIiwid2VicGFjazovL3J4anMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvY29uZmlnLmpzIiwid2VicGFjazovL3J4anMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVyL3RpbWVvdXRQcm92aWRlci5qcyIsIndlYnBhY2s6Ly9yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvcmVwb3J0VW5oYW5kbGVkRXJyb3IuanMiLCJ3ZWJwYWNrOi8vcnhqcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL25vb3AuanMiLCJ3ZWJwYWNrOi8vcnhqcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9Ob3RpZmljYXRpb25GYWN0b3JpZXMuanMiLCJ3ZWJwYWNrOi8vcnhqcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2Vycm9yQ29udGV4dC5qcyIsIndlYnBhY2s6Ly9yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL1N1YnNjcmliZXIuanMiLCJ3ZWJwYWNrOi8vcnhqcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zeW1ib2wvb2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly9yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaWRlbnRpdHkuanMiLCJ3ZWJwYWNrOi8vcnhqcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9PYnNlcnZhYmxlLmpzIiwid2VicGFjazovL3J4anMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9waXBlLmpzIiwid2VicGFjazovL3J4anMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9pc0ludGVyb3BPYnNlcnZhYmxlLmpzIiwid2VicGFjazovL3J4anMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9pc0FzeW5jSXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vcnhqcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL3Rocm93VW5vYnNlcnZhYmxlRXJyb3IuanMiLCJ3ZWJwYWNrOi8vcnhqcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zeW1ib2wvaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vcnhqcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzSXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vcnhqcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzUmVhZGFibGVTdHJlYW1MaWtlLmpzIiwid2VicGFjazovL3J4anMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb2JzZXJ2YWJsZS9pbm5lckZyb20uanMiLCJ3ZWJwYWNrOi8vcnhqcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2xpZnQuanMiLCJ3ZWJwYWNrOi8vcnhqcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvT3BlcmF0b3JTdWJzY3JpYmVyLmpzIiwid2VicGFjazovL3J4anMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL21hcC5qcyIsIndlYnBhY2s6Ly9yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvZXhlY3V0ZVNjaGVkdWxlLmpzIiwid2VicGFjazovL3J4anMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL21lcmdlTWFwLmpzIiwid2VicGFjazovL3J4anMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL21lcmdlSW50ZXJuYWxzLmpzIiwid2VicGFjazovL3J4anMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9tYXBPbmVPck1hbnlBcmdzLmpzIiwid2VicGFjazovL3J4anMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb2JzZXJ2YWJsZS9mcm9tRXZlbnQuanMiLCJ3ZWJwYWNrOi8vcnhqcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2FyZ3MuanMiLCJ3ZWJwYWNrOi8vcnhqcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzU2NoZWR1bGVyLmpzIiwid2VicGFjazovL3J4anMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL29ic2VydmVPbi5qcyIsIndlYnBhY2s6Ly9yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9zdWJzY3JpYmVPbi5qcyIsIndlYnBhY2s6Ly9yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlZC9zY2hlZHVsZUFzeW5jSXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vcnhqcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL2NvbmNhdC5qcyIsIndlYnBhY2s6Ly9yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29ic2VydmFibGUvZnJvbS5qcyIsIndlYnBhY2s6Ly9yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9tZXJnZUFsbC5qcyIsIndlYnBhY2s6Ly9yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9jb25jYXRBbGwuanMiLCJ3ZWJwYWNrOi8vcnhqcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZWQvc2NoZWR1bGVkLmpzIiwid2VicGFjazovL3J4anMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVkL3NjaGVkdWxlT2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly9yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlZC9zY2hlZHVsZUFycmF5LmpzIiwid2VicGFjazovL3J4anMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVkL3NjaGVkdWxlUHJvbWlzZS5qcyIsIndlYnBhY2s6Ly9yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlZC9zY2hlZHVsZUl0ZXJhYmxlLmpzIiwid2VicGFjazovL3J4anMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVkL3NjaGVkdWxlUmVhZGFibGVTdHJlYW1MaWtlLmpzIiwid2VicGFjazovL3J4anMvLi9zcmMvdmlldy9pbml0aWFsVmlldy50cyIsIndlYnBhY2s6Ly9yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9zdGFydFdpdGguanMiLCJ3ZWJwYWNrOi8vcnhqcy8uL3NyYy9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cblxuUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XG5wdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEhcblJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWVxuQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgU1BFQ0lBTCwgRElSRUNULFxuSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NXG5MT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUlxuT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUlxuUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG4vKiBnbG9iYWwgUmVmbGVjdCwgUHJvbWlzZSwgU3VwcHJlc3NlZEVycm9yLCBTeW1ib2wgKi9cblxudmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbihkLCBiKSB7XG4gIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XG4gIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9fZXh0ZW5kcyhkLCBiKSB7XG4gIGlmICh0eXBlb2YgYiAhPT0gXCJmdW5jdGlvblwiICYmIGIgIT09IG51bGwpXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIiArIFN0cmluZyhiKSArIFwiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7XG4gIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG59XG5cbmV4cG9ydCB2YXIgX19hc3NpZ24gPSBmdW5jdGlvbigpIHtcbiAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uIF9fYXNzaWduKHQpIHtcbiAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKSB0W3BdID0gc1twXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0O1xuICB9XG4gIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19yZXN0KHMsIGUpIHtcbiAgdmFyIHQgPSB7fTtcbiAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXG4gICAgICB0W3BdID0gc1twXTtcbiAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcbiAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XG4gICAgICB9XG4gIHJldHVybiB0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19wYXJhbShwYXJhbUluZGV4LCBkZWNvcmF0b3IpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIGtleSkgeyBkZWNvcmF0b3IodGFyZ2V0LCBrZXksIHBhcmFtSW5kZXgpOyB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2VzRGVjb3JhdGUoY3RvciwgZGVzY3JpcHRvckluLCBkZWNvcmF0b3JzLCBjb250ZXh0SW4sIGluaXRpYWxpemVycywgZXh0cmFJbml0aWFsaXplcnMpIHtcbiAgZnVuY3Rpb24gYWNjZXB0KGYpIHsgaWYgKGYgIT09IHZvaWQgMCAmJiB0eXBlb2YgZiAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRnVuY3Rpb24gZXhwZWN0ZWRcIik7IHJldHVybiBmOyB9XG4gIHZhciBraW5kID0gY29udGV4dEluLmtpbmQsIGtleSA9IGtpbmQgPT09IFwiZ2V0dGVyXCIgPyBcImdldFwiIDoga2luZCA9PT0gXCJzZXR0ZXJcIiA/IFwic2V0XCIgOiBcInZhbHVlXCI7XG4gIHZhciB0YXJnZXQgPSAhZGVzY3JpcHRvckluICYmIGN0b3IgPyBjb250ZXh0SW5bXCJzdGF0aWNcIl0gPyBjdG9yIDogY3Rvci5wcm90b3R5cGUgOiBudWxsO1xuICB2YXIgZGVzY3JpcHRvciA9IGRlc2NyaXB0b3JJbiB8fCAodGFyZ2V0ID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGNvbnRleHRJbi5uYW1lKSA6IHt9KTtcbiAgdmFyIF8sIGRvbmUgPSBmYWxzZTtcbiAgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBjb250ZXh0ID0ge307XG4gICAgICBmb3IgKHZhciBwIGluIGNvbnRleHRJbikgY29udGV4dFtwXSA9IHAgPT09IFwiYWNjZXNzXCIgPyB7fSA6IGNvbnRleHRJbltwXTtcbiAgICAgIGZvciAodmFyIHAgaW4gY29udGV4dEluLmFjY2VzcykgY29udGV4dC5hY2Nlc3NbcF0gPSBjb250ZXh0SW4uYWNjZXNzW3BdO1xuICAgICAgY29udGV4dC5hZGRJbml0aWFsaXplciA9IGZ1bmN0aW9uIChmKSB7IGlmIChkb25lKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGFkZCBpbml0aWFsaXplcnMgYWZ0ZXIgZGVjb3JhdGlvbiBoYXMgY29tcGxldGVkXCIpOyBleHRyYUluaXRpYWxpemVycy5wdXNoKGFjY2VwdChmIHx8IG51bGwpKTsgfTtcbiAgICAgIHZhciByZXN1bHQgPSAoMCwgZGVjb3JhdG9yc1tpXSkoa2luZCA9PT0gXCJhY2Nlc3NvclwiID8geyBnZXQ6IGRlc2NyaXB0b3IuZ2V0LCBzZXQ6IGRlc2NyaXB0b3Iuc2V0IH0gOiBkZXNjcmlwdG9yW2tleV0sIGNvbnRleHQpO1xuICAgICAgaWYgKGtpbmQgPT09IFwiYWNjZXNzb3JcIikge1xuICAgICAgICAgIGlmIChyZXN1bHQgPT09IHZvaWQgMCkgY29udGludWU7XG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gbnVsbCB8fCB0eXBlb2YgcmVzdWx0ICE9PSBcIm9iamVjdFwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiT2JqZWN0IGV4cGVjdGVkXCIpO1xuICAgICAgICAgIGlmIChfID0gYWNjZXB0KHJlc3VsdC5nZXQpKSBkZXNjcmlwdG9yLmdldCA9IF87XG4gICAgICAgICAgaWYgKF8gPSBhY2NlcHQocmVzdWx0LnNldCkpIGRlc2NyaXB0b3Iuc2V0ID0gXztcbiAgICAgICAgICBpZiAoXyA9IGFjY2VwdChyZXN1bHQuaW5pdCkpIGluaXRpYWxpemVycy51bnNoaWZ0KF8pO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoXyA9IGFjY2VwdChyZXN1bHQpKSB7XG4gICAgICAgICAgaWYgKGtpbmQgPT09IFwiZmllbGRcIikgaW5pdGlhbGl6ZXJzLnVuc2hpZnQoXyk7XG4gICAgICAgICAgZWxzZSBkZXNjcmlwdG9yW2tleV0gPSBfO1xuICAgICAgfVxuICB9XG4gIGlmICh0YXJnZXQpIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGNvbnRleHRJbi5uYW1lLCBkZXNjcmlwdG9yKTtcbiAgZG9uZSA9IHRydWU7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gX19ydW5Jbml0aWFsaXplcnModGhpc0FyZywgaW5pdGlhbGl6ZXJzLCB2YWx1ZSkge1xuICB2YXIgdXNlVmFsdWUgPSBhcmd1bWVudHMubGVuZ3RoID4gMjtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbml0aWFsaXplcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhbHVlID0gdXNlVmFsdWUgPyBpbml0aWFsaXplcnNbaV0uY2FsbCh0aGlzQXJnLCB2YWx1ZSkgOiBpbml0aWFsaXplcnNbaV0uY2FsbCh0aGlzQXJnKTtcbiAgfVxuICByZXR1cm4gdXNlVmFsdWUgPyB2YWx1ZSA6IHZvaWQgMDtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3Byb3BLZXkoeCkge1xuICByZXR1cm4gdHlwZW9mIHggPT09IFwic3ltYm9sXCIgPyB4IDogXCJcIi5jb25jYXQoeCk7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gX19zZXRGdW5jdGlvbk5hbWUoZiwgbmFtZSwgcHJlZml4KSB7XG4gIGlmICh0eXBlb2YgbmFtZSA9PT0gXCJzeW1ib2xcIikgbmFtZSA9IG5hbWUuZGVzY3JpcHRpb24gPyBcIltcIi5jb25jYXQobmFtZS5kZXNjcmlwdGlvbiwgXCJdXCIpIDogXCJcIjtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmLCBcIm5hbWVcIiwgeyBjb25maWd1cmFibGU6IHRydWUsIHZhbHVlOiBwcmVmaXggPyBcIlwiLmNvbmNhdChwcmVmaXgsIFwiIFwiLCBuYW1lKSA6IG5hbWUgfSk7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gX19tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSkge1xuICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdGVyKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19nZW5lcmF0b3IodGhpc0FyZywgYm9keSkge1xuICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xuICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcbiAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XG4gIGZ1bmN0aW9uIHN0ZXAob3ApIHtcbiAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcbiAgICAgIHdoaWxlIChnICYmIChnID0gMCwgb3BbMF0gJiYgKF8gPSAwKSksIF8pIHRyeSB7XG4gICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xuICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcbiAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XG4gICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xuICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XG4gICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxuICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XG4gICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XG4gICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcbiAgfVxufVxuXG5leHBvcnQgdmFyIF9fY3JlYXRlQmluZGluZyA9IE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgb1trMl0gPSBtW2tdO1xufSk7XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2V4cG9ydFN0YXIobSwgbykge1xuICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG8sIHApKSBfX2NyZWF0ZUJpbmRpbmcobywgbSwgcCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3ZhbHVlcyhvKSB7XG4gIHZhciBzID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIFN5bWJvbC5pdGVyYXRvciwgbSA9IHMgJiYgb1tzXSwgaSA9IDA7XG4gIGlmIChtKSByZXR1cm4gbS5jYWxsKG8pO1xuICBpZiAobyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHJldHVybiB7XG4gICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKG8gJiYgaSA+PSBvLmxlbmd0aCkgbyA9IHZvaWQgMDtcbiAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XG4gICAgICB9XG4gIH07XG4gIHRocm93IG5ldyBUeXBlRXJyb3IocyA/IFwiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIiA6IFwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVhZChvLCBuKSB7XG4gIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcbiAgaWYgKCFtKSByZXR1cm4gbztcbiAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XG4gIHRyeSB7XG4gICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcbiAgfVxuICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cbiAgZmluYWxseSB7XG4gICAgICB0cnkge1xuICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xuICAgICAgfVxuICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XG4gIH1cbiAgcmV0dXJuIGFyO1xufVxuXG4vKiogQGRlcHJlY2F0ZWQgKi9cbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZCgpIHtcbiAgZm9yICh2YXIgYXIgPSBbXSwgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspXG4gICAgICBhciA9IGFyLmNvbmNhdChfX3JlYWQoYXJndW1lbnRzW2ldKSk7XG4gIHJldHVybiBhcjtcbn1cblxuLyoqIEBkZXByZWNhdGVkICovXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWRBcnJheXMoKSB7XG4gIGZvciAodmFyIHMgPSAwLCBpID0gMCwgaWwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgaWw7IGkrKykgcyArPSBhcmd1bWVudHNbaV0ubGVuZ3RoO1xuICBmb3IgKHZhciByID0gQXJyYXkocyksIGsgPSAwLCBpID0gMDsgaSA8IGlsOyBpKyspXG4gICAgICBmb3IgKHZhciBhID0gYXJndW1lbnRzW2ldLCBqID0gMCwgamwgPSBhLmxlbmd0aDsgaiA8IGpsOyBqKyssIGsrKylcbiAgICAgICAgICByW2tdID0gYVtqXTtcbiAgcmV0dXJuIHI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZEFycmF5KHRvLCBmcm9tLCBwYWNrKSB7XG4gIGlmIChwYWNrIHx8IGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIGZvciAodmFyIGkgPSAwLCBsID0gZnJvbS5sZW5ndGgsIGFyOyBpIDwgbDsgaSsrKSB7XG4gICAgICBpZiAoYXIgfHwgIShpIGluIGZyb20pKSB7XG4gICAgICAgICAgaWYgKCFhcikgYXIgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tLCAwLCBpKTtcbiAgICAgICAgICBhcltpXSA9IGZyb21baV07XG4gICAgICB9XG4gIH1cbiAgcmV0dXJuIHRvLmNvbmNhdChhciB8fCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0KHYpIHtcbiAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBfX2F3YWl0ID8gKHRoaXMudiA9IHYsIHRoaXMpIDogbmV3IF9fYXdhaXQodik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jR2VuZXJhdG9yKHRoaXNBcmcsIF9hcmd1bWVudHMsIGdlbmVyYXRvcikge1xuICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xuICB2YXIgZyA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSwgaSwgcSA9IFtdO1xuICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XG4gIGZ1bmN0aW9uIHZlcmIobikgeyBpZiAoZ1tuXSkgaVtuXSA9IGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAoYSwgYikgeyBxLnB1c2goW24sIHYsIGEsIGJdKSA+IDEgfHwgcmVzdW1lKG4sIHYpOyB9KTsgfTsgfVxuICBmdW5jdGlvbiByZXN1bWUobiwgdikgeyB0cnkgeyBzdGVwKGdbbl0odikpOyB9IGNhdGNoIChlKSB7IHNldHRsZShxWzBdWzNdLCBlKTsgfSB9XG4gIGZ1bmN0aW9uIHN0ZXAocikgeyByLnZhbHVlIGluc3RhbmNlb2YgX19hd2FpdCA/IFByb21pc2UucmVzb2x2ZShyLnZhbHVlLnYpLnRoZW4oZnVsZmlsbCwgcmVqZWN0KSA6IHNldHRsZShxWzBdWzJdLCByKTsgfVxuICBmdW5jdGlvbiBmdWxmaWxsKHZhbHVlKSB7IHJlc3VtZShcIm5leHRcIiwgdmFsdWUpOyB9XG4gIGZ1bmN0aW9uIHJlamVjdCh2YWx1ZSkgeyByZXN1bWUoXCJ0aHJvd1wiLCB2YWx1ZSk7IH1cbiAgZnVuY3Rpb24gc2V0dGxlKGYsIHYpIHsgaWYgKGYodiksIHEuc2hpZnQoKSwgcS5sZW5ndGgpIHJlc3VtZShxWzBdWzBdLCBxWzBdWzFdKTsgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0RlbGVnYXRvcihvKSB7XG4gIHZhciBpLCBwO1xuICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIsIGZ1bmN0aW9uIChlKSB7IHRocm93IGU7IH0pLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xuICBmdW5jdGlvbiB2ZXJiKG4sIGYpIHsgaVtuXSA9IG9bbl0gPyBmdW5jdGlvbiAodikgeyByZXR1cm4gKHAgPSAhcCkgPyB7IHZhbHVlOiBfX2F3YWl0KG9bbl0odikpLCBkb25lOiBmYWxzZSB9IDogZiA/IGYodikgOiB2OyB9IDogZjsgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY1ZhbHVlcyhvKSB7XG4gIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XG4gIHZhciBtID0gb1tTeW1ib2wuYXN5bmNJdGVyYXRvcl0sIGk7XG4gIHJldHVybiBtID8gbS5jYWxsKG8pIDogKG8gPSB0eXBlb2YgX192YWx1ZXMgPT09IFwiZnVuY3Rpb25cIiA/IF9fdmFsdWVzKG8pIDogb1tTeW1ib2wuaXRlcmF0b3JdKCksIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpKTtcbiAgZnVuY3Rpb24gdmVyYihuKSB7IGlbbl0gPSBvW25dICYmIGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHYgPSBvW25dKHYpLCBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCB2LmRvbmUsIHYudmFsdWUpOyB9KTsgfTsgfVxuICBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCBkLCB2KSB7IFByb21pc2UucmVzb2x2ZSh2KS50aGVuKGZ1bmN0aW9uKHYpIHsgcmVzb2x2ZSh7IHZhbHVlOiB2LCBkb25lOiBkIH0pOyB9LCByZWplY3QpOyB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX21ha2VUZW1wbGF0ZU9iamVjdChjb29rZWQsIHJhdykge1xuICBpZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb29rZWQsIFwicmF3XCIsIHsgdmFsdWU6IHJhdyB9KTsgfSBlbHNlIHsgY29va2VkLnJhdyA9IHJhdzsgfVxuICByZXR1cm4gY29va2VkO1xufTtcblxudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9IE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgb1tcImRlZmF1bHRcIl0gPSB2O1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0U3Rhcihtb2QpIHtcbiAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XG4gIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydERlZmF1bHQobW9kKSB7XG4gIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgZGVmYXVsdDogbW9kIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHJlY2VpdmVyLCBzdGF0ZSwga2luZCwgZikge1xuICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBnZXR0ZXJcIik7XG4gIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlYWQgcHJpdmF0ZSBtZW1iZXIgZnJvbSBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICByZXR1cm4ga2luZCA9PT0gXCJtXCIgPyBmIDoga2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIpIDogZiA/IGYudmFsdWUgOiBzdGF0ZS5nZXQocmVjZWl2ZXIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZFNldChyZWNlaXZlciwgc3RhdGUsIHZhbHVlLCBraW5kLCBmKSB7XG4gIGlmIChraW5kID09PSBcIm1cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgbWV0aG9kIGlzIG5vdCB3cml0YWJsZVwiKTtcbiAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgc2V0dGVyXCIpO1xuICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB3cml0ZSBwcml2YXRlIG1lbWJlciB0byBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICByZXR1cm4gKGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyLCB2YWx1ZSkgOiBmID8gZi52YWx1ZSA9IHZhbHVlIDogc3RhdGUuc2V0KHJlY2VpdmVyLCB2YWx1ZSkpLCB2YWx1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRJbihzdGF0ZSwgcmVjZWl2ZXIpIHtcbiAgaWYgKHJlY2VpdmVyID09PSBudWxsIHx8ICh0eXBlb2YgcmVjZWl2ZXIgIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIHJlY2VpdmVyICE9PSBcImZ1bmN0aW9uXCIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHVzZSAnaW4nIG9wZXJhdG9yIG9uIG5vbi1vYmplY3RcIik7XG4gIHJldHVybiB0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyID09PSBzdGF0ZSA6IHN0YXRlLmhhcyhyZWNlaXZlcik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2FkZERpc3Bvc2FibGVSZXNvdXJjZShlbnYsIHZhbHVlLCBhc3luYykge1xuICBpZiAodmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IHZvaWQgMCkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJPYmplY3QgZXhwZWN0ZWQuXCIpO1xuICAgIHZhciBkaXNwb3NlO1xuICAgIGlmIChhc3luYykge1xuICAgICAgICBpZiAoIVN5bWJvbC5hc3luY0Rpc3Bvc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNEaXNwb3NlIGlzIG5vdCBkZWZpbmVkLlwiKTtcbiAgICAgICAgZGlzcG9zZSA9IHZhbHVlW1N5bWJvbC5hc3luY0Rpc3Bvc2VdO1xuICAgIH1cbiAgICBpZiAoZGlzcG9zZSA9PT0gdm9pZCAwKSB7XG4gICAgICAgIGlmICghU3ltYm9sLmRpc3Bvc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuZGlzcG9zZSBpcyBub3QgZGVmaW5lZC5cIik7XG4gICAgICAgIGRpc3Bvc2UgPSB2YWx1ZVtTeW1ib2wuZGlzcG9zZV07XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZGlzcG9zZSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiT2JqZWN0IG5vdCBkaXNwb3NhYmxlLlwiKTtcbiAgICBlbnYuc3RhY2sucHVzaCh7IHZhbHVlOiB2YWx1ZSwgZGlzcG9zZTogZGlzcG9zZSwgYXN5bmM6IGFzeW5jIH0pO1xuICB9XG4gIGVsc2UgaWYgKGFzeW5jKSB7XG4gICAgZW52LnN0YWNrLnB1c2goeyBhc3luYzogdHJ1ZSB9KTtcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59XG5cbnZhciBfU3VwcHJlc3NlZEVycm9yID0gdHlwZW9mIFN1cHByZXNzZWRFcnJvciA9PT0gXCJmdW5jdGlvblwiID8gU3VwcHJlc3NlZEVycm9yIDogZnVuY3Rpb24gKGVycm9yLCBzdXBwcmVzc2VkLCBtZXNzYWdlKSB7XG4gIHZhciBlID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICByZXR1cm4gZS5uYW1lID0gXCJTdXBwcmVzc2VkRXJyb3JcIiwgZS5lcnJvciA9IGVycm9yLCBlLnN1cHByZXNzZWQgPSBzdXBwcmVzc2VkLCBlO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9fZGlzcG9zZVJlc291cmNlcyhlbnYpIHtcbiAgZnVuY3Rpb24gZmFpbChlKSB7XG4gICAgZW52LmVycm9yID0gZW52Lmhhc0Vycm9yID8gbmV3IF9TdXBwcmVzc2VkRXJyb3IoZSwgZW52LmVycm9yLCBcIkFuIGVycm9yIHdhcyBzdXBwcmVzc2VkIGR1cmluZyBkaXNwb3NhbC5cIikgOiBlO1xuICAgIGVudi5oYXNFcnJvciA9IHRydWU7XG4gIH1cbiAgZnVuY3Rpb24gbmV4dCgpIHtcbiAgICB3aGlsZSAoZW52LnN0YWNrLmxlbmd0aCkge1xuICAgICAgdmFyIHJlYyA9IGVudi5zdGFjay5wb3AoKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWMuZGlzcG9zZSAmJiByZWMuZGlzcG9zZS5jYWxsKHJlYy52YWx1ZSk7XG4gICAgICAgIGlmIChyZWMuYXN5bmMpIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVzdWx0KS50aGVuKG5leHQsIGZ1bmN0aW9uKGUpIHsgZmFpbChlKTsgcmV0dXJuIG5leHQoKTsgfSk7XG4gICAgICB9XG4gICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgIGZhaWwoZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChlbnYuaGFzRXJyb3IpIHRocm93IGVudi5lcnJvcjtcbiAgfVxuICByZXR1cm4gbmV4dCgpO1xufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIF9fZXh0ZW5kcyxcbiAgX19hc3NpZ24sXG4gIF9fcmVzdCxcbiAgX19kZWNvcmF0ZSxcbiAgX19wYXJhbSxcbiAgX19tZXRhZGF0YSxcbiAgX19hd2FpdGVyLFxuICBfX2dlbmVyYXRvcixcbiAgX19jcmVhdGVCaW5kaW5nLFxuICBfX2V4cG9ydFN0YXIsXG4gIF9fdmFsdWVzLFxuICBfX3JlYWQsXG4gIF9fc3ByZWFkLFxuICBfX3NwcmVhZEFycmF5cyxcbiAgX19zcHJlYWRBcnJheSxcbiAgX19hd2FpdCxcbiAgX19hc3luY0dlbmVyYXRvcixcbiAgX19hc3luY0RlbGVnYXRvcixcbiAgX19hc3luY1ZhbHVlcyxcbiAgX19tYWtlVGVtcGxhdGVPYmplY3QsXG4gIF9faW1wb3J0U3RhcixcbiAgX19pbXBvcnREZWZhdWx0LFxuICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0LFxuICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0LFxuICBfX2NsYXNzUHJpdmF0ZUZpZWxkSW4sXG4gIF9fYWRkRGlzcG9zYWJsZVJlc291cmNlLFxuICBfX2Rpc3Bvc2VSZXNvdXJjZXMsXG59O1xuIiwiZXhwb3J0IHZhciBpc0FycmF5TGlrZSA9IChmdW5jdGlvbiAoeCkgeyByZXR1cm4geCAmJiB0eXBlb2YgeC5sZW5ndGggPT09ICdudW1iZXInICYmIHR5cGVvZiB4ICE9PSAnZnVuY3Rpb24nOyB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzQXJyYXlMaWtlLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzRnVuY3Rpb24uanMubWFwIiwiaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gXCIuL2lzRnVuY3Rpb25cIjtcbmV4cG9ydCBmdW5jdGlvbiBpc1Byb21pc2UodmFsdWUpIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbih2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogdmFsdWUudGhlbik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc1Byb21pc2UuanMubWFwIiwiaW1wb3J0IHsgY3JlYXRlRXJyb3JDbGFzcyB9IGZyb20gJy4vY3JlYXRlRXJyb3JDbGFzcyc7XG5leHBvcnQgdmFyIFVuc3Vic2NyaXB0aW9uRXJyb3IgPSBjcmVhdGVFcnJvckNsYXNzKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gVW5zdWJzY3JpcHRpb25FcnJvckltcGwoZXJyb3JzKSB7XG4gICAgICAgIF9zdXBlcih0aGlzKTtcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gZXJyb3JzXG4gICAgICAgICAgICA/IGVycm9ycy5sZW5ndGggKyBcIiBlcnJvcnMgb2NjdXJyZWQgZHVyaW5nIHVuc3Vic2NyaXB0aW9uOlxcblwiICsgZXJyb3JzLm1hcChmdW5jdGlvbiAoZXJyLCBpKSB7IHJldHVybiBpICsgMSArIFwiKSBcIiArIGVyci50b1N0cmluZygpOyB9KS5qb2luKCdcXG4gICcpXG4gICAgICAgICAgICA6ICcnO1xuICAgICAgICB0aGlzLm5hbWUgPSAnVW5zdWJzY3JpcHRpb25FcnJvcic7XG4gICAgICAgIHRoaXMuZXJyb3JzID0gZXJyb3JzO1xuICAgIH07XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVVuc3Vic2NyaXB0aW9uRXJyb3IuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUVycm9yQ2xhc3MoY3JlYXRlSW1wbCkge1xuICAgIHZhciBfc3VwZXIgPSBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICAgICAgRXJyb3IuY2FsbChpbnN0YW5jZSk7XG4gICAgICAgIGluc3RhbmNlLnN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgfTtcbiAgICB2YXIgY3RvckZ1bmMgPSBjcmVhdGVJbXBsKF9zdXBlcik7XG4gICAgY3RvckZ1bmMucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUpO1xuICAgIGN0b3JGdW5jLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3JGdW5jO1xuICAgIHJldHVybiBjdG9yRnVuYztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyZWF0ZUVycm9yQ2xhc3MuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGFyclJlbW92ZShhcnIsIGl0ZW0pIHtcbiAgICBpZiAoYXJyKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGFyci5pbmRleE9mKGl0ZW0pO1xuICAgICAgICAwIDw9IGluZGV4ICYmIGFyci5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFyclJlbW92ZS5qcy5tYXAiLCJpbXBvcnQgeyBfX3JlYWQsIF9fc3ByZWFkQXJyYXksIF9fdmFsdWVzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi91dGlsL2lzRnVuY3Rpb24nO1xuaW1wb3J0IHsgVW5zdWJzY3JpcHRpb25FcnJvciB9IGZyb20gJy4vdXRpbC9VbnN1YnNjcmlwdGlvbkVycm9yJztcbmltcG9ydCB7IGFyclJlbW92ZSB9IGZyb20gJy4vdXRpbC9hcnJSZW1vdmUnO1xudmFyIFN1YnNjcmlwdGlvbiA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU3Vic2NyaXB0aW9uKGluaXRpYWxUZWFyZG93bikge1xuICAgICAgICB0aGlzLmluaXRpYWxUZWFyZG93biA9IGluaXRpYWxUZWFyZG93bjtcbiAgICAgICAgdGhpcy5jbG9zZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fcGFyZW50YWdlID0gbnVsbDtcbiAgICAgICAgdGhpcy5fZmluYWxpemVycyA9IG51bGw7XG4gICAgfVxuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlXzEsIF9hLCBlXzIsIF9iO1xuICAgICAgICB2YXIgZXJyb3JzO1xuICAgICAgICBpZiAoIXRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICB0aGlzLmNsb3NlZCA9IHRydWU7XG4gICAgICAgICAgICB2YXIgX3BhcmVudGFnZSA9IHRoaXMuX3BhcmVudGFnZTtcbiAgICAgICAgICAgIGlmIChfcGFyZW50YWdlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcGFyZW50YWdlID0gbnVsbDtcbiAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShfcGFyZW50YWdlKSkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX3BhcmVudGFnZV8xID0gX192YWx1ZXMoX3BhcmVudGFnZSksIF9wYXJlbnRhZ2VfMV8xID0gX3BhcmVudGFnZV8xLm5leHQoKTsgIV9wYXJlbnRhZ2VfMV8xLmRvbmU7IF9wYXJlbnRhZ2VfMV8xID0gX3BhcmVudGFnZV8xLm5leHQoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXJlbnRfMSA9IF9wYXJlbnRhZ2VfMV8xLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudF8xLnJlbW92ZSh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZV8xXzEpIHsgZV8xID0geyBlcnJvcjogZV8xXzEgfTsgfVxuICAgICAgICAgICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9wYXJlbnRhZ2VfMV8xICYmICFfcGFyZW50YWdlXzFfMS5kb25lICYmIChfYSA9IF9wYXJlbnRhZ2VfMS5yZXR1cm4pKSBfYS5jYWxsKF9wYXJlbnRhZ2VfMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMSkgdGhyb3cgZV8xLmVycm9yOyB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIF9wYXJlbnRhZ2UucmVtb3ZlKHRoaXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBpbml0aWFsRmluYWxpemVyID0gdGhpcy5pbml0aWFsVGVhcmRvd247XG4gICAgICAgICAgICBpZiAoaXNGdW5jdGlvbihpbml0aWFsRmluYWxpemVyKSkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGluaXRpYWxGaW5hbGl6ZXIoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JzID0gZSBpbnN0YW5jZW9mIFVuc3Vic2NyaXB0aW9uRXJyb3IgPyBlLmVycm9ycyA6IFtlXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgX2ZpbmFsaXplcnMgPSB0aGlzLl9maW5hbGl6ZXJzO1xuICAgICAgICAgICAgaWYgKF9maW5hbGl6ZXJzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZmluYWxpemVycyA9IG51bGw7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2ZpbmFsaXplcnNfMSA9IF9fdmFsdWVzKF9maW5hbGl6ZXJzKSwgX2ZpbmFsaXplcnNfMV8xID0gX2ZpbmFsaXplcnNfMS5uZXh0KCk7ICFfZmluYWxpemVyc18xXzEuZG9uZTsgX2ZpbmFsaXplcnNfMV8xID0gX2ZpbmFsaXplcnNfMS5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaW5hbGl6ZXIgPSBfZmluYWxpemVyc18xXzEudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4ZWNGaW5hbGl6ZXIoZmluYWxpemVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMgPSBlcnJvcnMgIT09IG51bGwgJiYgZXJyb3JzICE9PSB2b2lkIDAgPyBlcnJvcnMgOiBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyIGluc3RhbmNlb2YgVW5zdWJzY3JpcHRpb25FcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMgPSBfX3NwcmVhZEFycmF5KF9fc3ByZWFkQXJyYXkoW10sIF9fcmVhZChlcnJvcnMpKSwgX19yZWFkKGVyci5lcnJvcnMpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycy5wdXNoKGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlXzJfMSkgeyBlXzIgPSB7IGVycm9yOiBlXzJfMSB9OyB9XG4gICAgICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2ZpbmFsaXplcnNfMV8xICYmICFfZmluYWxpemVyc18xXzEuZG9uZSAmJiAoX2IgPSBfZmluYWxpemVyc18xLnJldHVybikpIF9iLmNhbGwoX2ZpbmFsaXplcnNfMSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzIpIHRocm93IGVfMi5lcnJvcjsgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlcnJvcnMpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVW5zdWJzY3JpcHRpb25FcnJvcihlcnJvcnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uICh0ZWFyZG93bikge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmICh0ZWFyZG93biAmJiB0ZWFyZG93biAhPT0gdGhpcykge1xuICAgICAgICAgICAgaWYgKHRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgZXhlY0ZpbmFsaXplcih0ZWFyZG93bik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAodGVhcmRvd24gaW5zdGFuY2VvZiBTdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRlYXJkb3duLmNsb3NlZCB8fCB0ZWFyZG93bi5faGFzUGFyZW50KHRoaXMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGVhcmRvd24uX2FkZFBhcmVudCh0aGlzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKHRoaXMuX2ZpbmFsaXplcnMgPSAoX2EgPSB0aGlzLl9maW5hbGl6ZXJzKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBbXSkucHVzaCh0ZWFyZG93bik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUuX2hhc1BhcmVudCA9IGZ1bmN0aW9uIChwYXJlbnQpIHtcbiAgICAgICAgdmFyIF9wYXJlbnRhZ2UgPSB0aGlzLl9wYXJlbnRhZ2U7XG4gICAgICAgIHJldHVybiBfcGFyZW50YWdlID09PSBwYXJlbnQgfHwgKEFycmF5LmlzQXJyYXkoX3BhcmVudGFnZSkgJiYgX3BhcmVudGFnZS5pbmNsdWRlcyhwYXJlbnQpKTtcbiAgICB9O1xuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUuX2FkZFBhcmVudCA9IGZ1bmN0aW9uIChwYXJlbnQpIHtcbiAgICAgICAgdmFyIF9wYXJlbnRhZ2UgPSB0aGlzLl9wYXJlbnRhZ2U7XG4gICAgICAgIHRoaXMuX3BhcmVudGFnZSA9IEFycmF5LmlzQXJyYXkoX3BhcmVudGFnZSkgPyAoX3BhcmVudGFnZS5wdXNoKHBhcmVudCksIF9wYXJlbnRhZ2UpIDogX3BhcmVudGFnZSA/IFtfcGFyZW50YWdlLCBwYXJlbnRdIDogcGFyZW50O1xuICAgIH07XG4gICAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5fcmVtb3ZlUGFyZW50ID0gZnVuY3Rpb24gKHBhcmVudCkge1xuICAgICAgICB2YXIgX3BhcmVudGFnZSA9IHRoaXMuX3BhcmVudGFnZTtcbiAgICAgICAgaWYgKF9wYXJlbnRhZ2UgPT09IHBhcmVudCkge1xuICAgICAgICAgICAgdGhpcy5fcGFyZW50YWdlID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KF9wYXJlbnRhZ2UpKSB7XG4gICAgICAgICAgICBhcnJSZW1vdmUoX3BhcmVudGFnZSwgcGFyZW50KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAodGVhcmRvd24pIHtcbiAgICAgICAgdmFyIF9maW5hbGl6ZXJzID0gdGhpcy5fZmluYWxpemVycztcbiAgICAgICAgX2ZpbmFsaXplcnMgJiYgYXJyUmVtb3ZlKF9maW5hbGl6ZXJzLCB0ZWFyZG93bik7XG4gICAgICAgIGlmICh0ZWFyZG93biBpbnN0YW5jZW9mIFN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgdGVhcmRvd24uX3JlbW92ZVBhcmVudCh0aGlzKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaXB0aW9uLkVNUFRZID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGVtcHR5ID0gbmV3IFN1YnNjcmlwdGlvbigpO1xuICAgICAgICBlbXB0eS5jbG9zZWQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gZW1wdHk7XG4gICAgfSkoKTtcbiAgICByZXR1cm4gU3Vic2NyaXB0aW9uO1xufSgpKTtcbmV4cG9ydCB7IFN1YnNjcmlwdGlvbiB9O1xuZXhwb3J0IHZhciBFTVBUWV9TVUJTQ1JJUFRJT04gPSBTdWJzY3JpcHRpb24uRU1QVFk7XG5leHBvcnQgZnVuY3Rpb24gaXNTdWJzY3JpcHRpb24odmFsdWUpIHtcbiAgICByZXR1cm4gKHZhbHVlIGluc3RhbmNlb2YgU3Vic2NyaXB0aW9uIHx8XG4gICAgICAgICh2YWx1ZSAmJiAnY2xvc2VkJyBpbiB2YWx1ZSAmJiBpc0Z1bmN0aW9uKHZhbHVlLnJlbW92ZSkgJiYgaXNGdW5jdGlvbih2YWx1ZS5hZGQpICYmIGlzRnVuY3Rpb24odmFsdWUudW5zdWJzY3JpYmUpKSk7XG59XG5mdW5jdGlvbiBleGVjRmluYWxpemVyKGZpbmFsaXplcikge1xuICAgIGlmIChpc0Z1bmN0aW9uKGZpbmFsaXplcikpIHtcbiAgICAgICAgZmluYWxpemVyKCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBmaW5hbGl6ZXIudW5zdWJzY3JpYmUoKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TdWJzY3JpcHRpb24uanMubWFwIiwiZXhwb3J0IHZhciBjb25maWcgPSB7XG4gICAgb25VbmhhbmRsZWRFcnJvcjogbnVsbCxcbiAgICBvblN0b3BwZWROb3RpZmljYXRpb246IG51bGwsXG4gICAgUHJvbWlzZTogdW5kZWZpbmVkLFxuICAgIHVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmc6IGZhbHNlLFxuICAgIHVzZURlcHJlY2F0ZWROZXh0Q29udGV4dDogZmFsc2UsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uZmlnLmpzLm1hcCIsImltcG9ydCB7IF9fcmVhZCwgX19zcHJlYWRBcnJheSB9IGZyb20gXCJ0c2xpYlwiO1xuZXhwb3J0IHZhciB0aW1lb3V0UHJvdmlkZXIgPSB7XG4gICAgc2V0VGltZW91dDogZnVuY3Rpb24gKGhhbmRsZXIsIHRpbWVvdXQpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAyOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2kgLSAyXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRlbGVnYXRlID0gdGltZW91dFByb3ZpZGVyLmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUgPT09IG51bGwgfHwgZGVsZWdhdGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRlbGVnYXRlLnNldFRpbWVvdXQpIHtcbiAgICAgICAgICAgIHJldHVybiBkZWxlZ2F0ZS5zZXRUaW1lb3V0LmFwcGx5KGRlbGVnYXRlLCBfX3NwcmVhZEFycmF5KFtoYW5kbGVyLCB0aW1lb3V0XSwgX19yZWFkKGFyZ3MpKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQuYXBwbHkodm9pZCAwLCBfX3NwcmVhZEFycmF5KFtoYW5kbGVyLCB0aW1lb3V0XSwgX19yZWFkKGFyZ3MpKSk7XG4gICAgfSxcbiAgICBjbGVhclRpbWVvdXQ6IGZ1bmN0aW9uIChoYW5kbGUpIHtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gdGltZW91dFByb3ZpZGVyLmRlbGVnYXRlO1xuICAgICAgICByZXR1cm4gKChkZWxlZ2F0ZSA9PT0gbnVsbCB8fCBkZWxlZ2F0ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGVsZWdhdGUuY2xlYXJUaW1lb3V0KSB8fCBjbGVhclRpbWVvdXQpKGhhbmRsZSk7XG4gICAgfSxcbiAgICBkZWxlZ2F0ZTogdW5kZWZpbmVkLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRpbWVvdXRQcm92aWRlci5qcy5tYXAiLCJpbXBvcnQgeyBjb25maWcgfSBmcm9tICcuLi9jb25maWcnO1xuaW1wb3J0IHsgdGltZW91dFByb3ZpZGVyIH0gZnJvbSAnLi4vc2NoZWR1bGVyL3RpbWVvdXRQcm92aWRlcic7XG5leHBvcnQgZnVuY3Rpb24gcmVwb3J0VW5oYW5kbGVkRXJyb3IoZXJyKSB7XG4gICAgdGltZW91dFByb3ZpZGVyLnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb25VbmhhbmRsZWRFcnJvciA9IGNvbmZpZy5vblVuaGFuZGxlZEVycm9yO1xuICAgICAgICBpZiAob25VbmhhbmRsZWRFcnJvcikge1xuICAgICAgICAgICAgb25VbmhhbmRsZWRFcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICB9XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXBvcnRVbmhhbmRsZWRFcnJvci5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gbm9vcCgpIHsgfVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bm9vcC5qcy5tYXAiLCJleHBvcnQgdmFyIENPTVBMRVRFX05PVElGSUNBVElPTiA9IChmdW5jdGlvbiAoKSB7IHJldHVybiBjcmVhdGVOb3RpZmljYXRpb24oJ0MnLCB1bmRlZmluZWQsIHVuZGVmaW5lZCk7IH0pKCk7XG5leHBvcnQgZnVuY3Rpb24gZXJyb3JOb3RpZmljYXRpb24oZXJyb3IpIHtcbiAgICByZXR1cm4gY3JlYXRlTm90aWZpY2F0aW9uKCdFJywgdW5kZWZpbmVkLCBlcnJvcik7XG59XG5leHBvcnQgZnVuY3Rpb24gbmV4dE5vdGlmaWNhdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiBjcmVhdGVOb3RpZmljYXRpb24oJ04nLCB2YWx1ZSwgdW5kZWZpbmVkKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVOb3RpZmljYXRpb24oa2luZCwgdmFsdWUsIGVycm9yKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAga2luZDoga2luZCxcbiAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICBlcnJvcjogZXJyb3IsXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU5vdGlmaWNhdGlvbkZhY3Rvcmllcy5qcy5tYXAiLCJpbXBvcnQgeyBjb25maWcgfSBmcm9tICcuLi9jb25maWcnO1xudmFyIGNvbnRleHQgPSBudWxsO1xuZXhwb3J0IGZ1bmN0aW9uIGVycm9yQ29udGV4dChjYikge1xuICAgIGlmIChjb25maWcudXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZykge1xuICAgICAgICB2YXIgaXNSb290ID0gIWNvbnRleHQ7XG4gICAgICAgIGlmIChpc1Jvb3QpIHtcbiAgICAgICAgICAgIGNvbnRleHQgPSB7IGVycm9yVGhyb3duOiBmYWxzZSwgZXJyb3I6IG51bGwgfTtcbiAgICAgICAgfVxuICAgICAgICBjYigpO1xuICAgICAgICBpZiAoaXNSb290KSB7XG4gICAgICAgICAgICB2YXIgX2EgPSBjb250ZXh0LCBlcnJvclRocm93biA9IF9hLmVycm9yVGhyb3duLCBlcnJvciA9IF9hLmVycm9yO1xuICAgICAgICAgICAgY29udGV4dCA9IG51bGw7XG4gICAgICAgICAgICBpZiAoZXJyb3JUaHJvd24pIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY2IoKTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gY2FwdHVyZUVycm9yKGVycikge1xuICAgIGlmIChjb25maWcudXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZyAmJiBjb250ZXh0KSB7XG4gICAgICAgIGNvbnRleHQuZXJyb3JUaHJvd24gPSB0cnVlO1xuICAgICAgICBjb250ZXh0LmVycm9yID0gZXJyO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVycm9yQ29udGV4dC5qcy5tYXAiLCJpbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL3V0aWwvaXNGdW5jdGlvbic7XG5pbXBvcnQgeyBpc1N1YnNjcmlwdGlvbiwgU3Vic2NyaXB0aW9uIH0gZnJvbSAnLi9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi9jb25maWcnO1xuaW1wb3J0IHsgcmVwb3J0VW5oYW5kbGVkRXJyb3IgfSBmcm9tICcuL3V0aWwvcmVwb3J0VW5oYW5kbGVkRXJyb3InO1xuaW1wb3J0IHsgbm9vcCB9IGZyb20gJy4vdXRpbC9ub29wJztcbmltcG9ydCB7IG5leHROb3RpZmljYXRpb24sIGVycm9yTm90aWZpY2F0aW9uLCBDT01QTEVURV9OT1RJRklDQVRJT04gfSBmcm9tICcuL05vdGlmaWNhdGlvbkZhY3Rvcmllcyc7XG5pbXBvcnQgeyB0aW1lb3V0UHJvdmlkZXIgfSBmcm9tICcuL3NjaGVkdWxlci90aW1lb3V0UHJvdmlkZXInO1xuaW1wb3J0IHsgY2FwdHVyZUVycm9yIH0gZnJvbSAnLi91dGlsL2Vycm9yQ29udGV4dCc7XG52YXIgU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU3Vic2NyaWJlcihkZXN0aW5hdGlvbikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5pc1N0b3BwZWQgPSBmYWxzZTtcbiAgICAgICAgaWYgKGRlc3RpbmF0aW9uKSB7XG4gICAgICAgICAgICBfdGhpcy5kZXN0aW5hdGlvbiA9IGRlc3RpbmF0aW9uO1xuICAgICAgICAgICAgaWYgKGlzU3Vic2NyaXB0aW9uKGRlc3RpbmF0aW9uKSkge1xuICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uLmFkZChfdGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBfdGhpcy5kZXN0aW5hdGlvbiA9IEVNUFRZX09CU0VSVkVSO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgU3Vic2NyaWJlci5jcmVhdGUgPSBmdW5jdGlvbiAobmV4dCwgZXJyb3IsIGNvbXBsZXRlKSB7XG4gICAgICAgIHJldHVybiBuZXcgU2FmZVN1YnNjcmliZXIobmV4dCwgZXJyb3IsIGNvbXBsZXRlKTtcbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICBoYW5kbGVTdG9wcGVkTm90aWZpY2F0aW9uKG5leHROb3RpZmljYXRpb24odmFsdWUpLCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX25leHQodmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICBoYW5kbGVTdG9wcGVkTm90aWZpY2F0aW9uKGVycm9yTm90aWZpY2F0aW9uKGVyciksIHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5fZXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgaGFuZGxlU3RvcHBlZE5vdGlmaWNhdGlvbihDT01QTEVURV9OT1RJRklDQVRJT04sIHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5fY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghdGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHRoaXMuaXNTdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUudW5zdWJzY3JpYmUuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24gPSBudWxsO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQodmFsdWUpO1xuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUuX2Vycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBTdWJzY3JpYmVyO1xufShTdWJzY3JpcHRpb24pKTtcbmV4cG9ydCB7IFN1YnNjcmliZXIgfTtcbnZhciBfYmluZCA9IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kO1xuZnVuY3Rpb24gYmluZChmbiwgdGhpc0FyZykge1xuICAgIHJldHVybiBfYmluZC5jYWxsKGZuLCB0aGlzQXJnKTtcbn1cbnZhciBDb25zdW1lck9ic2VydmVyID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBDb25zdW1lck9ic2VydmVyKHBhcnRpYWxPYnNlcnZlcikge1xuICAgICAgICB0aGlzLnBhcnRpYWxPYnNlcnZlciA9IHBhcnRpYWxPYnNlcnZlcjtcbiAgICB9XG4gICAgQ29uc3VtZXJPYnNlcnZlci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgcGFydGlhbE9ic2VydmVyID0gdGhpcy5wYXJ0aWFsT2JzZXJ2ZXI7XG4gICAgICAgIGlmIChwYXJ0aWFsT2JzZXJ2ZXIubmV4dCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBwYXJ0aWFsT2JzZXJ2ZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVVbmhhbmRsZWRFcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIENvbnN1bWVyT2JzZXJ2ZXIucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB2YXIgcGFydGlhbE9ic2VydmVyID0gdGhpcy5wYXJ0aWFsT2JzZXJ2ZXI7XG4gICAgICAgIGlmIChwYXJ0aWFsT2JzZXJ2ZXIuZXJyb3IpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcGFydGlhbE9ic2VydmVyLmVycm9yKGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVVbmhhbmRsZWRFcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBoYW5kbGVVbmhhbmRsZWRFcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDb25zdW1lck9ic2VydmVyLnByb3RvdHlwZS5jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHBhcnRpYWxPYnNlcnZlciA9IHRoaXMucGFydGlhbE9ic2VydmVyO1xuICAgICAgICBpZiAocGFydGlhbE9ic2VydmVyLmNvbXBsZXRlKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHBhcnRpYWxPYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlVW5oYW5kbGVkRXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gQ29uc3VtZXJPYnNlcnZlcjtcbn0oKSk7XG52YXIgU2FmZVN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTYWZlU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTYWZlU3Vic2NyaWJlcihvYnNlcnZlck9yTmV4dCwgZXJyb3IsIGNvbXBsZXRlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIHZhciBwYXJ0aWFsT2JzZXJ2ZXI7XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKG9ic2VydmVyT3JOZXh0KSB8fCAhb2JzZXJ2ZXJPck5leHQpIHtcbiAgICAgICAgICAgIHBhcnRpYWxPYnNlcnZlciA9IHtcbiAgICAgICAgICAgICAgICBuZXh0OiAob2JzZXJ2ZXJPck5leHQgIT09IG51bGwgJiYgb2JzZXJ2ZXJPck5leHQgIT09IHZvaWQgMCA/IG9ic2VydmVyT3JOZXh0IDogdW5kZWZpbmVkKSxcbiAgICAgICAgICAgICAgICBlcnJvcjogZXJyb3IgIT09IG51bGwgJiYgZXJyb3IgIT09IHZvaWQgMCA/IGVycm9yIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIGNvbXBsZXRlOiBjb21wbGV0ZSAhPT0gbnVsbCAmJiBjb21wbGV0ZSAhPT0gdm9pZCAwID8gY29tcGxldGUgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIGNvbnRleHRfMTtcbiAgICAgICAgICAgIGlmIChfdGhpcyAmJiBjb25maWcudXNlRGVwcmVjYXRlZE5leHRDb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgY29udGV4dF8xID0gT2JqZWN0LmNyZWF0ZShvYnNlcnZlck9yTmV4dCk7XG4gICAgICAgICAgICAgICAgY29udGV4dF8xLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMudW5zdWJzY3JpYmUoKTsgfTtcbiAgICAgICAgICAgICAgICBwYXJ0aWFsT2JzZXJ2ZXIgPSB7XG4gICAgICAgICAgICAgICAgICAgIG5leHQ6IG9ic2VydmVyT3JOZXh0Lm5leHQgJiYgYmluZChvYnNlcnZlck9yTmV4dC5uZXh0LCBjb250ZXh0XzEpLFxuICAgICAgICAgICAgICAgICAgICBlcnJvcjogb2JzZXJ2ZXJPck5leHQuZXJyb3IgJiYgYmluZChvYnNlcnZlck9yTmV4dC5lcnJvciwgY29udGV4dF8xKSxcbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGU6IG9ic2VydmVyT3JOZXh0LmNvbXBsZXRlICYmIGJpbmQob2JzZXJ2ZXJPck5leHQuY29tcGxldGUsIGNvbnRleHRfMSksXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHBhcnRpYWxPYnNlcnZlciA9IG9ic2VydmVyT3JOZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIF90aGlzLmRlc3RpbmF0aW9uID0gbmV3IENvbnN1bWVyT2JzZXJ2ZXIocGFydGlhbE9ic2VydmVyKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICByZXR1cm4gU2FmZVN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbmV4cG9ydCB7IFNhZmVTdWJzY3JpYmVyIH07XG5mdW5jdGlvbiBoYW5kbGVVbmhhbmRsZWRFcnJvcihlcnJvcikge1xuICAgIGlmIChjb25maWcudXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZykge1xuICAgICAgICBjYXB0dXJlRXJyb3IoZXJyb3IpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmVwb3J0VW5oYW5kbGVkRXJyb3IoZXJyb3IpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGRlZmF1bHRFcnJvckhhbmRsZXIoZXJyKSB7XG4gICAgdGhyb3cgZXJyO1xufVxuZnVuY3Rpb24gaGFuZGxlU3RvcHBlZE5vdGlmaWNhdGlvbihub3RpZmljYXRpb24sIHN1YnNjcmliZXIpIHtcbiAgICB2YXIgb25TdG9wcGVkTm90aWZpY2F0aW9uID0gY29uZmlnLm9uU3RvcHBlZE5vdGlmaWNhdGlvbjtcbiAgICBvblN0b3BwZWROb3RpZmljYXRpb24gJiYgdGltZW91dFByb3ZpZGVyLnNldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyByZXR1cm4gb25TdG9wcGVkTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbiwgc3Vic2NyaWJlcik7IH0pO1xufVxuZXhwb3J0IHZhciBFTVBUWV9PQlNFUlZFUiA9IHtcbiAgICBjbG9zZWQ6IHRydWUsXG4gICAgbmV4dDogbm9vcCxcbiAgICBlcnJvcjogZGVmYXVsdEVycm9ySGFuZGxlcixcbiAgICBjb21wbGV0ZTogbm9vcCxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TdWJzY3JpYmVyLmpzLm1hcCIsImV4cG9ydCB2YXIgb2JzZXJ2YWJsZSA9IChmdW5jdGlvbiAoKSB7IHJldHVybiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wub2JzZXJ2YWJsZSkgfHwgJ0BAb2JzZXJ2YWJsZSc7IH0pKCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vYnNlcnZhYmxlLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBpZGVudGl0eSh4KSB7XG4gICAgcmV0dXJuIHg7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pZGVudGl0eS5qcy5tYXAiLCJpbXBvcnQgeyBTYWZlU3Vic2NyaWJlciwgU3Vic2NyaWJlciB9IGZyb20gJy4vU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBpc1N1YnNjcmlwdGlvbiB9IGZyb20gJy4vU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IG9ic2VydmFibGUgYXMgU3ltYm9sX29ic2VydmFibGUgfSBmcm9tICcuL3N5bWJvbC9vYnNlcnZhYmxlJztcbmltcG9ydCB7IHBpcGVGcm9tQXJyYXkgfSBmcm9tICcuL3V0aWwvcGlwZSc7XG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICcuL2NvbmZpZyc7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi91dGlsL2lzRnVuY3Rpb24nO1xuaW1wb3J0IHsgZXJyb3JDb250ZXh0IH0gZnJvbSAnLi91dGlsL2Vycm9yQ29udGV4dCc7XG52YXIgT2JzZXJ2YWJsZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gT2JzZXJ2YWJsZShzdWJzY3JpYmUpIHtcbiAgICAgICAgaWYgKHN1YnNjcmliZSkge1xuICAgICAgICAgICAgdGhpcy5fc3Vic2NyaWJlID0gc3Vic2NyaWJlO1xuICAgICAgICB9XG4gICAgfVxuICAgIE9ic2VydmFibGUucHJvdG90eXBlLmxpZnQgPSBmdW5jdGlvbiAob3BlcmF0b3IpIHtcbiAgICAgICAgdmFyIG9ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZSgpO1xuICAgICAgICBvYnNlcnZhYmxlLnNvdXJjZSA9IHRoaXM7XG4gICAgICAgIG9ic2VydmFibGUub3BlcmF0b3IgPSBvcGVyYXRvcjtcbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGU7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbiAob2JzZXJ2ZXJPck5leHQsIGVycm9yLCBjb21wbGV0ZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgc3Vic2NyaWJlciA9IGlzU3Vic2NyaWJlcihvYnNlcnZlck9yTmV4dCkgPyBvYnNlcnZlck9yTmV4dCA6IG5ldyBTYWZlU3Vic2NyaWJlcihvYnNlcnZlck9yTmV4dCwgZXJyb3IsIGNvbXBsZXRlKTtcbiAgICAgICAgZXJyb3JDb250ZXh0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IF90aGlzLCBvcGVyYXRvciA9IF9hLm9wZXJhdG9yLCBzb3VyY2UgPSBfYS5zb3VyY2U7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmFkZChvcGVyYXRvclxuICAgICAgICAgICAgICAgID9cbiAgICAgICAgICAgICAgICAgICAgb3BlcmF0b3IuY2FsbChzdWJzY3JpYmVyLCBzb3VyY2UpXG4gICAgICAgICAgICAgICAgOiBzb3VyY2VcbiAgICAgICAgICAgICAgICAgICAgP1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3N1YnNjcmliZShzdWJzY3JpYmVyKVxuICAgICAgICAgICAgICAgICAgICA6XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fdHJ5U3Vic2NyaWJlKHN1YnNjcmliZXIpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBzdWJzY3JpYmVyO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUuX3RyeVN1YnNjcmliZSA9IGZ1bmN0aW9uIChzaW5rKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc3Vic2NyaWJlKHNpbmspO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHNpbmsuZXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIChuZXh0LCBwcm9taXNlQ3Rvcikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBwcm9taXNlQ3RvciA9IGdldFByb21pc2VDdG9yKHByb21pc2VDdG9yKTtcbiAgICAgICAgcmV0dXJuIG5ldyBwcm9taXNlQ3RvcihmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICB2YXIgc3Vic2NyaWJlciA9IG5ldyBTYWZlU3Vic2NyaWJlcih7XG4gICAgICAgICAgICAgICAgbmV4dDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZXJyb3I6IHJlamVjdCxcbiAgICAgICAgICAgICAgICBjb21wbGV0ZTogcmVzb2x2ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgX3RoaXMuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLl9zdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHJldHVybiAoX2EgPSB0aGlzLnNvdXJjZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlW1N5bWJvbF9vYnNlcnZhYmxlXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5waXBlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb3BlcmF0aW9ucyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgb3BlcmF0aW9uc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwaXBlRnJvbUFycmF5KG9wZXJhdGlvbnMpKHRoaXMpO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUudG9Qcm9taXNlID0gZnVuY3Rpb24gKHByb21pc2VDdG9yKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHByb21pc2VDdG9yID0gZ2V0UHJvbWlzZUN0b3IocHJvbWlzZUN0b3IpO1xuICAgICAgICByZXR1cm4gbmV3IHByb21pc2VDdG9yKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZTtcbiAgICAgICAgICAgIF90aGlzLnN1YnNjcmliZShmdW5jdGlvbiAoeCkgeyByZXR1cm4gKHZhbHVlID0geCk7IH0sIGZ1bmN0aW9uIChlcnIpIHsgcmV0dXJuIHJlamVjdChlcnIpOyB9LCBmdW5jdGlvbiAoKSB7IHJldHVybiByZXNvbHZlKHZhbHVlKTsgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5jcmVhdGUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlKSB7XG4gICAgICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShzdWJzY3JpYmUpO1xuICAgIH07XG4gICAgcmV0dXJuIE9ic2VydmFibGU7XG59KCkpO1xuZXhwb3J0IHsgT2JzZXJ2YWJsZSB9O1xuZnVuY3Rpb24gZ2V0UHJvbWlzZUN0b3IocHJvbWlzZUN0b3IpIHtcbiAgICB2YXIgX2E7XG4gICAgcmV0dXJuIChfYSA9IHByb21pc2VDdG9yICE9PSBudWxsICYmIHByb21pc2VDdG9yICE9PSB2b2lkIDAgPyBwcm9taXNlQ3RvciA6IGNvbmZpZy5Qcm9taXNlKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBQcm9taXNlO1xufVxuZnVuY3Rpb24gaXNPYnNlcnZlcih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAmJiBpc0Z1bmN0aW9uKHZhbHVlLm5leHQpICYmIGlzRnVuY3Rpb24odmFsdWUuZXJyb3IpICYmIGlzRnVuY3Rpb24odmFsdWUuY29tcGxldGUpO1xufVxuZnVuY3Rpb24gaXNTdWJzY3JpYmVyKHZhbHVlKSB7XG4gICAgcmV0dXJuICh2YWx1ZSAmJiB2YWx1ZSBpbnN0YW5jZW9mIFN1YnNjcmliZXIpIHx8IChpc09ic2VydmVyKHZhbHVlKSAmJiBpc1N1YnNjcmlwdGlvbih2YWx1ZSkpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9T2JzZXJ2YWJsZS5qcy5tYXAiLCJpbXBvcnQgeyBpZGVudGl0eSB9IGZyb20gJy4vaWRlbnRpdHknO1xuZXhwb3J0IGZ1bmN0aW9uIHBpcGUoKSB7XG4gICAgdmFyIGZucyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGZuc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICByZXR1cm4gcGlwZUZyb21BcnJheShmbnMpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBpcGVGcm9tQXJyYXkoZm5zKSB7XG4gICAgaWYgKGZucy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGlkZW50aXR5O1xuICAgIH1cbiAgICBpZiAoZm5zLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICByZXR1cm4gZm5zWzBdO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gcGlwZWQoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGZucy5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIGZuKSB7IHJldHVybiBmbihwcmV2KTsgfSwgaW5wdXQpO1xuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1waXBlLmpzLm1hcCIsImltcG9ydCB7IG9ic2VydmFibGUgYXMgU3ltYm9sX29ic2VydmFibGUgfSBmcm9tICcuLi9zeW1ib2wvb2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi9pc0Z1bmN0aW9uJztcbmV4cG9ydCBmdW5jdGlvbiBpc0ludGVyb3BPYnNlcnZhYmxlKGlucHV0KSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24oaW5wdXRbU3ltYm9sX29ic2VydmFibGVdKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzSW50ZXJvcE9ic2VydmFibGUuanMubWFwIiwiaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vaXNGdW5jdGlvbic7XG5leHBvcnQgZnVuY3Rpb24gaXNBc3luY0l0ZXJhYmxlKG9iaikge1xuICAgIHJldHVybiBTeW1ib2wuYXN5bmNJdGVyYXRvciAmJiBpc0Z1bmN0aW9uKG9iaiA9PT0gbnVsbCB8fCBvYmogPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9ialtTeW1ib2wuYXN5bmNJdGVyYXRvcl0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNBc3luY0l0ZXJhYmxlLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBjcmVhdGVJbnZhbGlkT2JzZXJ2YWJsZVR5cGVFcnJvcihpbnB1dCkge1xuICAgIHJldHVybiBuZXcgVHlwZUVycm9yKFwiWW91IHByb3ZpZGVkIFwiICsgKGlucHV0ICE9PSBudWxsICYmIHR5cGVvZiBpbnB1dCA9PT0gJ29iamVjdCcgPyAnYW4gaW52YWxpZCBvYmplY3QnIDogXCInXCIgKyBpbnB1dCArIFwiJ1wiKSArIFwiIHdoZXJlIGEgc3RyZWFtIHdhcyBleHBlY3RlZC4gWW91IGNhbiBwcm92aWRlIGFuIE9ic2VydmFibGUsIFByb21pc2UsIFJlYWRhYmxlU3RyZWFtLCBBcnJheSwgQXN5bmNJdGVyYWJsZSwgb3IgSXRlcmFibGUuXCIpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGhyb3dVbm9ic2VydmFibGVFcnJvci5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gZ2V0U3ltYm9sSXRlcmF0b3IoKSB7XG4gICAgaWYgKHR5cGVvZiBTeW1ib2wgIT09ICdmdW5jdGlvbicgfHwgIVN5bWJvbC5pdGVyYXRvcikge1xuICAgICAgICByZXR1cm4gJ0BAaXRlcmF0b3InO1xuICAgIH1cbiAgICByZXR1cm4gU3ltYm9sLml0ZXJhdG9yO1xufVxuZXhwb3J0IHZhciBpdGVyYXRvciA9IGdldFN5bWJvbEl0ZXJhdG9yKCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pdGVyYXRvci5qcy5tYXAiLCJpbXBvcnQgeyBpdGVyYXRvciBhcyBTeW1ib2xfaXRlcmF0b3IgfSBmcm9tICcuLi9zeW1ib2wvaXRlcmF0b3InO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vaXNGdW5jdGlvbic7XG5leHBvcnQgZnVuY3Rpb24gaXNJdGVyYWJsZShpbnB1dCkge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKGlucHV0ID09PSBudWxsIHx8IGlucHV0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBpbnB1dFtTeW1ib2xfaXRlcmF0b3JdKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzSXRlcmFibGUuanMubWFwIiwiaW1wb3J0IHsgX19hc3luY0dlbmVyYXRvciwgX19hd2FpdCwgX19nZW5lcmF0b3IgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL2lzRnVuY3Rpb24nO1xuZXhwb3J0IGZ1bmN0aW9uIHJlYWRhYmxlU3RyZWFtTGlrZVRvQXN5bmNHZW5lcmF0b3IocmVhZGFibGVTdHJlYW0pIHtcbiAgICByZXR1cm4gX19hc3luY0dlbmVyYXRvcih0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uIHJlYWRhYmxlU3RyZWFtTGlrZVRvQXN5bmNHZW5lcmF0b3JfMSgpIHtcbiAgICAgICAgdmFyIHJlYWRlciwgX2EsIHZhbHVlLCBkb25lO1xuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKF9iLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIgPSByZWFkYWJsZVN0cmVhbS5nZXRSZWFkZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgX2IubGFiZWwgPSAxO1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgX2IudHJ5cy5wdXNoKFsxLCAsIDksIDEwXSk7XG4gICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gMjtcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGlmICghdHJ1ZSkgcmV0dXJuIFszLCA4XTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0LCBfX2F3YWl0KHJlYWRlci5yZWFkKCkpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIF9hID0gX2Iuc2VudCgpLCB2YWx1ZSA9IF9hLnZhbHVlLCBkb25lID0gX2EuZG9uZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFkb25lKSByZXR1cm4gWzMsIDVdO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQsIF9fYXdhaXQodm9pZCAwKV07XG4gICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzIsIF9iLnNlbnQoKV07XG4gICAgICAgICAgICAgICAgY2FzZSA1OiByZXR1cm4gWzQsIF9fYXdhaXQodmFsdWUpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDY6IHJldHVybiBbNCwgX2Iuc2VudCgpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgICAgIF9iLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszLCAyXTtcbiAgICAgICAgICAgICAgICBjYXNlIDg6IHJldHVybiBbMywgMTBdO1xuICAgICAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnJlbGVhc2VMb2NrKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbN107XG4gICAgICAgICAgICAgICAgY2FzZSAxMDogcmV0dXJuIFsyXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNSZWFkYWJsZVN0cmVhbUxpa2Uob2JqKSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24ob2JqID09PSBudWxsIHx8IG9iaiA9PT0gdm9pZCAwID8gdm9pZCAwIDogb2JqLmdldFJlYWRlcik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc1JlYWRhYmxlU3RyZWFtTGlrZS5qcy5tYXAiLCJpbXBvcnQgeyBfX2FzeW5jVmFsdWVzLCBfX2F3YWl0ZXIsIF9fZ2VuZXJhdG9yLCBfX3ZhbHVlcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgaXNBcnJheUxpa2UgfSBmcm9tICcuLi91dGlsL2lzQXJyYXlMaWtlJztcbmltcG9ydCB7IGlzUHJvbWlzZSB9IGZyb20gJy4uL3V0aWwvaXNQcm9taXNlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IGlzSW50ZXJvcE9ic2VydmFibGUgfSBmcm9tICcuLi91dGlsL2lzSW50ZXJvcE9ic2VydmFibGUnO1xuaW1wb3J0IHsgaXNBc3luY0l0ZXJhYmxlIH0gZnJvbSAnLi4vdXRpbC9pc0FzeW5jSXRlcmFibGUnO1xuaW1wb3J0IHsgY3JlYXRlSW52YWxpZE9ic2VydmFibGVUeXBlRXJyb3IgfSBmcm9tICcuLi91dGlsL3Rocm93VW5vYnNlcnZhYmxlRXJyb3InO1xuaW1wb3J0IHsgaXNJdGVyYWJsZSB9IGZyb20gJy4uL3V0aWwvaXNJdGVyYWJsZSc7XG5pbXBvcnQgeyBpc1JlYWRhYmxlU3RyZWFtTGlrZSwgcmVhZGFibGVTdHJlYW1MaWtlVG9Bc3luY0dlbmVyYXRvciB9IGZyb20gJy4uL3V0aWwvaXNSZWFkYWJsZVN0cmVhbUxpa2UnO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4uL3V0aWwvaXNGdW5jdGlvbic7XG5pbXBvcnQgeyByZXBvcnRVbmhhbmRsZWRFcnJvciB9IGZyb20gJy4uL3V0aWwvcmVwb3J0VW5oYW5kbGVkRXJyb3InO1xuaW1wb3J0IHsgb2JzZXJ2YWJsZSBhcyBTeW1ib2xfb2JzZXJ2YWJsZSB9IGZyb20gJy4uL3N5bWJvbC9vYnNlcnZhYmxlJztcbmV4cG9ydCBmdW5jdGlvbiBpbm5lckZyb20oaW5wdXQpIHtcbiAgICBpZiAoaW5wdXQgaW5zdGFuY2VvZiBPYnNlcnZhYmxlKSB7XG4gICAgICAgIHJldHVybiBpbnB1dDtcbiAgICB9XG4gICAgaWYgKGlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgaWYgKGlzSW50ZXJvcE9ic2VydmFibGUoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZnJvbUludGVyb3BPYnNlcnZhYmxlKGlucHV0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNBcnJheUxpa2UoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZnJvbUFycmF5TGlrZShpbnB1dCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzUHJvbWlzZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmcm9tUHJvbWlzZShpbnB1dCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQXN5bmNJdGVyYWJsZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmcm9tQXN5bmNJdGVyYWJsZShpbnB1dCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzSXRlcmFibGUoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZnJvbUl0ZXJhYmxlKGlucHV0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNSZWFkYWJsZVN0cmVhbUxpa2UoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZnJvbVJlYWRhYmxlU3RyZWFtTGlrZShpbnB1dCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGhyb3cgY3JlYXRlSW52YWxpZE9ic2VydmFibGVUeXBlRXJyb3IoaW5wdXQpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZyb21JbnRlcm9wT2JzZXJ2YWJsZShvYmopIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIG9icyA9IG9ialtTeW1ib2xfb2JzZXJ2YWJsZV0oKTtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24ob2JzLnN1YnNjcmliZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBvYnMuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Byb3ZpZGVkIG9iamVjdCBkb2VzIG5vdCBjb3JyZWN0bHkgaW1wbGVtZW50IFN5bWJvbC5vYnNlcnZhYmxlJyk7XG4gICAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZnJvbUFycmF5TGlrZShhcnJheSkge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aCAmJiAhc3Vic2NyaWJlci5jbG9zZWQ7IGkrKykge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KGFycmF5W2ldKTtcbiAgICAgICAgfVxuICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZnJvbVByb21pc2UocHJvbWlzZSkge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICBwcm9taXNlXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmICghc3Vic2NyaWJlci5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZnVuY3Rpb24gKGVycikgeyByZXR1cm4gc3Vic2NyaWJlci5lcnJvcihlcnIpOyB9KVxuICAgICAgICAgICAgLnRoZW4obnVsbCwgcmVwb3J0VW5oYW5kbGVkRXJyb3IpO1xuICAgIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZyb21JdGVyYWJsZShpdGVyYWJsZSkge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgZV8xLCBfYTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZvciAodmFyIGl0ZXJhYmxlXzEgPSBfX3ZhbHVlcyhpdGVyYWJsZSksIGl0ZXJhYmxlXzFfMSA9IGl0ZXJhYmxlXzEubmV4dCgpOyAhaXRlcmFibGVfMV8xLmRvbmU7IGl0ZXJhYmxlXzFfMSA9IGl0ZXJhYmxlXzEubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gaXRlcmFibGVfMV8xLnZhbHVlO1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKHN1YnNjcmliZXIuY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVfMV8xKSB7IGVfMSA9IHsgZXJyb3I6IGVfMV8xIH07IH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmIChpdGVyYWJsZV8xXzEgJiYgIWl0ZXJhYmxlXzFfMS5kb25lICYmIChfYSA9IGl0ZXJhYmxlXzEucmV0dXJuKSkgX2EuY2FsbChpdGVyYWJsZV8xKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8xKSB0aHJvdyBlXzEuZXJyb3I7IH1cbiAgICAgICAgfVxuICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZnJvbUFzeW5jSXRlcmFibGUoYXN5bmNJdGVyYWJsZSkge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICBwcm9jZXNzKGFzeW5jSXRlcmFibGUsIHN1YnNjcmliZXIpLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHsgcmV0dXJuIHN1YnNjcmliZXIuZXJyb3IoZXJyKTsgfSk7XG4gICAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZnJvbVJlYWRhYmxlU3RyZWFtTGlrZShyZWFkYWJsZVN0cmVhbSkge1xuICAgIHJldHVybiBmcm9tQXN5bmNJdGVyYWJsZShyZWFkYWJsZVN0cmVhbUxpa2VUb0FzeW5jR2VuZXJhdG9yKHJlYWRhYmxlU3RyZWFtKSk7XG59XG5mdW5jdGlvbiBwcm9jZXNzKGFzeW5jSXRlcmFibGUsIHN1YnNjcmliZXIpIHtcbiAgICB2YXIgYXN5bmNJdGVyYWJsZV8xLCBhc3luY0l0ZXJhYmxlXzFfMTtcbiAgICB2YXIgZV8yLCBfYTtcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB2YWx1ZSwgZV8yXzE7XG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoX2IubGFiZWwpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIF9iLnRyeXMucHVzaChbMCwgNSwgNiwgMTFdKTtcbiAgICAgICAgICAgICAgICAgICAgYXN5bmNJdGVyYWJsZV8xID0gX19hc3luY1ZhbHVlcyhhc3luY0l0ZXJhYmxlKTtcbiAgICAgICAgICAgICAgICAgICAgX2IubGFiZWwgPSAxO1xuICAgICAgICAgICAgICAgIGNhc2UgMTogcmV0dXJuIFs0LCBhc3luY0l0ZXJhYmxlXzEubmV4dCgpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGlmICghKGFzeW5jSXRlcmFibGVfMV8xID0gX2Iuc2VudCgpLCAhYXN5bmNJdGVyYWJsZV8xXzEuZG9uZSkpIHJldHVybiBbMywgNF07XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gYXN5bmNJdGVyYWJsZV8xXzEudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdWJzY3JpYmVyLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDM7XG4gICAgICAgICAgICAgICAgY2FzZSAzOiByZXR1cm4gWzMsIDFdO1xuICAgICAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFszLCAxMV07XG4gICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICBlXzJfMSA9IF9iLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgZV8yID0geyBlcnJvcjogZV8yXzEgfTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszLCAxMV07XG4gICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICBfYi50cnlzLnB1c2goWzYsICwgOSwgMTBdKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoYXN5bmNJdGVyYWJsZV8xXzEgJiYgIWFzeW5jSXRlcmFibGVfMV8xLmRvbmUgJiYgKF9hID0gYXN5bmNJdGVyYWJsZV8xLnJldHVybikpKSByZXR1cm4gWzMsIDhdO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQsIF9hLmNhbGwoYXN5bmNJdGVyYWJsZV8xKV07XG4gICAgICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgICAgICBfYi5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gODtcbiAgICAgICAgICAgICAgICBjYXNlIDg6IHJldHVybiBbMywgMTBdO1xuICAgICAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVfMikgdGhyb3cgZV8yLmVycm9yO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzddO1xuICAgICAgICAgICAgICAgIGNhc2UgMTA6IHJldHVybiBbN107XG4gICAgICAgICAgICAgICAgY2FzZSAxMTpcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzJdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlubmVyRnJvbS5qcy5tYXAiLCJpbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi9pc0Z1bmN0aW9uJztcbmV4cG9ydCBmdW5jdGlvbiBoYXNMaWZ0KHNvdXJjZSkge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKHNvdXJjZSA9PT0gbnVsbCB8fCBzb3VyY2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNvdXJjZS5saWZ0KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBvcGVyYXRlKGluaXQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgICBpZiAoaGFzTGlmdChzb3VyY2UpKSB7XG4gICAgICAgICAgICByZXR1cm4gc291cmNlLmxpZnQoZnVuY3Rpb24gKGxpZnRlZFNvdXJjZSkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpbml0KGxpZnRlZFNvdXJjZSwgdGhpcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1VuYWJsZSB0byBsaWZ0IHVua25vd24gT2JzZXJ2YWJsZSB0eXBlJyk7XG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxpZnQuanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJzY3JpYmVyIH0gZnJvbSAnLi4vU3Vic2NyaWJlcic7XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBvbk5leHQsIG9uQ29tcGxldGUsIG9uRXJyb3IsIG9uRmluYWxpemUpIHtcbiAgICByZXR1cm4gbmV3IE9wZXJhdG9yU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgb25OZXh0LCBvbkNvbXBsZXRlLCBvbkVycm9yLCBvbkZpbmFsaXplKTtcbn1cbnZhciBPcGVyYXRvclN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhPcGVyYXRvclN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gT3BlcmF0b3JTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBvbk5leHQsIG9uQ29tcGxldGUsIG9uRXJyb3IsIG9uRmluYWxpemUsIHNob3VsZFVuc3Vic2NyaWJlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5vbkZpbmFsaXplID0gb25GaW5hbGl6ZTtcbiAgICAgICAgX3RoaXMuc2hvdWxkVW5zdWJzY3JpYmUgPSBzaG91bGRVbnN1YnNjcmliZTtcbiAgICAgICAgX3RoaXMuX25leHQgPSBvbk5leHRcbiAgICAgICAgICAgID8gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgb25OZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDogX3N1cGVyLnByb3RvdHlwZS5fbmV4dDtcbiAgICAgICAgX3RoaXMuX2Vycm9yID0gb25FcnJvclxuICAgICAgICAgICAgPyBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiBfc3VwZXIucHJvdG90eXBlLl9lcnJvcjtcbiAgICAgICAgX3RoaXMuX2NvbXBsZXRlID0gb25Db21wbGV0ZVxuICAgICAgICAgICAgPyBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgb25Db21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiBfc3VwZXIucHJvdG90eXBlLl9jb21wbGV0ZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPcGVyYXRvclN1YnNjcmliZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmICghdGhpcy5zaG91bGRVbnN1YnNjcmliZSB8fCB0aGlzLnNob3VsZFVuc3Vic2NyaWJlKCkpIHtcbiAgICAgICAgICAgIHZhciBjbG9zZWRfMSA9IHRoaXMuY2xvc2VkO1xuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS51bnN1YnNjcmliZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgIWNsb3NlZF8xICYmICgoX2EgPSB0aGlzLm9uRmluYWxpemUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKHRoaXMpKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIE9wZXJhdG9yU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuZXhwb3J0IHsgT3BlcmF0b3JTdWJzY3JpYmVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1PcGVyYXRvclN1YnNjcmliZXIuanMubWFwIiwiaW1wb3J0IHsgb3BlcmF0ZSB9IGZyb20gJy4uL3V0aWwvbGlmdCc7XG5pbXBvcnQgeyBjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIgfSBmcm9tICcuL09wZXJhdG9yU3Vic2NyaWJlcic7XG5leHBvcnQgZnVuY3Rpb24gbWFwKHByb2plY3QsIHRoaXNBcmcpIHtcbiAgICByZXR1cm4gb3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHByb2plY3QuY2FsbCh0aGlzQXJnLCB2YWx1ZSwgaW5kZXgrKykpO1xuICAgICAgICB9KSk7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYXAuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGV4ZWN1dGVTY2hlZHVsZShwYXJlbnRTdWJzY3JpcHRpb24sIHNjaGVkdWxlciwgd29yaywgZGVsYXksIHJlcGVhdCkge1xuICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgIGlmIChyZXBlYXQgPT09IHZvaWQgMCkgeyByZXBlYXQgPSBmYWxzZTsgfVxuICAgIHZhciBzY2hlZHVsZVN1YnNjcmlwdGlvbiA9IHNjaGVkdWxlci5zY2hlZHVsZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHdvcmsoKTtcbiAgICAgICAgaWYgKHJlcGVhdCkge1xuICAgICAgICAgICAgcGFyZW50U3Vic2NyaXB0aW9uLmFkZCh0aGlzLnNjaGVkdWxlKG51bGwsIGRlbGF5KSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICB9LCBkZWxheSk7XG4gICAgcGFyZW50U3Vic2NyaXB0aW9uLmFkZChzY2hlZHVsZVN1YnNjcmlwdGlvbik7XG4gICAgaWYgKCFyZXBlYXQpIHtcbiAgICAgICAgcmV0dXJuIHNjaGVkdWxlU3Vic2NyaXB0aW9uO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV4ZWN1dGVTY2hlZHVsZS5qcy5tYXAiLCJpbXBvcnQgeyBtYXAgfSBmcm9tICcuL21hcCc7XG5pbXBvcnQgeyBpbm5lckZyb20gfSBmcm9tICcuLi9vYnNlcnZhYmxlL2lubmVyRnJvbSc7XG5pbXBvcnQgeyBvcGVyYXRlIH0gZnJvbSAnLi4vdXRpbC9saWZ0JztcbmltcG9ydCB7IG1lcmdlSW50ZXJuYWxzIH0gZnJvbSAnLi9tZXJnZUludGVybmFscyc7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi4vdXRpbC9pc0Z1bmN0aW9uJztcbmV4cG9ydCBmdW5jdGlvbiBtZXJnZU1hcChwcm9qZWN0LCByZXN1bHRTZWxlY3RvciwgY29uY3VycmVudCkge1xuICAgIGlmIChjb25jdXJyZW50ID09PSB2b2lkIDApIHsgY29uY3VycmVudCA9IEluZmluaXR5OyB9XG4gICAgaWYgKGlzRnVuY3Rpb24ocmVzdWx0U2VsZWN0b3IpKSB7XG4gICAgICAgIHJldHVybiBtZXJnZU1hcChmdW5jdGlvbiAoYSwgaSkgeyByZXR1cm4gbWFwKGZ1bmN0aW9uIChiLCBpaSkgeyByZXR1cm4gcmVzdWx0U2VsZWN0b3IoYSwgYiwgaSwgaWkpOyB9KShpbm5lckZyb20ocHJvamVjdChhLCBpKSkpOyB9LCBjb25jdXJyZW50KTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIHJlc3VsdFNlbGVjdG9yID09PSAnbnVtYmVyJykge1xuICAgICAgICBjb25jdXJyZW50ID0gcmVzdWx0U2VsZWN0b3I7XG4gICAgfVxuICAgIHJldHVybiBvcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHsgcmV0dXJuIG1lcmdlSW50ZXJuYWxzKHNvdXJjZSwgc3Vic2NyaWJlciwgcHJvamVjdCwgY29uY3VycmVudCk7IH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVyZ2VNYXAuanMubWFwIiwiaW1wb3J0IHsgaW5uZXJGcm9tIH0gZnJvbSAnLi4vb2JzZXJ2YWJsZS9pbm5lckZyb20nO1xuaW1wb3J0IHsgZXhlY3V0ZVNjaGVkdWxlIH0gZnJvbSAnLi4vdXRpbC9leGVjdXRlU2NoZWR1bGUnO1xuaW1wb3J0IHsgY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyIH0gZnJvbSAnLi9PcGVyYXRvclN1YnNjcmliZXInO1xuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlSW50ZXJuYWxzKHNvdXJjZSwgc3Vic2NyaWJlciwgcHJvamVjdCwgY29uY3VycmVudCwgb25CZWZvcmVOZXh0LCBleHBhbmQsIGlubmVyU3ViU2NoZWR1bGVyLCBhZGRpdGlvbmFsRmluYWxpemVyKSB7XG4gICAgdmFyIGJ1ZmZlciA9IFtdO1xuICAgIHZhciBhY3RpdmUgPSAwO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGlzQ29tcGxldGUgPSBmYWxzZTtcbiAgICB2YXIgY2hlY2tDb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGlzQ29tcGxldGUgJiYgIWJ1ZmZlci5sZW5ndGggJiYgIWFjdGl2ZSkge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICB2YXIgb3V0ZXJOZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiAoYWN0aXZlIDwgY29uY3VycmVudCA/IGRvSW5uZXJTdWIodmFsdWUpIDogYnVmZmVyLnB1c2godmFsdWUpKTsgfTtcbiAgICB2YXIgZG9Jbm5lclN1YiA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBleHBhbmQgJiYgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgYWN0aXZlKys7XG4gICAgICAgIHZhciBpbm5lckNvbXBsZXRlID0gZmFsc2U7XG4gICAgICAgIGlubmVyRnJvbShwcm9qZWN0KHZhbHVlLCBpbmRleCsrKSkuc3Vic2NyaWJlKGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAoaW5uZXJWYWx1ZSkge1xuICAgICAgICAgICAgb25CZWZvcmVOZXh0ID09PSBudWxsIHx8IG9uQmVmb3JlTmV4dCA9PT0gdm9pZCAwID8gdm9pZCAwIDogb25CZWZvcmVOZXh0KGlubmVyVmFsdWUpO1xuICAgICAgICAgICAgaWYgKGV4cGFuZCkge1xuICAgICAgICAgICAgICAgIG91dGVyTmV4dChpbm5lclZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChpbm5lclZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaW5uZXJDb21wbGV0ZSA9IHRydWU7XG4gICAgICAgIH0sIHVuZGVmaW5lZCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGlubmVyQ29tcGxldGUpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBhY3RpdmUtLTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9sb29wXzEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYnVmZmVyZWRWYWx1ZSA9IGJ1ZmZlci5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlubmVyU3ViU2NoZWR1bGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhlY3V0ZVNjaGVkdWxlKHN1YnNjcmliZXIsIGlubmVyU3ViU2NoZWR1bGVyLCBmdW5jdGlvbiAoKSB7IHJldHVybiBkb0lubmVyU3ViKGJ1ZmZlcmVkVmFsdWUpOyB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvSW5uZXJTdWIoYnVmZmVyZWRWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChidWZmZXIubGVuZ3RoICYmIGFjdGl2ZSA8IGNvbmN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9sb29wXzEoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjaGVja0NvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgIH07XG4gICAgc291cmNlLnN1YnNjcmliZShjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgb3V0ZXJOZXh0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlzQ29tcGxldGUgPSB0cnVlO1xuICAgICAgICBjaGVja0NvbXBsZXRlKCk7XG4gICAgfSkpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGFkZGl0aW9uYWxGaW5hbGl6ZXIgPT09IG51bGwgfHwgYWRkaXRpb25hbEZpbmFsaXplciA9PT0gdm9pZCAwID8gdm9pZCAwIDogYWRkaXRpb25hbEZpbmFsaXplcigpO1xuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXJnZUludGVybmFscy5qcy5tYXAiLCJpbXBvcnQgeyBfX3JlYWQsIF9fc3ByZWFkQXJyYXkgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IG1hcCB9IGZyb20gXCIuLi9vcGVyYXRvcnMvbWFwXCI7XG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBjYWxsT3JBcHBseShmbiwgYXJncykge1xuICAgIHJldHVybiBpc0FycmF5KGFyZ3MpID8gZm4uYXBwbHkodm9pZCAwLCBfX3NwcmVhZEFycmF5KFtdLCBfX3JlYWQoYXJncykpKSA6IGZuKGFyZ3MpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG1hcE9uZU9yTWFueUFyZ3MoZm4pIHtcbiAgICByZXR1cm4gbWFwKGZ1bmN0aW9uIChhcmdzKSB7IHJldHVybiBjYWxsT3JBcHBseShmbiwgYXJncyk7IH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWFwT25lT3JNYW55QXJncy5qcy5tYXAiLCJpbXBvcnQgeyBfX3JlYWQgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGlubmVyRnJvbSB9IGZyb20gJy4uL29ic2VydmFibGUvaW5uZXJGcm9tJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IG1lcmdlTWFwIH0gZnJvbSAnLi4vb3BlcmF0b3JzL21lcmdlTWFwJztcbmltcG9ydCB7IGlzQXJyYXlMaWtlIH0gZnJvbSAnLi4vdXRpbC9pc0FycmF5TGlrZSc7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi4vdXRpbC9pc0Z1bmN0aW9uJztcbmltcG9ydCB7IG1hcE9uZU9yTWFueUFyZ3MgfSBmcm9tICcuLi91dGlsL21hcE9uZU9yTWFueUFyZ3MnO1xudmFyIG5vZGVFdmVudEVtaXR0ZXJNZXRob2RzID0gWydhZGRMaXN0ZW5lcicsICdyZW1vdmVMaXN0ZW5lciddO1xudmFyIGV2ZW50VGFyZ2V0TWV0aG9kcyA9IFsnYWRkRXZlbnRMaXN0ZW5lcicsICdyZW1vdmVFdmVudExpc3RlbmVyJ107XG52YXIganF1ZXJ5TWV0aG9kcyA9IFsnb24nLCAnb2ZmJ107XG5leHBvcnQgZnVuY3Rpb24gZnJvbUV2ZW50KHRhcmdldCwgZXZlbnROYW1lLCBvcHRpb25zLCByZXN1bHRTZWxlY3Rvcikge1xuICAgIGlmIChpc0Z1bmN0aW9uKG9wdGlvbnMpKSB7XG4gICAgICAgIHJlc3VsdFNlbGVjdG9yID0gb3B0aW9ucztcbiAgICAgICAgb3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKHJlc3VsdFNlbGVjdG9yKSB7XG4gICAgICAgIHJldHVybiBmcm9tRXZlbnQodGFyZ2V0LCBldmVudE5hbWUsIG9wdGlvbnMpLnBpcGUobWFwT25lT3JNYW55QXJncyhyZXN1bHRTZWxlY3RvcikpO1xuICAgIH1cbiAgICB2YXIgX2EgPSBfX3JlYWQoaXNFdmVudFRhcmdldCh0YXJnZXQpXG4gICAgICAgID8gZXZlbnRUYXJnZXRNZXRob2RzLm1hcChmdW5jdGlvbiAobWV0aG9kTmFtZSkgeyByZXR1cm4gZnVuY3Rpb24gKGhhbmRsZXIpIHsgcmV0dXJuIHRhcmdldFttZXRob2ROYW1lXShldmVudE5hbWUsIGhhbmRsZXIsIG9wdGlvbnMpOyB9OyB9KVxuICAgICAgICA6XG4gICAgICAgICAgICBpc05vZGVTdHlsZUV2ZW50RW1pdHRlcih0YXJnZXQpXG4gICAgICAgICAgICAgICAgPyBub2RlRXZlbnRFbWl0dGVyTWV0aG9kcy5tYXAodG9Db21tb25IYW5kbGVyUmVnaXN0cnkodGFyZ2V0LCBldmVudE5hbWUpKVxuICAgICAgICAgICAgICAgIDogaXNKUXVlcnlTdHlsZUV2ZW50RW1pdHRlcih0YXJnZXQpXG4gICAgICAgICAgICAgICAgICAgID8ganF1ZXJ5TWV0aG9kcy5tYXAodG9Db21tb25IYW5kbGVyUmVnaXN0cnkodGFyZ2V0LCBldmVudE5hbWUpKVxuICAgICAgICAgICAgICAgICAgICA6IFtdLCAyKSwgYWRkID0gX2FbMF0sIHJlbW92ZSA9IF9hWzFdO1xuICAgIGlmICghYWRkKSB7XG4gICAgICAgIGlmIChpc0FycmF5TGlrZSh0YXJnZXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gbWVyZ2VNYXAoZnVuY3Rpb24gKHN1YlRhcmdldCkgeyByZXR1cm4gZnJvbUV2ZW50KHN1YlRhcmdldCwgZXZlbnROYW1lLCBvcHRpb25zKTsgfSkoaW5uZXJGcm9tKHRhcmdldCkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICghYWRkKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgZXZlbnQgdGFyZ2V0Jyk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgaGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzdWJzY3JpYmVyLm5leHQoMSA8IGFyZ3MubGVuZ3RoID8gYXJncyA6IGFyZ3NbMF0pO1xuICAgICAgICB9O1xuICAgICAgICBhZGQoaGFuZGxlcik7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiByZW1vdmUoaGFuZGxlcik7IH07XG4gICAgfSk7XG59XG5mdW5jdGlvbiB0b0NvbW1vbkhhbmRsZXJSZWdpc3RyeSh0YXJnZXQsIGV2ZW50TmFtZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAobWV0aG9kTmFtZSkgeyByZXR1cm4gZnVuY3Rpb24gKGhhbmRsZXIpIHsgcmV0dXJuIHRhcmdldFttZXRob2ROYW1lXShldmVudE5hbWUsIGhhbmRsZXIpOyB9OyB9O1xufVxuZnVuY3Rpb24gaXNOb2RlU3R5bGVFdmVudEVtaXR0ZXIodGFyZ2V0KSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24odGFyZ2V0LmFkZExpc3RlbmVyKSAmJiBpc0Z1bmN0aW9uKHRhcmdldC5yZW1vdmVMaXN0ZW5lcik7XG59XG5mdW5jdGlvbiBpc0pRdWVyeVN0eWxlRXZlbnRFbWl0dGVyKHRhcmdldCkge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKHRhcmdldC5vbikgJiYgaXNGdW5jdGlvbih0YXJnZXQub2ZmKTtcbn1cbmZ1bmN0aW9uIGlzRXZlbnRUYXJnZXQodGFyZ2V0KSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24odGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIpICYmIGlzRnVuY3Rpb24odGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZnJvbUV2ZW50LmpzLm1hcCIsImltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL2lzRnVuY3Rpb24nO1xuaW1wb3J0IHsgaXNTY2hlZHVsZXIgfSBmcm9tICcuL2lzU2NoZWR1bGVyJztcbmZ1bmN0aW9uIGxhc3QoYXJyKSB7XG4gICAgcmV0dXJuIGFyclthcnIubGVuZ3RoIC0gMV07XG59XG5leHBvcnQgZnVuY3Rpb24gcG9wUmVzdWx0U2VsZWN0b3IoYXJncykge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKGxhc3QoYXJncykpID8gYXJncy5wb3AoKSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwb3BTY2hlZHVsZXIoYXJncykge1xuICAgIHJldHVybiBpc1NjaGVkdWxlcihsYXN0KGFyZ3MpKSA/IGFyZ3MucG9wKCkgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gcG9wTnVtYmVyKGFyZ3MsIGRlZmF1bHRWYWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgbGFzdChhcmdzKSA9PT0gJ251bWJlcicgPyBhcmdzLnBvcCgpIDogZGVmYXVsdFZhbHVlO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXJncy5qcy5tYXAiLCJpbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi9pc0Z1bmN0aW9uJztcbmV4cG9ydCBmdW5jdGlvbiBpc1NjaGVkdWxlcih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAmJiBpc0Z1bmN0aW9uKHZhbHVlLnNjaGVkdWxlKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzU2NoZWR1bGVyLmpzLm1hcCIsImltcG9ydCB7IGV4ZWN1dGVTY2hlZHVsZSB9IGZyb20gJy4uL3V0aWwvZXhlY3V0ZVNjaGVkdWxlJztcbmltcG9ydCB7IG9wZXJhdGUgfSBmcm9tICcuLi91dGlsL2xpZnQnO1xuaW1wb3J0IHsgY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyIH0gZnJvbSAnLi9PcGVyYXRvclN1YnNjcmliZXInO1xuZXhwb3J0IGZ1bmN0aW9uIG9ic2VydmVPbihzY2hlZHVsZXIsIGRlbGF5KSB7XG4gICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHsgZGVsYXkgPSAwOyB9XG4gICAgcmV0dXJuIG9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIGV4ZWN1dGVTY2hlZHVsZShzdWJzY3JpYmVyLCBzY2hlZHVsZXIsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7IH0sIGRlbGF5KTsgfSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gZXhlY3V0ZVNjaGVkdWxlKHN1YnNjcmliZXIsIHNjaGVkdWxlciwgZnVuY3Rpb24gKCkgeyByZXR1cm4gc3Vic2NyaWJlci5jb21wbGV0ZSgpOyB9LCBkZWxheSk7IH0sIGZ1bmN0aW9uIChlcnIpIHsgcmV0dXJuIGV4ZWN1dGVTY2hlZHVsZShzdWJzY3JpYmVyLCBzY2hlZHVsZXIsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN1YnNjcmliZXIuZXJyb3IoZXJyKTsgfSwgZGVsYXkpOyB9KSk7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vYnNlcnZlT24uanMubWFwIiwiaW1wb3J0IHsgb3BlcmF0ZSB9IGZyb20gJy4uL3V0aWwvbGlmdCc7XG5leHBvcnQgZnVuY3Rpb24gc3Vic2NyaWJlT24oc2NoZWR1bGVyLCBkZWxheSkge1xuICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgIHJldHVybiBvcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgc3Vic2NyaWJlci5hZGQoc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUoc3Vic2NyaWJlcik7IH0sIGRlbGF5KSk7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdWJzY3JpYmVPbi5qcy5tYXAiLCJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBleGVjdXRlU2NoZWR1bGUgfSBmcm9tICcuLi91dGlsL2V4ZWN1dGVTY2hlZHVsZSc7XG5leHBvcnQgZnVuY3Rpb24gc2NoZWR1bGVBc3luY0l0ZXJhYmxlKGlucHV0LCBzY2hlZHVsZXIpIHtcbiAgICBpZiAoIWlucHV0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSXRlcmFibGUgY2Fubm90IGJlIG51bGwnKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIGV4ZWN1dGVTY2hlZHVsZShzdWJzY3JpYmVyLCBzY2hlZHVsZXIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBpdGVyYXRvciA9IGlucHV0W1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpO1xuICAgICAgICAgICAgZXhlY3V0ZVNjaGVkdWxlKHN1YnNjcmliZXIsIHNjaGVkdWxlciwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGl0ZXJhdG9yLm5leHQoKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5kb25lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQocmVzdWx0LnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSwgMCwgdHJ1ZSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVBc3luY0l0ZXJhYmxlLmpzLm1hcCIsImltcG9ydCB7IGNvbmNhdEFsbCB9IGZyb20gJy4uL29wZXJhdG9ycy9jb25jYXRBbGwnO1xuaW1wb3J0IHsgcG9wU2NoZWR1bGVyIH0gZnJvbSAnLi4vdXRpbC9hcmdzJztcbmltcG9ydCB7IGZyb20gfSBmcm9tICcuL2Zyb20nO1xuZXhwb3J0IGZ1bmN0aW9uIGNvbmNhdCgpIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbmNhdEFsbCgpKGZyb20oYXJncywgcG9wU2NoZWR1bGVyKGFyZ3MpKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25jYXQuanMubWFwIiwiaW1wb3J0IHsgc2NoZWR1bGVkIH0gZnJvbSAnLi4vc2NoZWR1bGVkL3NjaGVkdWxlZCc7XG5pbXBvcnQgeyBpbm5lckZyb20gfSBmcm9tICcuL2lubmVyRnJvbSc7XG5leHBvcnQgZnVuY3Rpb24gZnJvbShpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgcmV0dXJuIHNjaGVkdWxlciA/IHNjaGVkdWxlZChpbnB1dCwgc2NoZWR1bGVyKSA6IGlubmVyRnJvbShpbnB1dCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mcm9tLmpzLm1hcCIsImltcG9ydCB7IG1lcmdlTWFwIH0gZnJvbSAnLi9tZXJnZU1hcCc7XG5pbXBvcnQgeyBpZGVudGl0eSB9IGZyb20gJy4uL3V0aWwvaWRlbnRpdHknO1xuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlQWxsKGNvbmN1cnJlbnQpIHtcbiAgICBpZiAoY29uY3VycmVudCA9PT0gdm9pZCAwKSB7IGNvbmN1cnJlbnQgPSBJbmZpbml0eTsgfVxuICAgIHJldHVybiBtZXJnZU1hcChpZGVudGl0eSwgY29uY3VycmVudCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXJnZUFsbC5qcy5tYXAiLCJpbXBvcnQgeyBtZXJnZUFsbCB9IGZyb20gJy4vbWVyZ2VBbGwnO1xuZXhwb3J0IGZ1bmN0aW9uIGNvbmNhdEFsbCgpIHtcbiAgICByZXR1cm4gbWVyZ2VBbGwoMSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25jYXRBbGwuanMubWFwIiwiaW1wb3J0IHsgc2NoZWR1bGVPYnNlcnZhYmxlIH0gZnJvbSAnLi9zY2hlZHVsZU9ic2VydmFibGUnO1xuaW1wb3J0IHsgc2NoZWR1bGVQcm9taXNlIH0gZnJvbSAnLi9zY2hlZHVsZVByb21pc2UnO1xuaW1wb3J0IHsgc2NoZWR1bGVBcnJheSB9IGZyb20gJy4vc2NoZWR1bGVBcnJheSc7XG5pbXBvcnQgeyBzY2hlZHVsZUl0ZXJhYmxlIH0gZnJvbSAnLi9zY2hlZHVsZUl0ZXJhYmxlJztcbmltcG9ydCB7IHNjaGVkdWxlQXN5bmNJdGVyYWJsZSB9IGZyb20gJy4vc2NoZWR1bGVBc3luY0l0ZXJhYmxlJztcbmltcG9ydCB7IGlzSW50ZXJvcE9ic2VydmFibGUgfSBmcm9tICcuLi91dGlsL2lzSW50ZXJvcE9ic2VydmFibGUnO1xuaW1wb3J0IHsgaXNQcm9taXNlIH0gZnJvbSAnLi4vdXRpbC9pc1Byb21pc2UnO1xuaW1wb3J0IHsgaXNBcnJheUxpa2UgfSBmcm9tICcuLi91dGlsL2lzQXJyYXlMaWtlJztcbmltcG9ydCB7IGlzSXRlcmFibGUgfSBmcm9tICcuLi91dGlsL2lzSXRlcmFibGUnO1xuaW1wb3J0IHsgaXNBc3luY0l0ZXJhYmxlIH0gZnJvbSAnLi4vdXRpbC9pc0FzeW5jSXRlcmFibGUnO1xuaW1wb3J0IHsgY3JlYXRlSW52YWxpZE9ic2VydmFibGVUeXBlRXJyb3IgfSBmcm9tICcuLi91dGlsL3Rocm93VW5vYnNlcnZhYmxlRXJyb3InO1xuaW1wb3J0IHsgaXNSZWFkYWJsZVN0cmVhbUxpa2UgfSBmcm9tICcuLi91dGlsL2lzUmVhZGFibGVTdHJlYW1MaWtlJztcbmltcG9ydCB7IHNjaGVkdWxlUmVhZGFibGVTdHJlYW1MaWtlIH0gZnJvbSAnLi9zY2hlZHVsZVJlYWRhYmxlU3RyZWFtTGlrZSc7XG5leHBvcnQgZnVuY3Rpb24gc2NoZWR1bGVkKGlucHV0LCBzY2hlZHVsZXIpIHtcbiAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICBpZiAoaXNJbnRlcm9wT2JzZXJ2YWJsZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBzY2hlZHVsZU9ic2VydmFibGUoaW5wdXQsIHNjaGVkdWxlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQXJyYXlMaWtlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIHNjaGVkdWxlQXJyYXkoaW5wdXQsIHNjaGVkdWxlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzUHJvbWlzZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBzY2hlZHVsZVByb21pc2UoaW5wdXQsIHNjaGVkdWxlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQXN5bmNJdGVyYWJsZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBzY2hlZHVsZUFzeW5jSXRlcmFibGUoaW5wdXQsIHNjaGVkdWxlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzSXRlcmFibGUoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVJdGVyYWJsZShpbnB1dCwgc2NoZWR1bGVyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNSZWFkYWJsZVN0cmVhbUxpa2UoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVSZWFkYWJsZVN0cmVhbUxpa2UoaW5wdXQsIHNjaGVkdWxlcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGhyb3cgY3JlYXRlSW52YWxpZE9ic2VydmFibGVUeXBlRXJyb3IoaW5wdXQpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVkLmpzLm1hcCIsImltcG9ydCB7IGlubmVyRnJvbSB9IGZyb20gJy4uL29ic2VydmFibGUvaW5uZXJGcm9tJztcbmltcG9ydCB7IG9ic2VydmVPbiB9IGZyb20gJy4uL29wZXJhdG9ycy9vYnNlcnZlT24nO1xuaW1wb3J0IHsgc3Vic2NyaWJlT24gfSBmcm9tICcuLi9vcGVyYXRvcnMvc3Vic2NyaWJlT24nO1xuZXhwb3J0IGZ1bmN0aW9uIHNjaGVkdWxlT2JzZXJ2YWJsZShpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgcmV0dXJuIGlubmVyRnJvbShpbnB1dCkucGlwZShzdWJzY3JpYmVPbihzY2hlZHVsZXIpLCBvYnNlcnZlT24oc2NoZWR1bGVyKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2hlZHVsZU9ic2VydmFibGUuanMubWFwIiwiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuZXhwb3J0IGZ1bmN0aW9uIHNjaGVkdWxlQXJyYXkoaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgIHJldHVybiBzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGkgPT09IGlucHV0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChpbnB1dFtpKytdKTtcbiAgICAgICAgICAgICAgICBpZiAoIXN1YnNjcmliZXIuY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2NoZWR1bGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVBcnJheS5qcy5tYXAiLCJpbXBvcnQgeyBpbm5lckZyb20gfSBmcm9tICcuLi9vYnNlcnZhYmxlL2lubmVyRnJvbSc7XG5pbXBvcnQgeyBvYnNlcnZlT24gfSBmcm9tICcuLi9vcGVyYXRvcnMvb2JzZXJ2ZU9uJztcbmltcG9ydCB7IHN1YnNjcmliZU9uIH0gZnJvbSAnLi4vb3BlcmF0b3JzL3N1YnNjcmliZU9uJztcbmV4cG9ydCBmdW5jdGlvbiBzY2hlZHVsZVByb21pc2UoaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIHJldHVybiBpbm5lckZyb20oaW5wdXQpLnBpcGUoc3Vic2NyaWJlT24oc2NoZWR1bGVyKSwgb2JzZXJ2ZU9uKHNjaGVkdWxlcikpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVQcm9taXNlLmpzLm1hcCIsImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IGl0ZXJhdG9yIGFzIFN5bWJvbF9pdGVyYXRvciB9IGZyb20gJy4uL3N5bWJvbC9pdGVyYXRvcic7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi4vdXRpbC9pc0Z1bmN0aW9uJztcbmltcG9ydCB7IGV4ZWN1dGVTY2hlZHVsZSB9IGZyb20gJy4uL3V0aWwvZXhlY3V0ZVNjaGVkdWxlJztcbmV4cG9ydCBmdW5jdGlvbiBzY2hlZHVsZUl0ZXJhYmxlKGlucHV0LCBzY2hlZHVsZXIpIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGl0ZXJhdG9yO1xuICAgICAgICBleGVjdXRlU2NoZWR1bGUoc3Vic2NyaWJlciwgc2NoZWR1bGVyLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpdGVyYXRvciA9IGlucHV0W1N5bWJvbF9pdGVyYXRvcl0oKTtcbiAgICAgICAgICAgIGV4ZWN1dGVTY2hlZHVsZShzdWJzY3JpYmVyLCBzY2hlZHVsZXIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlO1xuICAgICAgICAgICAgICAgIHZhciBkb25lO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIChfYSA9IGl0ZXJhdG9yLm5leHQoKSwgdmFsdWUgPSBfYS52YWx1ZSwgZG9uZSA9IF9hLmRvbmUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIDAsIHRydWUpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGlzRnVuY3Rpb24oaXRlcmF0b3IgPT09IG51bGwgfHwgaXRlcmF0b3IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGl0ZXJhdG9yLnJldHVybikgJiYgaXRlcmF0b3IucmV0dXJuKCk7IH07XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2hlZHVsZUl0ZXJhYmxlLmpzLm1hcCIsImltcG9ydCB7IHNjaGVkdWxlQXN5bmNJdGVyYWJsZSB9IGZyb20gJy4vc2NoZWR1bGVBc3luY0l0ZXJhYmxlJztcbmltcG9ydCB7IHJlYWRhYmxlU3RyZWFtTGlrZVRvQXN5bmNHZW5lcmF0b3IgfSBmcm9tICcuLi91dGlsL2lzUmVhZGFibGVTdHJlYW1MaWtlJztcbmV4cG9ydCBmdW5jdGlvbiBzY2hlZHVsZVJlYWRhYmxlU3RyZWFtTGlrZShpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgcmV0dXJuIHNjaGVkdWxlQXN5bmNJdGVyYWJsZShyZWFkYWJsZVN0cmVhbUxpa2VUb0FzeW5jR2VuZXJhdG9yKGlucHV0KSwgc2NoZWR1bGVyKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjaGVkdWxlUmVhZGFibGVTdHJlYW1MaWtlLmpzLm1hcCIsInZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xudmFyIF9fZ2VuZXJhdG9yID0gKHRoaXMgJiYgdGhpcy5fX2dlbmVyYXRvcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIGJvZHkpIHtcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xuICAgICAgICB3aGlsZSAoZyAmJiAoZyA9IDAsIG9wWzBdICYmIChfID0gMCkpLCBfKSB0cnkge1xuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XG4gICAgfVxufTtcbi8vIGltcG9ydCB7YWpheH0gZnJvbSAncnhqcy9hamF4JztcbmltcG9ydCB7IGZyb21FdmVudCwgbWFwLCBzdGFydFdpdGggfSBmcm9tICdyeGpzJztcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVHYW1lTGF5b3V0KGJvZHkpIHtcbiAgICB2YXIgdXBwZXJDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB1cHBlckNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCd1cHBlci1jb250YWluZXInKTtcbiAgICBib2R5LmFwcGVuZENoaWxkKHVwcGVyQ29udGFpbmVyKTtcbiAgICB2YXIgdGl0bGUxID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaDEnKTtcbiAgICB0aXRsZTEudGV4dENvbnRlbnQgPSAncnhqJztcbiAgICB1cHBlckNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aXRsZTEpO1xuICAgIHZhciBzc3MgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcbiAgICBzc3Muc3JjID0gJ3NyY1xcXFxhc3NldHNcXFxcc25ha2UgKDEpLnBuZyc7XG4gICAgc3NzLmFsdCA9ICdzbmFrZSc7XG4gICAgc3NzLmNsYXNzTGlzdC5hZGQoJ3NzcycpO1xuICAgIHVwcGVyQ29udGFpbmVyLmFwcGVuZENoaWxkKHNzcyk7XG4gICAgdmFyIHRpdGxlMiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2gxJyk7XG4gICAgdGl0bGUyLnRleHRDb250ZW50ID0gJ25ha2UnO1xuICAgIHVwcGVyQ29udGFpbmVyLmFwcGVuZENoaWxkKHRpdGxlMik7XG4gICAgdmFyIGxvd2VyQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgbG93ZXJDb250YWluZXIuY2xhc3NMaXN0LmFkZCgnbG93ZXItY29udGFpbmVyJyk7XG4gICAgYm9keS5hcHBlbmRDaGlsZChsb3dlckNvbnRhaW5lcik7XG4gICAgdmFyIGxlZnRDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBsZWZ0Q29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ2xlZnQtY29udGFpbmVyJyk7XG4gICAgbG93ZXJDb250YWluZXIuYXBwZW5kQ2hpbGQobGVmdENvbnRhaW5lcik7XG4gICAgLy9kaXYgemEgaWdyaWN1XG4gICAgdmFyIGdhbWVDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBnYW1lQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ2dhbWUtY29udGFpbmVyJyk7XG4gICAgbG93ZXJDb250YWluZXIuYXBwZW5kQ2hpbGQoZ2FtZUNvbnRhaW5lcik7XG4gICAgdmFyIGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgIGNhbnZhcy5pZCA9ICdnYW1lLWNhbnZhcyc7XG4gICAgZ2FtZUNvbnRhaW5lci5hcHBlbmRDaGlsZChjYW52YXMpO1xuICAgIC8vIGNyZWF0ZUdyaWRDYW52YXMoY2FudmFzLCAxMCk7XG4gICAgZmlsbERlZmF1bHQoKTtcbiAgICB2YXIgcmlnaHRDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICByaWdodENvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdyaWdodC1jb250YWluZXInKTtcbiAgICBsb3dlckNvbnRhaW5lci5hcHBlbmRDaGlsZChyaWdodENvbnRhaW5lcik7XG4gICAgdmFyIHNldHRpbmdzU2VjdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHNldHRpbmdzU2VjdGlvbi5jbGFzc0xpc3QuYWRkKCdzZXR0aW5ncy1zZWN0aW9uJyk7XG4gICAgLy8gZmV0Y2hEYXRhKCkudGhlbigoZGF0YSkgPT4ge1xuICAgIC8vICAgICBjb25zdCB7c2hhcGVzLCBmb29kLCBzcGVlZCwgZnJ1aXQsIHZlZ2V0YWJsZX0gPSBkYXRhO1xuICAgIC8vICAgICBjcmVhdGVTZXR0aW5ncyhzZXR0aW5nc1NlY3Rpb24sIHNoYXBlcywgZm9vZCwgc3BlZWQsIGZydWl0LCB2ZWdldGFibGUpOyAvL3NldHRpbmdzU2VjdGlvbixcbiAgICAvLyB9KTtcbiAgICAvL3Byc2xhXG4gICAgdmFyIGRpbURpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGRpbURpdi5jbGFzc0xpc3QuYWRkKCdkaW1EaXYnKTtcbiAgICBkaW1EaXYuaWQgPSAnZGltRGl2JztcbiAgICBzZXR0aW5nc1NlY3Rpb24uYXBwZW5kQ2hpbGQoZGltRGl2KTtcbiAgICB2YXIgc2hhcGVEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBzaGFwZURpdi5jbGFzc0xpc3QuYWRkKCdzaGFwZURpdicpO1xuICAgIHNoYXBlRGl2LmlkID0gJ3NoYXBlRGl2JztcbiAgICBzZXR0aW5nc1NlY3Rpb24uYXBwZW5kQ2hpbGQoc2hhcGVEaXYpO1xuICAgIHZhciBmb29kRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZm9vZERpdi5jbGFzc0xpc3QuYWRkKCdmb29kRGl2Jyk7XG4gICAgZm9vZERpdi5pZCA9ICdmb29kRGl2JztcbiAgICBzZXR0aW5nc1NlY3Rpb24uYXBwZW5kQ2hpbGQoZm9vZERpdik7XG4gICAgdmFyIGZydWl0RGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZnJ1aXREaXYuY2xhc3NMaXN0LmFkZCgnZnJ1aXREaXYnKTtcbiAgICBmcnVpdERpdi5pZCA9ICdmcnVpdERpdic7XG4gICAgc2V0dGluZ3NTZWN0aW9uLmFwcGVuZENoaWxkKGZydWl0RGl2KTtcbiAgICB2YXIgdmVnZXRhYmxlRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdmVnZXRhYmxlRGl2LmNsYXNzTGlzdC5hZGQoJ3ZlZ2V0YWJsZURpdicpO1xuICAgIHZlZ2V0YWJsZURpdi5pZCA9ICd2ZWdldGFibGVEaXYnO1xuICAgIHNldHRpbmdzU2VjdGlvbi5hcHBlbmRDaGlsZCh2ZWdldGFibGVEaXYpO1xuICAgIHZhciBzcGVlZERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHNwZWVkRGl2LmNsYXNzTGlzdC5hZGQoJ3NwZWVkRGl2Jyk7XG4gICAgc3BlZWREaXYuaWQgPSAnc3BlZWREaXYnO1xuICAgIHNldHRpbmdzU2VjdGlvbi5hcHBlbmRDaGlsZChzcGVlZERpdik7XG4gICAgLy9rcmVpcmFuaSBkaXZvdmlcbiAgICAvL25ldmV6YW5vIHphIGJhenUsIHBvcHVuamVubyBvZG1haFxuICAgIHZhciBkaW1lbnNpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdoMycpO1xuICAgIGRpbWVuc2lvbi5jbGFzc0xpc3QuYWRkKCdkaW1lbnNpb24nKTtcbiAgICBkaW1lbnNpb24udGV4dENvbnRlbnQgPSAnRGltZW5zaW9uJztcbiAgICBkaW1EaXYuYXBwZW5kQ2hpbGQoZGltZW5zaW9uKTtcbiAgICB2YXIgc2xpZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICBzbGlkZXIudHlwZSA9ICdyYW5nZSc7XG4gICAgc2xpZGVyLm1pbiA9ICc1JztcbiAgICBzbGlkZXIubWF4ID0gJzEwJztcbiAgICBzbGlkZXIuc3RlcCA9ICcxJztcbiAgICBzbGlkZXIuY2xhc3NMaXN0LmFkZCgnc2xpZGVyJyk7XG4gICAgc2xpZGVyLmlkID0gJ3NsaWRlcic7XG4gICAgZGltRGl2LmFwcGVuZENoaWxkKHNsaWRlcik7XG4gICAgdmFyIHNsaWRlclZhbHVlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGV4dCcpO1xuICAgIHNsaWRlclZhbHVlLmNsYXNzTGlzdC5hZGQoJ3NsaWRlclZhbHVlJyk7XG4gICAgc2xpZGVyVmFsdWUuaWQgPSAnc2xpZGVyVmFsdWUnO1xuICAgIHNsaWRlclZhbHVlLnRleHRDb250ZW50ID0gJzEwJztcbiAgICBkaW1EaXYuYXBwZW5kQ2hpbGQoc2xpZGVyVmFsdWUpO1xuICAgIHZhciB3ID0gc2xpZGVyLnZhbHVlO1xuICAgIHZhciBzbGlkZXJWYWx1ZSQgPSBmcm9tRXZlbnQoc2xpZGVyLCAnaW5wdXQnKS5waXBlKG1hcChmdW5jdGlvbiAoZXZlbnQpIHsgcmV0dXJuIGV2ZW50LnRhcmdldC52YWx1ZTsgfSksIHN0YXJ0V2l0aChzbGlkZXIudmFsdWUpKTtcbiAgICBzbGlkZXJWYWx1ZSQuc3Vic2NyaWJlKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBzbGlkZXJWYWx1ZS50ZXh0Q29udGVudCA9IHZhbHVlO1xuICAgICAgICB2YXIgY2FudiA9IGNyZWF0ZUdyaWRDYW52YXMoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2dhbWUtY2FudmFzJyksIHBhcnNlSW50KHZhbHVlKSk7XG4gICAgICAgIGRyYXdGcnVpdChjYW52LCBjYW52LndpZHRoIC8gdmFsdWUsIGNhbnYuaGVpZ2h0IC8gdmFsdWUsICdzcmNcXFxcYXNzZXRzXFxcXHBsdW0ucG5nJywgdmFsdWUpO1xuICAgIH0pO1xuICAgIC8vcHJldXppbWFuamUgcG9kYXRha2FcbiAgICBmZXRjaCgnZGIuanNvbicpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgeyByZXR1cm4gcmVzcG9uc2UuanNvbigpOyB9KVxuICAgICAgICAudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICBjcmVhdGVTaGFwZXMoZGF0YS5zaGFwZXMsICdzaGFwZURpdicpO1xuICAgICAgICBjcmVhdGVGb29kKGRhdGEuZm9vZCwgZGF0YS5mcnVpdCwgZGF0YS52ZWdldGFibGUsICdmb29kRGl2Jyk7XG4gICAgICAgIGNyZWF0ZVNwZWVkKGRhdGEuc3BlZWQsICdzcGVlZERpdicpO1xuICAgIH0pXG4gICAgICAgIC5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgZGF0YTonLCBlcnJvcik7XG4gICAgfSk7XG4gICAgbGVmdENvbnRhaW5lci5hcHBlbmRDaGlsZChzZXR0aW5nc1NlY3Rpb24pO1xuICAgIC8vb2RhdmRlXG4gICAgdmFyIHN0YXJ0QnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgc3RhcnRCdXR0b24udGV4dENvbnRlbnQgPSAnU1RBUlQgR0FNRSc7XG4gICAgc3RhcnRCdXR0b24uaWQgPSAnc3RhcnQtYnV0dG9uJztcbiAgICBsZWZ0Q29udGFpbmVyLmFwcGVuZENoaWxkKHN0YXJ0QnV0dG9uKTtcbiAgICB2YXIgc2hvd1Jlc3VsdHNCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICBzaG93UmVzdWx0c0J1dHRvbi50ZXh0Q29udGVudCA9ICdTaG93IFJlc3VsdHMnO1xuICAgIHNob3dSZXN1bHRzQnV0dG9uLmlkID0gJ3Nob3ctcmVzdWx0cy1idXR0b24nO1xuICAgIHJpZ2h0Q29udGFpbmVyLmFwcGVuZENoaWxkKHNob3dSZXN1bHRzQnV0dG9uKTtcbiAgICAvLyBDcmVhdGUgdGhlIHJlc3VsdHMgc2VjdGlvbiAoaGlkZGVuIGJ5IGRlZmF1bHQpXG4gICAgdmFyIHJlc3VsdHNTZWN0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgcmVzdWx0c1NlY3Rpb24uY2xhc3NMaXN0LmFkZCgncmVzdWx0cy1zZWN0aW9uJyk7XG4gICAgcmVzdWx0c1NlY3Rpb24uc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAvLyBDcmVhdGUgZWxlbWVudHMgZm9yIGRpc3BsYXlpbmcgZ2FtZSByZXN1bHRzXG4gICAgLy8gQWRkIHRoZXNlIGVsZW1lbnRzIHRvIHRoZSByZXN1bHRzU2VjdGlvblxuICAgIHJpZ2h0Q29udGFpbmVyLmFwcGVuZENoaWxkKHJlc3VsdHNTZWN0aW9uKTtcbiAgICBzaG93UmVzdWx0c0J1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmVzdWx0c1NlY3Rpb24uc3R5bGUuZGlzcGxheSA9IHJlc3VsdHNTZWN0aW9uLnN0eWxlLmRpc3BsYXkgPT09ICdub25lJyA/ICdibG9jaycgOiAnbm9uZSc7XG4gICAgfSk7XG4gICAgLy8gWW91IGNhbiByZXR1cm4gcmVmZXJlbmNlcyB0byBpbXBvcnRhbnQgZWxlbWVudHMgKGUuZy4sIGNhbnZhcykgZm9yIGxhdGVyIHVzZVxuICAgIC8vIFJldHVybiB7IGNhbnZhcywgc2V0dGluZ3NTZWN0aW9uLCByZXN1bHRzU2VjdGlvbiB9IG9yIG90aGVyIGVsZW1lbnRzIHlvdSBuZWVkXG4gICAgcmV0dXJuIHsgY2FudmFzOiBjYW52YXMsIHNldHRpbmdzU2VjdGlvbjogc2V0dGluZ3NTZWN0aW9uLCByZXN1bHRzU2VjdGlvbjogcmVzdWx0c1NlY3Rpb24gfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVNoYXBlcyhzaGFwZXMsIGNvbnRhaW5lcklEKSB7XG4gICAgdmFyIHNoYXBlRGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoY29udGFpbmVySUQpO1xuICAgIHZhciBzaGFwZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2gzJyk7XG4gICAgc2hhcGUuY2xhc3NMaXN0LmFkZCgnc2hhcGUnKTtcbiAgICBzaGFwZS50ZXh0Q29udGVudCA9ICdTbmFrZSBzaGFwZSc7XG4gICAgc2hhcGVEaXYuYXBwZW5kQ2hpbGQoc2hhcGUpO1xuICAgIHZhciBzaGFwZUNoZWNrYm94ZXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBzaGFwZUNoZWNrYm94ZXMuY2xhc3NMaXN0LmFkZCgnc2hhcGVDaGVja2JveGVzJyk7XG4gICAgc2hhcGVEaXYuYXBwZW5kQ2hpbGQoc2hhcGVDaGVja2JveGVzKTtcbiAgICB2YXIgc2hhcGVMYWJlbHMgPSB7XG4gICAgICAgIHJvdW5kOiAnXFx1MjVDRicsXG4gICAgICAgIHNxdWFyZTogJ1xcdTI1QTAnLFxuICAgICAgICB6aWd6YWc6ICdcXHUyNUIyJyxcbiAgICB9O1xuICAgIHNoYXBlcy5mb3JFYWNoKGZ1bmN0aW9uIChzaGFwZSkge1xuICAgICAgICB2YXIgc2hhcGVDaGVja2JveENvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBzaGFwZUNoZWNrYm94Q29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ3NoYXBlQ2hlY2tib3hDb250YWluZXInKTtcbiAgICAgICAgdmFyIHNoYXBlQ2hlY2tib3ggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICAgICAgICBzaGFwZUNoZWNrYm94LnR5cGUgPSAncmFkaW8nO1xuICAgICAgICBzaGFwZUNoZWNrYm94Lm5hbWUgPSAnc2hhcGVzJztcbiAgICAgICAgc2hhcGVDaGVja2JveC52YWx1ZSA9IHNoYXBlLnR5cGU7XG4gICAgICAgIHNoYXBlQ2hlY2tib3guaWQgPSBzaGFwZS5pZC50b1N0cmluZygpO1xuICAgICAgICB2YXIgc2hhcGVMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xhYmVsJyk7XG4gICAgICAgIHNoYXBlTGFiZWwuY2xhc3NMaXN0LmFkZCgnc2hhcGVMYWJlbCcpO1xuICAgICAgICBzaGFwZUxhYmVsLmlubmVySFRNTCA9IFwiXCIuY29uY2F0KHNoYXBlTGFiZWxzW3NoYXBlLnR5cGVdKTtcbiAgICAgICAgc2hhcGVDaGVja2JveENvbnRhaW5lci5hcHBlbmRDaGlsZChzaGFwZUxhYmVsKTtcbiAgICAgICAgc2hhcGVDaGVja2JveENvbnRhaW5lci5hcHBlbmRDaGlsZChzaGFwZUNoZWNrYm94KTtcbiAgICAgICAgc2hhcGVDaGVja2JveGVzLmFwcGVuZENoaWxkKHNoYXBlQ2hlY2tib3hDb250YWluZXIpO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gY3JlYXRlRm9vZChmb29kLCBmcnVpdCwgdmVnZXRhYmxlLCBjb250YWluZXJJRCkge1xuICAgIHZhciBmb29kRGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoY29udGFpbmVySUQpO1xuICAgIHZhciBmb29kVHlwZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2gzJyk7XG4gICAgZm9vZFR5cGUuY2xhc3NMaXN0LmFkZCgnZm9vZFR5cGUnKTtcbiAgICBmb29kVHlwZS50ZXh0Q29udGVudCA9ICdGb29kJztcbiAgICBmb29kRGl2LmFwcGVuZENoaWxkKGZvb2RUeXBlKTtcbiAgICB2YXIgZm9vZENoZWNrYm94ZXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBmb29kQ2hlY2tib3hlcy5jbGFzc0xpc3QuYWRkKCdmb29kQ2hlY2tib3hlcycpO1xuICAgIGZvb2REaXYuYXBwZW5kQ2hpbGQoZm9vZENoZWNrYm94ZXMpO1xuICAgIGZvb2QuZm9yRWFjaChmdW5jdGlvbiAoZm9vZCkge1xuICAgICAgICB2YXIgZm9vZENoZWNrYm94Q29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGZvb2RDaGVja2JveENvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdmb29kQ2hlY2tib3hDb250YWluZXInKTtcbiAgICAgICAgdmFyIGZvb2RDaGVja2JveCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgICAgIGZvb2RDaGVja2JveC50eXBlID0gJ3JhZGlvJztcbiAgICAgICAgZm9vZENoZWNrYm94Lm5hbWUgPSAnZm9vZCc7XG4gICAgICAgIGZvb2RDaGVja2JveC52YWx1ZSA9IGZvb2QudHlwZTtcbiAgICAgICAgZm9vZENoZWNrYm94LmlkID0gZm9vZC5pZC50b1N0cmluZygpO1xuICAgICAgICB2YXIgZm9vZExhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKTtcbiAgICAgICAgZm9vZExhYmVsLmNsYXNzTGlzdC5hZGQoJ2Zvb2RMYWJlbCcpO1xuICAgICAgICBmb29kTGFiZWwuaW5uZXJIVE1MID0gXCJcIi5jb25jYXQoZm9vZC50eXBlKTtcbiAgICAgICAgZm9vZENoZWNrYm94Q29udGFpbmVyLmFwcGVuZENoaWxkKGZvb2RMYWJlbCk7XG4gICAgICAgIGZvb2RDaGVja2JveENvbnRhaW5lci5hcHBlbmRDaGlsZChmb29kQ2hlY2tib3gpO1xuICAgICAgICBmb29kQ2hlY2tib3hlcy5hcHBlbmRDaGlsZChmb29kQ2hlY2tib3hDb250YWluZXIpO1xuICAgIH0pO1xuICAgIHZhciBmcnVpdERpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmcnVpdERpdicpO1xuICAgIGZydWl0LmZvckVhY2goZnVuY3Rpb24gKGZydWl0KSB7XG4gICAgICAgIHZhciBmcnVpdENoZWNrYm94Q29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGZydWl0Q2hlY2tib3hDb250YWluZXIuY2xhc3NMaXN0LmFkZCgnZnJ1aXRDaGVja2JveENvbnRhaW5lcicpO1xuICAgICAgICB2YXIgZnJ1aXRDaGVja2JveCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgICAgIGZydWl0Q2hlY2tib3gudHlwZSA9ICdjaGVja2JveCc7XG4gICAgICAgIGZydWl0Q2hlY2tib3gubmFtZSA9ICdmcnVpdCc7XG4gICAgICAgIGZydWl0Q2hlY2tib3gudmFsdWUgPSBmcnVpdC50eXBlO1xuICAgICAgICB2YXIgZnJ1aXRMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuICAgICAgICBmcnVpdExhYmVsLmNsYXNzTGlzdC5hZGQoJ2ZydWl0TGFiZWwnKTtcbiAgICAgICAgLy8gZnJ1aXRMYWJlbC5pbm5lckhUTUwgPSBgJHtmcnVpdC50eXBlfWA7XG4gICAgICAgIGZydWl0TGFiZWwuc3JjID0gXCJzcmNcXFxcYXNzZXRzXFxcXFwiLmNvbmNhdChmcnVpdC50eXBlLCBcIi5wbmdcIik7XG4gICAgICAgIGZydWl0Q2hlY2tib3hDb250YWluZXIuYXBwZW5kQ2hpbGQoZnJ1aXRMYWJlbCk7XG4gICAgICAgIGZydWl0Q2hlY2tib3hDb250YWluZXIuYXBwZW5kQ2hpbGQoZnJ1aXRDaGVja2JveCk7XG4gICAgICAgIGZydWl0RGl2LmFwcGVuZENoaWxkKGZydWl0Q2hlY2tib3hDb250YWluZXIpO1xuICAgIH0pO1xuICAgIGZydWl0RGl2LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgdmFyIHZlZ2V0YWJsZURpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd2ZWdldGFibGVEaXYnKTtcbiAgICB2ZWdldGFibGUuZm9yRWFjaChmdW5jdGlvbiAodmVnZXRhYmxlKSB7XG4gICAgICAgIHZhciB2ZWdldGFibGVDaGVja2JveENvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICB2ZWdldGFibGVDaGVja2JveENvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCd2ZWdldGFibGVDaGVja2JveENvbnRhaW5lcicpO1xuICAgICAgICB2YXIgdmVnZXRhYmxlQ2hlY2tib3ggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICAgICAgICB2ZWdldGFibGVDaGVja2JveC50eXBlID0gJ2NoZWNrYm94JztcbiAgICAgICAgdmVnZXRhYmxlQ2hlY2tib3gubmFtZSA9ICd2ZWdldGFibGUnO1xuICAgICAgICB2ZWdldGFibGVDaGVja2JveC52YWx1ZSA9IHZlZ2V0YWJsZS50eXBlO1xuICAgICAgICB2YXIgdmVnZXRhYmxlTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcbiAgICAgICAgdmVnZXRhYmxlTGFiZWwuY2xhc3NMaXN0LmFkZCgndmVnZXRhYmxlTGFiZWwnKTtcbiAgICAgICAgdmVnZXRhYmxlTGFiZWwuc3JjID0gXCJzcmNcXFxcYXNzZXRzXFxcXFwiLmNvbmNhdCh2ZWdldGFibGUudHlwZSwgXCIucG5nXCIpO1xuICAgICAgICB2ZWdldGFibGVDaGVja2JveENvbnRhaW5lci5hcHBlbmRDaGlsZCh2ZWdldGFibGVMYWJlbCk7XG4gICAgICAgIHZlZ2V0YWJsZUNoZWNrYm94Q29udGFpbmVyLmFwcGVuZENoaWxkKHZlZ2V0YWJsZUNoZWNrYm94KTtcbiAgICAgICAgdmVnZXRhYmxlRGl2LmFwcGVuZENoaWxkKHZlZ2V0YWJsZUNoZWNrYm94Q29udGFpbmVyKTtcbiAgICB9KTtcbiAgICB2ZWdldGFibGVEaXYuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICB2YXIgZnJ1aXRSYWRpbyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2lucHV0W25hbWU9XCJmb29kXCJdW3ZhbHVlPVwiZnJ1aXRcIl0nKTtcbiAgICBmcnVpdFJhZGlvLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGZydWl0UmFkaW8uY2hlY2tlZCkge1xuICAgICAgICAgICAgZnJ1aXREaXYuc3R5bGUuZGlzcGxheSA9ICdmbGV4JztcbiAgICAgICAgICAgIHZlZ2V0YWJsZURpdi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZnJ1aXREaXYuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHZhciB2ZWdldGFibGVSYWRpbyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2lucHV0W25hbWU9XCJmb29kXCJdW3ZhbHVlPVwidmVnZXRhYmxlXCJdJyk7XG4gICAgdmVnZXRhYmxlUmFkaW8uYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodmVnZXRhYmxlUmFkaW8uY2hlY2tlZCkge1xuICAgICAgICAgICAgdmVnZXRhYmxlRGl2LnN0eWxlLmRpc3BsYXkgPSAnZmxleCc7XG4gICAgICAgICAgICBmcnVpdERpdi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmVnZXRhYmxlRGl2LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVNwZWVkKHNwZWVkLCBjb250YWluZXJJRCkge1xuICAgIHZhciBzcGVlZERpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNvbnRhaW5lcklEKTtcbiAgICB2YXIgc3BlZWRUeXBlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaDMnKTtcbiAgICBzcGVlZFR5cGUuY2xhc3NMaXN0LmFkZCgnc3BlZWQnKTtcbiAgICBzcGVlZFR5cGUudGV4dENvbnRlbnQgPSAnU3BlZWQnO1xuICAgIHNwZWVkRGl2LmFwcGVuZENoaWxkKHNwZWVkVHlwZSk7XG4gICAgdmFyIHNwZWVkQ2hlY2tib3hlcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHNwZWVkQ2hlY2tib3hlcy5jbGFzc0xpc3QuYWRkKCdzcGVlZENoZWNrYm94ZXMnKTtcbiAgICBzcGVlZERpdi5hcHBlbmRDaGlsZChzcGVlZENoZWNrYm94ZXMpO1xuICAgIHNwZWVkLmZvckVhY2goZnVuY3Rpb24gKHNwZWVkKSB7XG4gICAgICAgIHZhciBzcGVlZENoZWNrYm94Q29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHNwZWVkQ2hlY2tib3hDb250YWluZXIuY2xhc3NMaXN0LmFkZCgnc3BlZWRDaGVja2JveENvbnRhaW5lcicpO1xuICAgICAgICB2YXIgc3BlZWRDaGVja2JveCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgICAgIHNwZWVkQ2hlY2tib3gudHlwZSA9ICdyYWRpbyc7XG4gICAgICAgIHNwZWVkQ2hlY2tib3gubmFtZSA9ICdzcGVlZCc7XG4gICAgICAgIHNwZWVkQ2hlY2tib3gudmFsdWUgPSBzcGVlZC50eXBlO1xuICAgICAgICBzcGVlZENoZWNrYm94LmlkID0gJ3NoYXBlQ2hieCc7XG4gICAgICAgIHZhciBzcGVlZExhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKTtcbiAgICAgICAgc3BlZWRMYWJlbC5jbGFzc0xpc3QuYWRkKCdzcGVlZExhYmVsJyk7XG4gICAgICAgIHNwZWVkTGFiZWwuaW5uZXJIVE1MID0gXCJcIi5jb25jYXQoc3BlZWQudHlwZSk7XG4gICAgICAgIHNwZWVkQ2hlY2tib3hDb250YWluZXIuYXBwZW5kQ2hpbGQoc3BlZWRMYWJlbCk7XG4gICAgICAgIHNwZWVkQ2hlY2tib3hDb250YWluZXIuYXBwZW5kQ2hpbGQoc3BlZWRDaGVja2JveCk7XG4gICAgICAgIHNwZWVkQ2hlY2tib3hlcy5hcHBlbmRDaGlsZChzcGVlZENoZWNrYm94Q29udGFpbmVyKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUdyaWRDYW52YXMoY2FudmFzLCBjYW52RGltKSB7XG4gICAgdmFyIGNlbGxTaXplMSA9IGNhbnZhcy53aWR0aCAvIGNhbnZEaW07XG4gICAgdmFyIGNlbGxTaXplMiA9IGNhbnZhcy5oZWlnaHQgLyBjYW52RGltO1xuICAgIHZhciBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICBpZiAoIWN0eCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhbnZhcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3Nlci4nKTtcbiAgICB9XG4gICAgY3R4LmNsZWFyUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xuICAgIGN0eC5zdHJva2VTdHlsZSA9ICdncmVlbic7XG4gICAgY3R4LmxpbmVXaWR0aCA9IDEuMjtcbiAgICBjdHgubGluZUNhcCA9ICdzcXVhcmUnO1xuICAgIGN0eC5saW5lSm9pbiA9ICdtaXRlcic7XG4gICAgZm9yICh2YXIgeCA9IDA7IHggPD0gY2FudmFzLndpZHRoOyB4ICs9IGNlbGxTaXplMSkge1xuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIGN0eC5tb3ZlVG8oeCwgMCk7XG4gICAgICAgIGN0eC5saW5lVG8oeCwgY2FudmFzLmhlaWdodCk7XG4gICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICB9XG4gICAgZm9yICh2YXIgeSA9IDA7IHkgPD0gY2FudmFzLmhlaWdodDsgeSArPSBjZWxsU2l6ZTIpIHtcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICBjdHgubW92ZVRvKDAsIHkpO1xuICAgICAgICBjdHgubGluZVRvKGNhbnZhcy53aWR0aCwgeSk7XG4gICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICB9XG4gICAgcmV0dXJuIGNhbnZhcztcbn1cbmZ1bmN0aW9uIGZpbGxEZWZhdWx0KCkge1xuICAgIHZhciBjYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZ2FtZS1jYW52YXMnKTtcbiAgICBjcmVhdGVHcmlkQ2FudmFzKGNhbnZhcywgMTApO1xuICAgIC8vIGRyYXdGcnVpdChjYW52YXMsIGNhbnZhcy53aWR0aC8xMCwgY2FudmFzLmhlaWdodC8xMCwgJ3NyY1xcXFxhc3NldHNcXFxccGx1bS5wbmcnLCAxMCk7XG4gICAgLy9kcmF3U25ha2VcbiAgICBkcmF3U25ha2UoY2FudmFzLCAncm91bmQnLCAneWVsbG93JywgY2FudmFzLndpZHRoIC8gMTAgKiAwLjgsIGNhbnZhcy5oZWlnaHQgLyAxMCAqIDAuOCwgW3sgeDogMCwgeTogMCB9LCB7IHg6IDEsIHk6IDAgfV0pO1xufVxuLy9yeGpzXG4vLyAgIGRhdGFBUEkuc3Vic2NyaWJlKHtcbi8vICAgICBuZXh0OiAocmVzcG9uc2U6IFJlc3BvbnNlKSA9PiB7XG4vLyAgICAgICAgIGNvbnN0IHtzaGFwZXMsIGZvb2QsIHNwZWVkLCBmcnVpdCwgdmVnZXRhYmxlfSA9IHJlc3BvbnNlO1xuLy8gICAgICAgICBjcmVhdGVTZXR0aW5ncyhzaGFwZXMsIGZvb2QsIHNwZWVkLCBmcnVpdCwgdmVnZXRhYmxlKTsgLy9zZXR0aW5nc1NlY3Rpb24sXG4vLyAgICAgfVxuLy8gfSk7XG5leHBvcnQgZnVuY3Rpb24gZHJhd0ZydWl0KGNhbnZhcywgd2lkdGgsIGhlaWdodCwgc3JjLCBzbGlkZXJWYWx1ZSkge1xuICAgIC8vbW96ZGEgbmVwb3RyZWJub1xuICAgIGNvbnNvbGUubG9nKCdkcmF3RnJ1aXQnKTtcbiAgICB2YXIgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgaWYgKCFjdHgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW52YXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJyb3dzZXIuJyk7XG4gICAgfVxuICAgIHZhciBjYW52YXNSZWN0ID0gY2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGN0eC5jbGVhclJlY3QoY2FudmFzUmVjdC5sZWZ0LCBjYW52YXNSZWN0LnRvcCwgY2FudmFzUmVjdC53aWR0aCwgY2FudmFzUmVjdC5oZWlnaHQpO1xuICAgIC8vIGNvbnN0IGZydWl0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7XG4gICAgdmFyIGZydWl0ID0gbmV3IEltYWdlKCk7XG4gICAgLy8gZnJ1aXQuc3JjID0gJ3NyY1xcXFxhc3NldHNcXFxccGx1bS5wbmcnO1xuICAgIGZydWl0LnNyYyA9IHNyYztcbiAgICBmcnVpdC5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciByYW5kMSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChzbGlkZXJWYWx1ZSkpICogd2lkdGg7XG4gICAgICAgIHZhciByYW5kMiA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChzbGlkZXJWYWx1ZSkpICogaGVpZ2h0O1xuICAgICAgICBjdHguZHJhd0ltYWdlKGZydWl0LCByYW5kMSwgcmFuZDIsIHdpZHRoLCBoZWlnaHQpO1xuICAgIH07XG4gICAgZnJ1aXQuYWx0ID0gJ2FwcGxlJztcbiAgICBmcnVpdC5jbGFzc0xpc3QuYWRkKCdmcnVpdCcpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGRyYXdTbmFrZShjYW52YXMsIHNoYXBlLCBjb2xvciwgc2VnbWVudFNpemVYLCBzZWdtZW50U2l6ZVksIHNuYWtlKSB7XG4gICAgdmFyIGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgIHZhciBjYW52YXNSZWN0ID0gY2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGN0eC5jbGVhclJlY3QoY2FudmFzUmVjdC5sZWZ0LCBjYW52YXNSZWN0LnRvcCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTsgLy9pem1lbml0aSBtYWxvIGRhIGJpIGlzbGEgcG8gc3JlZGluaSBcbiAgICBjdHguZmlsbFN0eWxlID0gJ2dyZWVuJztcbiAgICBjdHguc3Ryb2tlU3R5bGUgPSAnYmxhY2snO1xuICAgIGN0eC5saW5lV2lkdGggPSAyO1xuICAgIC8vIExvb3AgdGhyb3VnaCB0aGUgc25ha2UncyBzZWdtZW50cyBhbmQgZHJhdyBlYWNoIG9uZVxuICAgIGZvciAodmFyIF9pID0gMCwgc25ha2VfMSA9IHNuYWtlOyBfaSA8IHNuYWtlXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHZhciBzZWdtZW50ID0gc25ha2VfMVtfaV07XG4gICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgcG9zaXRpb24gb2YgdGhlIHNlZ21lbnQgb24gdGhlIGNhbnZhc1xuICAgICAgICB2YXIgeCA9IHNlZ21lbnQueCAqIHNlZ21lbnRTaXplWDsgLy8gQXNzdW1pbmcgc2VnbWVudFNpemUgaXMgdGhlIHNpemUgb2YgZWFjaCBzZWdtZW50XG4gICAgICAgIHZhciB5ID0gc2VnbWVudC55ICogc2VnbWVudFNpemVZO1xuICAgICAgICAvLyBEcmF3IHRoZSBzbmFrZSBzZWdtZW50IGFzIGEgZmlsbGVkIHJlY3RhbmdsZVxuICAgICAgICBjdHguZmlsbFJlY3QoeCwgeSwgc2VnbWVudFNpemVYLCBzZWdtZW50U2l6ZVkpO1xuICAgICAgICAvLyBEcmF3IGEgYm9yZGVyIGFyb3VuZCB0aGUgc25ha2Ugc2VnbWVudFxuICAgICAgICBjdHguc3Ryb2tlUmVjdCh4LCB5LCBzZWdtZW50U2l6ZVgsIHNlZ21lbnRTaXplWSk7XG4gICAgfVxufVxuLy8gZnVuY3Rpb24gZHJhd1NuYWtlKGN0eCwgc25ha2UpIHtcbi8vICAgY29uc3Qgc25ha2VDb2xvciA9ICdncmVlbic7XG4vLyAgIGNvbnN0IGV5ZUNvbG9yID0gJ3doaXRlJztcbi8vICAgY29uc3QgZXllUmFkaXVzID0gMztcbi8vICAgLy8gRHJhdyB0aGUgc25ha2UncyBib2R5XG4vLyAgIGN0eC5maWxsU3R5bGUgPSBzbmFrZUNvbG9yO1xuLy8gICBmb3IgKGxldCBpID0gMDsgaSA8IHNuYWtlLmxlbmd0aDsgaSsrKSB7XG4vLyAgICAgY29uc3Qgc2VnbWVudCA9IHNuYWtlW2ldO1xuLy8gICAgIGNvbnN0IHggPSBzZWdtZW50Lng7XG4vLyAgICAgY29uc3QgeSA9IHNlZ21lbnQueTtcbi8vICAgICBjb25zdCByYWRpdXMgPSAxMDsgLy8gQWRqdXN0IHRoZSByYWRpdXMgYXMgbmVlZGVkXG4vLyAgICAgY3R4LmJlZ2luUGF0aCgpO1xuLy8gICAgIGN0eC5hcmMoeCwgeSwgcmFkaXVzLCAwLCBNYXRoLlBJICogMik7XG4vLyAgICAgY3R4LmZpbGwoKTtcbi8vICAgICBjdHguY2xvc2VQYXRoKCk7XG4vLyAgIH1cbi8vICAgLy8gRHJhdyB0aGUgc25ha2UncyBoZWFkIHdpdGggZXllc1xuLy8gICBjb25zdCBoZWFkID0gc25ha2VbMF07XG4vLyAgIGN0eC5maWxsU3R5bGUgPSBzbmFrZUNvbG9yO1xuLy8gICBjdHguYmVnaW5QYXRoKCk7XG4vLyAgIGN0eC5hcmMoaGVhZC54LCBoZWFkLnksIDEwLCAwLCBNYXRoLlBJICogMik7XG4vLyAgIGN0eC5maWxsKCk7XG4vLyAgIGN0eC5jbG9zZVBhdGgoKTtcbi8vICAgLy8gRHJhdyB0aGUgZXllc1xuLy8gICBjb25zdCBleWVPZmZzZXRYID0gNTsgLy8gT2Zmc2V0IGZyb20gdGhlIGhlYWQncyBjZW50ZXJcbi8vICAgY29uc3QgZXllT2Zmc2V0WSA9IC01O1xuLy8gICBjdHguZmlsbFN0eWxlID0gZXllQ29sb3I7XG4vLyAgIGN0eC5iZWdpblBhdGgoKTtcbi8vICAgY3R4LmFyYyhoZWFkLnggKyBleWVPZmZzZXRYLCBoZWFkLnkgKyBleWVPZmZzZXRZLCBleWVSYWRpdXMsIDAsIE1hdGguUEkgKiAyKTtcbi8vICAgY3R4LmFyYyhoZWFkLnggLSBleWVPZmZzZXRYLCBoZWFkLnkgKyBleWVPZmZzZXRZLCBleWVSYWRpdXMsIDAsIE1hdGguUEkgKiAyKTtcbi8vICAgY3R4LmZpbGwoKTtcbi8vICAgY3R4LmNsb3NlUGF0aCgpO1xuLy8gfVxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZUNhbnZhc0RpbWVuc2lvbnMoZGltZW5zaW9uKSB7XG59XG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlU25ha2VTaGFwZShzaGFwZSkge1xufVxuLy8gZnJ1aXRSYWRpby5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoKSA9PiB7XG4vLyAgICAgaWYoZnJ1aXRSYWRpby5jaGVja2VkKXtcbi8vICAgICAgICAgZnJ1aXREaXYuc3R5bGUuZGlzcGxheSA9ICdmbGV4Jztcbi8vICAgICAgICAgdmVnZXRhYmxlRGl2LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4vLyAgICAgfVxuLy8gICAgIGVsc2V7XG4vLyAgICAgICAgIGZydWl0RGl2LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4vLyAgICAgfVxuLy8gfSk7XG4vLyB2ZWdldGFibGVSYWRpby5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoKSA9PiB7XG4vLyAgICAgaWYodmVnZXRhYmxlUmFkaW8uY2hlY2tlZCl7XG4vLyAgICAgICAgIHZlZ2V0YWJsZURpdi5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnO1xuLy8gICAgICAgICBmcnVpdERpdi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuLy8gICAgIH1cbi8vICAgICBlbHNle1xuLy8gICAgICAgICB2ZWdldGFibGVEaXYuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbi8vICAgICB9XG4vLyB9KTtcbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVGb29kVHlwZShmb29kKSB7XG4gICAgLy8gY29uc3QgZnJ1aXREaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZnJ1aXREaXYnKSBhcyBIVE1MRGl2RWxlbWVudDtcbiAgICB2YXIgZnJ1aXREaXYgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZnJ1aXREaXYnKTtcbiAgICB2YXIgdmVnZXRhYmxlRGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3ZlZ2V0YWJsZURpdicpO1xuICAgIGlmIChmb29kID09PSBcImZydWl0XCIpIHtcbiAgICAgICAgZnJ1aXREaXYuc3R5bGUuZGlzcGxheSA9ICdmbGV4JztcbiAgICAgICAgdmVnZXRhYmxlRGl2LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBmcnVpdERpdi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICB2ZWdldGFibGVEaXYuc3R5bGUuZGlzcGxheSA9ICdmbGV4JztcbiAgICB9XG4gICAgLy8gY29uc29sZS5sb2coc2V0dGluZ3NTZWN0aW9uLmNoaWxkTm9kZXMpXG4gICAgLy8gY29uc29sZS5sb2coc2V0dGluZ3NTZWN0aW9uLmNoaWxkcmVuKVxuICAgIC8vIGRpbURpdi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZUZydWl0VHlwZShmcnVpdCkge1xufVxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZVZlZ2V0YWJsZVR5cGUodmVnZXRhYmxlKSB7XG59XG5mdW5jdGlvbiBmZXRjaERhdGEoKSB7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcmVzcG9uc2UsIGRhdGEsIGVycm9yXzE7XG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIF9hLnRyeXMucHVzaChbMCwgMywgLCA0XSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGZldGNoKCdkYi5qc29uJyldO1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTmV0d29yayByZXNwb25zZSB3YXMgbm90IG9rLicpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHJlc3BvbnNlLmpzb24oKV07XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBkYXRhID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgZGF0YV07XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBlcnJvcl8xID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBkYXRhOicsIGVycm9yXzEpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgbnVsbF07XG4gICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzIgLypyZXR1cm4qL107XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuIiwiaW1wb3J0IHsgY29uY2F0IH0gZnJvbSAnLi4vb2JzZXJ2YWJsZS9jb25jYXQnO1xuaW1wb3J0IHsgcG9wU2NoZWR1bGVyIH0gZnJvbSAnLi4vdXRpbC9hcmdzJztcbmltcG9ydCB7IG9wZXJhdGUgfSBmcm9tICcuLi91dGlsL2xpZnQnO1xuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0V2l0aCgpIHtcbiAgICB2YXIgdmFsdWVzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFsdWVzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciBzY2hlZHVsZXIgPSBwb3BTY2hlZHVsZXIodmFsdWVzKTtcbiAgICByZXR1cm4gb3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIChzY2hlZHVsZXIgPyBjb25jYXQodmFsdWVzLCBzb3VyY2UsIHNjaGVkdWxlcikgOiBjb25jYXQodmFsdWVzLCBzb3VyY2UpKS5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdGFydFdpdGguanMubWFwIiwiaW1wb3J0IHsgY3JlYXRlR2FtZUxheW91dCB9IGZyb20gXCIuL3ZpZXcvaW5pdGlhbFZpZXdcIjtcbmNyZWF0ZUdhbWVMYXlvdXQoZG9jdW1lbnQuYm9keSk7XG4iXSwibmFtZXMiOlsiZXh0ZW5kU3RhdGljcyIsImQiLCJiIiwiT2JqZWN0Iiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJBcnJheSIsInAiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJfX2V4dGVuZHMiLCJUeXBlRXJyb3IiLCJTdHJpbmciLCJfXyIsInRoaXMiLCJjb25zdHJ1Y3RvciIsImNyZWF0ZSIsIl9fZ2VuZXJhdG9yIiwidGhpc0FyZyIsImJvZHkiLCJmIiwieSIsInQiLCJnIiwiXyIsImxhYmVsIiwic2VudCIsInRyeXMiLCJvcHMiLCJuZXh0IiwidmVyYiIsIlN5bWJvbCIsIml0ZXJhdG9yIiwibiIsInYiLCJvcCIsImRvbmUiLCJ2YWx1ZSIsInBvcCIsImxlbmd0aCIsInB1c2giLCJlIiwic3RlcCIsIl9fdmFsdWVzIiwibyIsInMiLCJtIiwiaSIsIl9fcmVhZCIsInIiLCJhciIsImVycm9yIiwiX19zcHJlYWRBcnJheSIsInRvIiwiZnJvbSIsInBhY2siLCJhcmd1bWVudHMiLCJsIiwic2xpY2UiLCJjb25jYXQiLCJfX2F3YWl0IiwiU3VwcHJlc3NlZEVycm9yIiwiaXNBcnJheUxpa2UiLCJ4IiwiaXNQcm9taXNlIiwidGhlbiIsImN0b3JGdW5jIiwiVW5zdWJzY3JpcHRpb25FcnJvciIsImVycm9ycyIsImluc3RhbmNlIiwiRXJyb3IiLCJzdGFjayIsIm1lc3NhZ2UiLCJtYXAiLCJlcnIiLCJ0b1N0cmluZyIsImpvaW4iLCJuYW1lIiwiYXJyUmVtb3ZlIiwiYXJyIiwiaXRlbSIsImluZGV4IiwiaW5kZXhPZiIsInNwbGljZSIsIlN1YnNjcmlwdGlvbiIsImluaXRpYWxUZWFyZG93biIsImNsb3NlZCIsIl9wYXJlbnRhZ2UiLCJfZmluYWxpemVycyIsImVtcHR5IiwidW5zdWJzY3JpYmUiLCJlXzEiLCJfYSIsImVfMiIsIl9iIiwiaXNBcnJheSIsIl9wYXJlbnRhZ2VfMSIsIl9wYXJlbnRhZ2VfMV8xIiwicmVtb3ZlIiwiZV8xXzEiLCJyZXR1cm4iLCJpbml0aWFsRmluYWxpemVyIiwiX2ZpbmFsaXplcnNfMSIsIl9maW5hbGl6ZXJzXzFfMSIsImZpbmFsaXplciIsImV4ZWNGaW5hbGl6ZXIiLCJlXzJfMSIsImFkZCIsInRlYXJkb3duIiwiX2hhc1BhcmVudCIsIl9hZGRQYXJlbnQiLCJwYXJlbnQiLCJpbmNsdWRlcyIsIl9yZW1vdmVQYXJlbnQiLCJFTVBUWSIsImlzU3Vic2NyaXB0aW9uIiwiY29uZmlnIiwib25VbmhhbmRsZWRFcnJvciIsIm9uU3RvcHBlZE5vdGlmaWNhdGlvbiIsIlByb21pc2UiLCJ1bmRlZmluZWQiLCJ1c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nIiwidXNlRGVwcmVjYXRlZE5leHRDb250ZXh0IiwidGltZW91dFByb3ZpZGVyIiwic2V0VGltZW91dCIsImhhbmRsZXIiLCJ0aW1lb3V0IiwiYXJncyIsIl9pIiwiZGVsZWdhdGUiLCJhcHBseSIsImNsZWFyVGltZW91dCIsImhhbmRsZSIsInJlcG9ydFVuaGFuZGxlZEVycm9yIiwibm9vcCIsIkNPTVBMRVRFX05PVElGSUNBVElPTiIsImNyZWF0ZU5vdGlmaWNhdGlvbiIsImtpbmQiLCJjb250ZXh0IiwiU3Vic2NyaWJlciIsIl9zdXBlciIsImRlc3RpbmF0aW9uIiwiX3RoaXMiLCJpc1N0b3BwZWQiLCJFTVBUWV9PQlNFUlZFUiIsImNvbXBsZXRlIiwiU2FmZVN1YnNjcmliZXIiLCJoYW5kbGVTdG9wcGVkTm90aWZpY2F0aW9uIiwibmV4dE5vdGlmaWNhdGlvbiIsIl9uZXh0IiwiX2Vycm9yIiwiX2NvbXBsZXRlIiwiX2JpbmQiLCJGdW5jdGlvbiIsImJpbmQiLCJmbiIsIkNvbnN1bWVyT2JzZXJ2ZXIiLCJwYXJ0aWFsT2JzZXJ2ZXIiLCJoYW5kbGVVbmhhbmRsZWRFcnJvciIsIm9ic2VydmVyT3JOZXh0IiwiY29udGV4dF8xIiwiZXJyb3JUaHJvd24iLCJub3RpZmljYXRpb24iLCJzdWJzY3JpYmVyIiwib2JzZXJ2YWJsZSIsImlkZW50aXR5IiwiT2JzZXJ2YWJsZSIsInN1YnNjcmliZSIsIl9zdWJzY3JpYmUiLCJsaWZ0Iiwib3BlcmF0b3IiLCJzb3VyY2UiLCJpc09ic2VydmVyIiwiY2IiLCJpc1Jvb3QiLCJlcnJvckNvbnRleHQiLCJfdHJ5U3Vic2NyaWJlIiwic2luayIsImZvckVhY2giLCJwcm9taXNlQ3RvciIsImdldFByb21pc2VDdG9yIiwicmVzb2x2ZSIsInJlamVjdCIsInBpcGUiLCJvcGVyYXRpb25zIiwiZm5zIiwiaW5wdXQiLCJyZWR1Y2UiLCJwcmV2IiwidG9Qcm9taXNlIiwiaXNJbnRlcm9wT2JzZXJ2YWJsZSIsImlzQXN5bmNJdGVyYWJsZSIsIm9iaiIsImFzeW5jSXRlcmF0b3IiLCJjcmVhdGVJbnZhbGlkT2JzZXJ2YWJsZVR5cGVFcnJvciIsImlzSXRlcmFibGUiLCJyZWFkYWJsZVN0cmVhbUxpa2VUb0FzeW5jR2VuZXJhdG9yIiwicmVhZGFibGVTdHJlYW0iLCJfYXJndW1lbnRzIiwiZ2VuZXJhdG9yIiwicSIsImEiLCJyZXN1bWUiLCJmdWxmaWxsIiwic2V0dGxlIiwic2hpZnQiLCJfX2FzeW5jR2VuZXJhdG9yIiwicmVhZGVyIiwiZ2V0UmVhZGVyIiwicmVhZCIsInJlbGVhc2VMb2NrIiwiaXNSZWFkYWJsZVN0cmVhbUxpa2UiLCJpbm5lckZyb20iLCJvYnMiLCJhcnJheSIsInByb21pc2UiLCJmcm9tQXN5bmNJdGVyYWJsZSIsIml0ZXJhYmxlIiwiaXRlcmFibGVfMSIsIml0ZXJhYmxlXzFfMSIsImFzeW5jSXRlcmFibGUiLCJhc3luY0l0ZXJhYmxlXzEiLCJhc3luY0l0ZXJhYmxlXzFfMSIsIlAiLCJfX2FzeW5jVmFsdWVzIiwiZnVsZmlsbGVkIiwicmVqZWN0ZWQiLCJyZXN1bHQiLCJwcm9jZXNzIiwiY2F0Y2giLCJvcGVyYXRlIiwiaW5pdCIsImhhc0xpZnQiLCJsaWZ0ZWRTb3VyY2UiLCJjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIiLCJvbk5leHQiLCJvbkNvbXBsZXRlIiwib25FcnJvciIsIm9uRmluYWxpemUiLCJPcGVyYXRvclN1YnNjcmliZXIiLCJzaG91bGRVbnN1YnNjcmliZSIsImNsb3NlZF8xIiwicHJvamVjdCIsImV4ZWN1dGVTY2hlZHVsZSIsInBhcmVudFN1YnNjcmlwdGlvbiIsInNjaGVkdWxlciIsIndvcmsiLCJkZWxheSIsInJlcGVhdCIsInNjaGVkdWxlU3Vic2NyaXB0aW9uIiwic2NoZWR1bGUiLCJtZXJnZU1hcCIsInJlc3VsdFNlbGVjdG9yIiwiY29uY3VycmVudCIsIkluZmluaXR5IiwiaWkiLCJvbkJlZm9yZU5leHQiLCJleHBhbmQiLCJpbm5lclN1YlNjaGVkdWxlciIsImFkZGl0aW9uYWxGaW5hbGl6ZXIiLCJidWZmZXIiLCJhY3RpdmUiLCJpc0NvbXBsZXRlIiwiY2hlY2tDb21wbGV0ZSIsIm91dGVyTmV4dCIsImRvSW5uZXJTdWIiLCJpbm5lckNvbXBsZXRlIiwiaW5uZXJWYWx1ZSIsImJ1ZmZlcmVkVmFsdWUiLCJtZXJnZUludGVybmFscyIsIm5vZGVFdmVudEVtaXR0ZXJNZXRob2RzIiwiZXZlbnRUYXJnZXRNZXRob2RzIiwianF1ZXJ5TWV0aG9kcyIsImZyb21FdmVudCIsInRhcmdldCIsImV2ZW50TmFtZSIsIm9wdGlvbnMiLCJjYWxsT3JBcHBseSIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiaXNFdmVudFRhcmdldCIsIm1ldGhvZE5hbWUiLCJhZGRMaXN0ZW5lciIsInJlbW92ZUxpc3RlbmVyIiwiaXNOb2RlU3R5bGVFdmVudEVtaXR0ZXIiLCJ0b0NvbW1vbkhhbmRsZXJSZWdpc3RyeSIsIm9uIiwib2ZmIiwiaXNKUXVlcnlTdHlsZUV2ZW50RW1pdHRlciIsInN1YlRhcmdldCIsInBvcFNjaGVkdWxlciIsIm9ic2VydmVPbiIsInN1YnNjcmliZU9uIiwic2NoZWR1bGVBc3luY0l0ZXJhYmxlIiwic2NoZWR1bGVPYnNlcnZhYmxlIiwic2NoZWR1bGVBcnJheSIsInNjaGVkdWxlUHJvbWlzZSIsInNjaGVkdWxlSXRlcmFibGUiLCJzY2hlZHVsZVJlYWRhYmxlU3RyZWFtTGlrZSIsInNjaGVkdWxlZCIsImNyZWF0ZUdyaWRDYW52YXMiLCJjYW52YXMiLCJjYW52RGltIiwiY2VsbFNpemUxIiwid2lkdGgiLCJjZWxsU2l6ZTIiLCJoZWlnaHQiLCJjdHgiLCJnZXRDb250ZXh0IiwiY2xlYXJSZWN0Iiwic3Ryb2tlU3R5bGUiLCJsaW5lV2lkdGgiLCJsaW5lQ2FwIiwibGluZUpvaW4iLCJiZWdpblBhdGgiLCJtb3ZlVG8iLCJsaW5lVG8iLCJzdHJva2UiLCJ1cHBlckNvbnRhaW5lciIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTGlzdCIsImFwcGVuZENoaWxkIiwidGl0bGUxIiwidGV4dENvbnRlbnQiLCJzc3MiLCJzcmMiLCJhbHQiLCJ0aXRsZTIiLCJsb3dlckNvbnRhaW5lciIsImxlZnRDb250YWluZXIiLCJnYW1lQ29udGFpbmVyIiwiaWQiLCJnZXRFbGVtZW50QnlJZCIsInNoYXBlIiwiY29sb3IiLCJzZWdtZW50U2l6ZVgiLCJzZWdtZW50U2l6ZVkiLCJzbmFrZSIsImNhbnZhc1JlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJsZWZ0IiwidG9wIiwiZmlsbFN0eWxlIiwic25ha2VfMSIsInNlZ21lbnQiLCJmaWxsUmVjdCIsInN0cm9rZVJlY3QiLCJkcmF3U25ha2UiLCJmaWxsRGVmYXVsdCIsInJpZ2h0Q29udGFpbmVyIiwic2V0dGluZ3NTZWN0aW9uIiwiZGltRGl2Iiwic2hhcGVEaXYiLCJmb29kRGl2IiwiZnJ1aXREaXYiLCJ2ZWdldGFibGVEaXYiLCJzcGVlZERpdiIsImRpbWVuc2lvbiIsInNsaWRlciIsInR5cGUiLCJtaW4iLCJtYXgiLCJzbGlkZXJWYWx1ZSIsImV2ZW50IiwidmFsdWVzIiwic3RhcnRXaXRoIiwiY2FudiIsInBhcnNlSW50IiwiY29uc29sZSIsImxvZyIsImZydWl0IiwiSW1hZ2UiLCJvbmxvYWQiLCJyYW5kMSIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsInJhbmQyIiwiZHJhd0ltYWdlIiwiZHJhd0ZydWl0IiwiZmV0Y2giLCJyZXNwb25zZSIsImpzb24iLCJkYXRhIiwic2hhcGVzIiwiY29udGFpbmVySUQiLCJzaGFwZUNoZWNrYm94ZXMiLCJzaGFwZUxhYmVscyIsInJvdW5kIiwic3F1YXJlIiwiemlnemFnIiwic2hhcGVDaGVja2JveENvbnRhaW5lciIsInNoYXBlQ2hlY2tib3giLCJzaGFwZUxhYmVsIiwiaW5uZXJIVE1MIiwiY3JlYXRlU2hhcGVzIiwiZm9vZCIsInZlZ2V0YWJsZSIsImZvb2RUeXBlIiwiZm9vZENoZWNrYm94ZXMiLCJmb29kQ2hlY2tib3hDb250YWluZXIiLCJmb29kQ2hlY2tib3giLCJmb29kTGFiZWwiLCJmcnVpdENoZWNrYm94Q29udGFpbmVyIiwiZnJ1aXRDaGVja2JveCIsImZydWl0TGFiZWwiLCJzdHlsZSIsImRpc3BsYXkiLCJ2ZWdldGFibGVDaGVja2JveENvbnRhaW5lciIsInZlZ2V0YWJsZUNoZWNrYm94IiwidmVnZXRhYmxlTGFiZWwiLCJmcnVpdFJhZGlvIiwicXVlcnlTZWxlY3RvciIsImNoZWNrZWQiLCJ2ZWdldGFibGVSYWRpbyIsImNyZWF0ZUZvb2QiLCJzcGVlZCIsInNwZWVkVHlwZSIsInNwZWVkQ2hlY2tib3hlcyIsInNwZWVkQ2hlY2tib3hDb250YWluZXIiLCJzcGVlZENoZWNrYm94Iiwic3BlZWRMYWJlbCIsImNyZWF0ZVNwZWVkIiwic3RhcnRCdXR0b24iLCJzaG93UmVzdWx0c0J1dHRvbiIsInJlc3VsdHNTZWN0aW9uIiwiY3JlYXRlR2FtZUxheW91dCJdLCJzb3VyY2VSb290IjoiIn0=