(()=>{"use strict";function e(e){return"function"==typeof e}function t(t){return function(n){if(function(t){return e(null==t?void 0:t.lift)}(n))return n.lift((function(e){try{return t(e,this)}catch(e){this.error(e)}}));throw new TypeError("Unable to lift unknown Observable type")}}var n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},n(e,t)};function r(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}var o=function(){return o=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},o.apply(this,arguments)};function i(e,t){var n,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(c){return function(a){return function(c){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,c[0]&&(u=0)),u;)try{if(n=1,r&&(o=2&c[0]?r.return:c[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,c[1])).done)return o;switch(r=0,o&&(c=[2&c[0],o.value]),c[0]){case 0:case 1:o=c;break;case 4:return u.label++,{value:c[1],done:!1};case 5:u.label++,r=c[1],c=[0];continue;case 7:c=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==c[0]&&2!==c[0])){u=0;continue}if(3===c[0]&&(!o||c[1]>o[0]&&c[1]<o[3])){u.label=c[1];break}if(6===c[0]&&u.label<o[1]){u.label=o[1],o=c;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(c);break}o[2]&&u.ops.pop(),u.trys.pop();continue}c=t.call(e,u)}catch(e){c=[6,e],r=0}finally{n=o=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,a])}}}function u(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function c(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),u=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)u.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return u}function a(e,t,n){if(n||2===arguments.length)for(var r,o=0,i=t.length;o<i;o++)!r&&o in t||(r||(r=Array.prototype.slice.call(t,0,o)),r[o]=t[o]);return e.concat(r||Array.prototype.slice.call(t))}function s(e){return this instanceof s?(this.v=e,this):new s(e)}function l(e){var t=e((function(e){Error.call(e),e.stack=(new Error).stack}));return t.prototype=Object.create(Error.prototype),t.prototype.constructor=t,t}Object.create,Object.create,"function"==typeof SuppressedError&&SuppressedError;var d=l((function(e){return function(t){e(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(e,t){return t+1+") "+e.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t}}));function f(e,t){if(e){var n=e.indexOf(t);0<=n&&e.splice(n,1)}}var p=function(){function t(e){this.initialTeardown=e,this.closed=!1,this._parentage=null,this._finalizers=null}return t.prototype.unsubscribe=function(){var t,n,r,o,i;if(!this.closed){this.closed=!0;var s=this._parentage;if(s)if(this._parentage=null,Array.isArray(s))try{for(var l=u(s),f=l.next();!f.done;f=l.next())f.value.remove(this)}catch(e){t={error:e}}finally{try{f&&!f.done&&(n=l.return)&&n.call(l)}finally{if(t)throw t.error}}else s.remove(this);var p=this.initialTeardown;if(e(p))try{p()}catch(e){i=e instanceof d?e.errors:[e]}var h=this._finalizers;if(h){this._finalizers=null;try{for(var v=u(h),b=v.next();!b.done;b=v.next()){var m=b.value;try{y(m)}catch(e){i=null!=i?i:[],e instanceof d?i=a(a([],c(i)),c(e.errors)):i.push(e)}}}catch(e){r={error:e}}finally{try{b&&!b.done&&(o=v.return)&&o.call(v)}finally{if(r)throw r.error}}}if(i)throw new d(i)}},t.prototype.add=function(e){var n;if(e&&e!==this)if(this.closed)y(e);else{if(e instanceof t){if(e.closed||e._hasParent(this))return;e._addParent(this)}(this._finalizers=null!==(n=this._finalizers)&&void 0!==n?n:[]).push(e)}},t.prototype._hasParent=function(e){var t=this._parentage;return t===e||Array.isArray(t)&&t.includes(e)},t.prototype._addParent=function(e){var t=this._parentage;this._parentage=Array.isArray(t)?(t.push(e),t):t?[t,e]:e},t.prototype._removeParent=function(e){var t=this._parentage;t===e?this._parentage=null:Array.isArray(t)&&f(t,e)},t.prototype.remove=function(e){var n=this._finalizers;n&&f(n,e),e instanceof t&&e._removeParent(this)},t.EMPTY=((n=new t).closed=!0,n),t;var n}(),h=p.EMPTY;function v(t){return t instanceof p||t&&"closed"in t&&e(t.remove)&&e(t.add)&&e(t.unsubscribe)}function y(t){e(t)?t():t.unsubscribe()}var b={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1},m={setTimeout:function(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var o=m.delegate;return(null==o?void 0:o.setTimeout)?o.setTimeout.apply(o,a([e,t],c(n))):setTimeout.apply(void 0,a([e,t],c(n)))},clearTimeout:function(e){var t=m.delegate;return((null==t?void 0:t.clearTimeout)||clearTimeout)(e)},delegate:void 0};function g(e){m.setTimeout((function(){var t=b.onUnhandledError;if(!t)throw e;t(e)}))}function w(){}var x=E("C",void 0,void 0);function E(e,t,n){return{kind:e,value:t,error:n}}var C=null;function S(e){if(b.useDeprecatedSynchronousErrorHandling){var t=!C;if(t&&(C={errorThrown:!1,error:null}),e(),t){var n=C,r=n.errorThrown,o=n.error;if(C=null,r)throw o}}else e()}var T=function(e){function t(t){var n=e.call(this)||this;return n.isStopped=!1,t?(n.destination=t,v(t)&&t.add(n)):n.destination=D,n}return r(t,e),t.create=function(e,t,n){return new k(e,t,n)},t.prototype.next=function(e){this.isStopped?O(function(e){return E("N",e,void 0)}(e),this):this._next(e)},t.prototype.error=function(e){this.isStopped?O(E("E",void 0,e),this):(this.isStopped=!0,this._error(e))},t.prototype.complete=function(){this.isStopped?O(x,this):(this.isStopped=!0,this._complete())},t.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,e.prototype.unsubscribe.call(this),this.destination=null)},t.prototype._next=function(e){this.destination.next(e)},t.prototype._error=function(e){try{this.destination.error(e)}finally{this.unsubscribe()}},t.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},t}(p),L=Function.prototype.bind;function _(e,t){return L.call(e,t)}var I=function(){function e(e){this.partialObserver=e}return e.prototype.next=function(e){var t=this.partialObserver;if(t.next)try{t.next(e)}catch(e){A(e)}},e.prototype.error=function(e){var t=this.partialObserver;if(t.error)try{t.error(e)}catch(e){A(e)}else A(e)},e.prototype.complete=function(){var e=this.partialObserver;if(e.complete)try{e.complete()}catch(e){A(e)}},e}(),k=function(t){function n(n,r,o){var i,u,c=t.call(this)||this;return e(n)||!n?i={next:null!=n?n:void 0,error:null!=r?r:void 0,complete:null!=o?o:void 0}:c&&b.useDeprecatedNextContext?((u=Object.create(n)).unsubscribe=function(){return c.unsubscribe()},i={next:n.next&&_(n.next,u),error:n.error&&_(n.error,u),complete:n.complete&&_(n.complete,u)}):i=n,c.destination=new I(i),c}return r(n,t),n}(T);function A(e){var t;b.useDeprecatedSynchronousErrorHandling?(t=e,b.useDeprecatedSynchronousErrorHandling&&C&&(C.errorThrown=!0,C.error=t)):g(e)}function O(e,t){var n=b.onStoppedNotification;n&&m.setTimeout((function(){return n(e,t)}))}var D={closed:!0,next:w,error:function(e){throw e},complete:w};function P(e,t,n,r,o){return new F(e,t,n,r,o)}var F=function(e){function t(t,n,r,o,i,u){var c=e.call(this,t)||this;return c.onFinalize=i,c.shouldUnsubscribe=u,c._next=n?function(e){try{n(e)}catch(e){t.error(e)}}:e.prototype._next,c._error=o?function(e){try{o(e)}catch(e){t.error(e)}finally{this.unsubscribe()}}:e.prototype._error,c._complete=r?function(){try{r()}catch(e){t.error(e)}finally{this.unsubscribe()}}:e.prototype._complete,c}return r(t,e),t.prototype.unsubscribe=function(){var t;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var n=this.closed;e.prototype.unsubscribe.call(this),!n&&(null===(t=this.onFinalize)||void 0===t||t.call(this))}},t}(T);function j(e){return e}function R(n,r,o){var i=e(n)||r||o?{next:n,error:r,complete:o}:n;return i?t((function(e,t){var n;null===(n=i.subscribe)||void 0===n||n.call(i);var r=!0;e.subscribe(P(t,(function(e){var n;null===(n=i.next)||void 0===n||n.call(i,e),t.next(e)}),(function(){var e;r=!1,null===(e=i.complete)||void 0===e||e.call(i),t.complete()}),(function(e){var n;r=!1,null===(n=i.error)||void 0===n||n.call(i,e),t.error(e)}),(function(){var e,t;r&&(null===(e=i.unsubscribe)||void 0===e||e.call(i)),null===(t=i.finalize)||void 0===t||t.call(i)})))})):j}var B=function(){return B=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},B.apply(this,arguments)},q=function(){function e(){this.shape="round",this.color="green",this.body=[{x:1,y:0},{x:0,y:0}],this.length=2,this.direction="right",this.foodType="fruit",this.food=[],this.dimension=10,this.currentFood={x:0,y:0,type:"apple"}}return e.prototype.move=function(e){var t=this,n=!1,r=!1;if(this.checkCollision(e))return{eaten:n,collided:r=!0};for(var o=this.body.length-1;o>0;o--)this.body[o]=this.body[o-1];if(this.body[0]=this.getNextPosition(),console.log(this.body),this.checkFood()){this.body.push(B({},this.body[this.body.length])),n=!0;var i=this.food.find((function(e){return e.type===t.currentFood.type}));i&&(this.color=i.color)}return console.log({eaten:n,collided:r}),{eaten:n,collided:r}},e.prototype.checkFood=function(){return this.body[0].x===this.currentFood.x&&this.body[0].y===this.currentFood.y},e.prototype.changeDirection=function(e){this.direction=e},e.prototype.getNextPosition=function(){switch(this.direction){case"up":return{x:this.body[0].x,y:this.body[0].y-1};case"down":return{x:this.body[0].x,y:this.body[0].y+1};case"left":return{x:this.body[0].x-1,y:this.body[0].y};case"right":return{x:this.body[0].x+1,y:this.body[0].y}}},e.prototype.checkCollision=function(e){var t=this.getNextPosition();if(t.x==this.dimension||t.y==this.dimension||t.x<0||t.y<0)return!0;for(var n=1;n<this.body.length;n++){var r=this.body[n];if(r&&r.x===t.x&&r.y===t.y)return!0}return!1},e.prototype.getShape=function(){return this.shape},e.prototype.setShape=function(e){this.shape=e},e.prototype.getColor=function(){return this.color},e.prototype.setColor=function(e){this.color=e},e.prototype.getBody=function(){return this.body},e.prototype.getLength=function(){return this.length},e.prototype.getDirection=function(){return this.direction},e.prototype.getFoodType=function(){return this.foodType},e.prototype.setFoodType=function(e){this.foodType=e},e.prototype.getFood=function(){return this.food},e.prototype.addFood=function(e){this.food.push(e)},e.prototype.removeFood=function(e){this.food=this.food.filter((function(t){return t.type!==e}))},e.prototype.clearFood=function(){this.food=[]},e.prototype.getDimension=function(){return this.dimension},e.prototype.setDimension=function(e){this.dimension=e},e.prototype.getCurrentFood=function(){return this.currentFood},e.prototype.setCurrentFood=function(e){this.currentFood=e},e}();function U(e,n){return t((function(t,r){var o=0;t.subscribe(P(r,(function(t){r.next(e.call(n,t,o++))})))}))}var H=function(e){return e&&"number"==typeof e.length&&"function"!=typeof e};function M(t){return e(null==t?void 0:t.then)}var N="function"==typeof Symbol&&Symbol.observable||"@@observable";var z=function(){function t(e){e&&(this._subscribe=e)}return t.prototype.lift=function(e){var n=new t;return n.source=this,n.operator=e,n},t.prototype.subscribe=function(t,n,r){var o,i=this,u=(o=t)&&o instanceof T||function(t){return t&&e(t.next)&&e(t.error)&&e(t.complete)}(o)&&v(o)?t:new k(t,n,r);return S((function(){var e=i,t=e.operator,n=e.source;u.add(t?t.call(u,n):n?i._subscribe(u):i._trySubscribe(u))})),u},t.prototype._trySubscribe=function(e){try{return this._subscribe(e)}catch(t){e.error(t)}},t.prototype.forEach=function(e,t){var n=this;return new(t=V(t))((function(t,r){var o=new k({next:function(t){try{e(t)}catch(e){r(e),o.unsubscribe()}},error:r,complete:t});n.subscribe(o)}))},t.prototype._subscribe=function(e){var t;return null===(t=this.source)||void 0===t?void 0:t.subscribe(e)},t.prototype[N]=function(){return this},t.prototype.pipe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return(0===(n=e).length?j:1===n.length?n[0]:function(e){return n.reduce((function(e,t){return t(e)}),e)})(this);var n},t.prototype.toPromise=function(e){var t=this;return new(e=V(e))((function(e,n){var r;t.subscribe((function(e){return r=e}),(function(e){return n(e)}),(function(){return e(r)}))}))},t.create=function(e){return new t(e)},t}();function V(e){var t;return null!==(t=null!=e?e:b.Promise)&&void 0!==t?t:Promise}function G(t){return e(t[N])}function X(t){return Symbol.asyncIterator&&e(null==t?void 0:t[Symbol.asyncIterator])}function J(e){return new TypeError("You provided "+(null!==e&&"object"==typeof e?"an invalid object":"'"+e+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}var Y="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function W(t){return e(null==t?void 0:t[Y])}function K(e){return function(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=n.apply(e,t||[]),i=[];return r={},u("next"),u("throw"),u("return"),r[Symbol.asyncIterator]=function(){return this},r;function u(e){o[e]&&(r[e]=function(t){return new Promise((function(n,r){i.push([e,t,n,r])>1||c(e,t)}))})}function c(e,t){try{(n=o[e](t)).value instanceof s?Promise.resolve(n.value.v).then(a,l):d(i[0][2],n)}catch(e){d(i[0][3],e)}var n}function a(e){c("next",e)}function l(e){c("throw",e)}function d(e,t){e(t),i.shift(),i.length&&c(i[0][0],i[0][1])}}(this,arguments,(function(){var t,n,r;return i(this,(function(o){switch(o.label){case 0:t=e.getReader(),o.label=1;case 1:o.trys.push([1,,9,10]),o.label=2;case 2:return[4,s(t.read())];case 3:return n=o.sent(),r=n.value,n.done?[4,s(void 0)]:[3,5];case 4:return[2,o.sent()];case 5:return[4,s(r)];case 6:return[4,o.sent()];case 7:return o.sent(),[3,2];case 8:return[3,10];case 9:return t.releaseLock(),[7];case 10:return[2]}}))}))}function Q(t){return e(null==t?void 0:t.getReader)}function Z(t){if(t instanceof z)return t;if(null!=t){if(G(t))return i=t,new z((function(t){var n=i[N]();if(e(n.subscribe))return n.subscribe(t);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(H(t))return o=t,new z((function(e){for(var t=0;t<o.length&&!e.closed;t++)e.next(o[t]);e.complete()}));if(M(t))return r=t,new z((function(e){r.then((function(t){e.closed||(e.next(t),e.complete())}),(function(t){return e.error(t)})).then(null,g)}));if(X(t))return $(t);if(W(t))return n=t,new z((function(e){var t,r;try{for(var o=u(n),i=o.next();!i.done;i=o.next()){var c=i.value;if(e.next(c),e.closed)return}}catch(e){t={error:e}}finally{try{i&&!i.done&&(r=o.return)&&r.call(o)}finally{if(t)throw t.error}}e.complete()}));if(Q(t))return $(K(t))}var n,r,o,i;throw J(t)}function $(e){return new z((function(t){(function(e,t){var n,r,o,c,a,s,l,d;return a=this,s=void 0,d=function(){var a,s;return i(this,(function(i){switch(i.label){case 0:i.trys.push([0,5,6,11]),n=function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,n=e[Symbol.asyncIterator];return n?n.call(e):(e=u(e),t={},r("next"),r("throw"),r("return"),t[Symbol.asyncIterator]=function(){return this},t);function r(n){t[n]=e[n]&&function(t){return new Promise((function(r,o){!function(e,t,n,r){Promise.resolve(r).then((function(t){e({value:t,done:n})}),t)}(r,o,(t=e[n](t)).done,t.value)}))}}}(e),i.label=1;case 1:return[4,n.next()];case 2:if((r=i.sent()).done)return[3,4];if(a=r.value,t.next(a),t.closed)return[2];i.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return s=i.sent(),o={error:s},[3,11];case 6:return i.trys.push([6,,9,10]),r&&!r.done&&(c=n.return)?[4,c.call(n)]:[3,8];case 7:i.sent(),i.label=8;case 8:return[3,10];case 9:if(o)throw o.error;return[7];case 10:return[7];case 11:return t.complete(),[2]}}))},new((l=void 0)||(l=Promise))((function(e,t){function n(e){try{o(d.next(e))}catch(e){t(e)}}function r(e){try{o(d.throw(e))}catch(e){t(e)}}function o(t){var o;t.done?e(t.value):(o=t.value,o instanceof l?o:new l((function(e){e(o)}))).then(n,r)}o((d=d.apply(a,s||[])).next())}))})(e,t).catch((function(e){return t.error(e)}))}))}function ee(e,t,n,r,o){void 0===r&&(r=0),void 0===o&&(o=!1);var i=t.schedule((function(){n(),o?e.add(this.schedule(null,r)):this.unsubscribe()}),r);if(e.add(i),!o)return i}function te(e,n){return void 0===n&&(n=0),t((function(t,r){t.subscribe(P(r,(function(t){return ee(r,e,(function(){return r.next(t)}),n)}),(function(){return ee(r,e,(function(){return r.complete()}),n)}),(function(t){return ee(r,e,(function(){return r.error(t)}),n)})))}))}function ne(e,n){return void 0===n&&(n=0),t((function(t,r){r.add(e.schedule((function(){return t.subscribe(r)}),n))}))}function re(e,t){if(!e)throw new Error("Iterable cannot be null");return new z((function(n){ee(n,t,(function(){var r=e[Symbol.asyncIterator]();ee(n,t,(function(){r.next().then((function(e){e.done?n.complete():n.next(e.value)}))}),0,!0)}))}))}function oe(t,n){return n?function(t,n){if(null!=t){if(G(t))return function(e,t){return Z(e).pipe(ne(t),te(t))}(t,n);if(H(t))return function(e,t){return new z((function(n){var r=0;return t.schedule((function(){r===e.length?n.complete():(n.next(e[r++]),n.closed||this.schedule())}))}))}(t,n);if(M(t))return function(e,t){return Z(e).pipe(ne(t),te(t))}(t,n);if(X(t))return re(t,n);if(W(t))return function(t,n){return new z((function(r){var o;return ee(r,n,(function(){o=t[Y](),ee(r,n,(function(){var e,t,n;try{t=(e=o.next()).value,n=e.done}catch(e){return void r.error(e)}n?r.complete():r.next(t)}),0,!0)})),function(){return e(null==o?void 0:o.return)&&o.return()}}))}(t,n);if(Q(t))return function(e,t){return re(K(e),t)}(t,n)}throw J(t)}(t,n):Z(t)}function ie(e){switch(e.responseType){case"json":if("response"in e)return e.response;var t=e;return JSON.parse(t.responseText);case"document":return e.responseXML;default:return"response"in e?e.response:(t=e).responseText}}var ue=function(e,t,n,r){void 0===r&&(r="download_load"),this.originalEvent=e,this.xhr=t,this.request=n,this.type=r;var o=t.status,i=t.responseType;this.status=null!=o?o:0,this.responseType=null!=i?i:"";var u=t.getAllResponseHeaders();this.responseHeaders=u?u.split("\n").reduce((function(e,t){var n=t.indexOf(": ");return e[t.slice(0,n)]=t.slice(n+2),e}),{}):{},this.response=ie(t);var c=e.loaded,a=e.total;this.loaded=c,this.total=a},ce=l((function(e){return function(e,t,n){var r;this.message=e,this.name="AjaxError",this.xhr=t,this.request=n,this.status=t.status,this.responseType=t.responseType;try{r=ie(t)}catch(e){r=t.responseText}this.response=r}})),ae=function(){function e(e,t){return ce.call(this,"ajax timeout",e,t),this.name="AjaxTimeoutError",this}return e.prototype=Object.create(ce.prototype),e}();var se=U((function(e){return e.response}));var le,de=(le=function(e){var t;return t="string"==typeof e?{url:e}:e,new z((function(e){var n,r,i,u=o({async:!0,crossDomain:!1,withCredentials:!1,method:"GET",timeout:0,responseType:"json"},t),c=u.queryParams,a=u.body,s=u.headers,l=u.url;if(!l)throw new TypeError("url is required");if(c)if(l.includes("?")){var d=l.split("?");if(2<d.length)throw new TypeError("invalid url");i=new URLSearchParams(d[1]),new URLSearchParams(c).forEach((function(e,t){return i.set(t,e)})),l=d[0]+"?"+i}else l=l+"?"+(i=new URLSearchParams(c));var f={};if(s)for(var p in s)s.hasOwnProperty(p)&&(f[p.toLowerCase()]=s[p]);var h=u.crossDomain;h||"x-requested-with"in f||(f["x-requested-with"]="XMLHttpRequest");var v=u.withCredentials,y=u.xsrfCookieName,b=u.xsrfHeaderName;if((v||!h)&&y&&b){var m=null!==(r=null===(n=null===document||void 0===document?void 0:document.cookie.match(new RegExp("(^|;\\s*)("+y+")=([^;]*)")))||void 0===n?void 0:n.pop())&&void 0!==r?r:"";m&&(f[b]=m)}var g,w=function(e,t){var n;if(!e||"string"==typeof e||function(e){return"undefined"!=typeof FormData&&e instanceof FormData}(e)||function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams}(e)||function(e){return me(e,"ArrayBuffer")}(e)||function(e){return me(e,"File")}(e)||function(e){return me(e,"Blob")}(e)||function(e){return"undefined"!=typeof ReadableStream&&e instanceof ReadableStream}(e))return e;if(function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView(e)}(e))return e.buffer;if("object"==typeof e)return t["content-type"]=null!==(n=t["content-type"])&&void 0!==n?n:"application/json;charset=utf-8",JSON.stringify(e);throw new TypeError("Unknown body type")}(a,f),x=o(o({},u),{url:l,headers:f,body:w});g=t.createXHR?t.createXHR():new XMLHttpRequest;var E=t.progressSubscriber,C=t.includeDownloadProgress,S=void 0!==C&&C,T=t.includeUploadProgress,L=void 0!==T&&T,_=function(t,n){g.addEventListener(t,(function(){var t,r=n();null===(t=null==E?void 0:E.error)||void 0===t||t.call(E,r),e.error(r)}))};_("timeout",(function(){return new ae(g,x)})),_("abort",(function(){return new ce("aborted",g,x)}));var I=function(e,t){return new ue(t,g,x,e+"_"+t.type)},k=function(t,n,r){t.addEventListener(n,(function(t){e.next(I(r,t))}))};L&&[he,ve,ye].forEach((function(e){return k(g.upload,e,fe)})),E&&[he,ve].forEach((function(e){return g.upload.addEventListener(e,(function(e){var t;return null===(t=null==E?void 0:E.next)||void 0===t?void 0:t.call(E,e)}))})),S&&[he,ve].forEach((function(e){return k(g,e,pe)}));var A=function(t){var n="ajax error"+(t?" "+t:"");e.error(new ce(n,g,x))};g.addEventListener("error",(function(e){var t;null===(t=null==E?void 0:E.error)||void 0===t||t.call(E,e),A()})),g.addEventListener(ye,(function(t){var n,r,o=g.status;if(o<400){null===(n=null==E?void 0:E.complete)||void 0===n||n.call(E);var i=void 0;try{i=I(pe,t)}catch(t){return void e.error(t)}e.next(i),e.complete()}else null===(r=null==E?void 0:E.error)||void 0===r||r.call(E,t),A(o)}));var O=x.user,D=x.method,P=x.async;for(var p in O?g.open(D,l,P,O,x.password):g.open(D,l,P),P&&(g.timeout=x.timeout,g.responseType=x.responseType),"withCredentials"in g&&(g.withCredentials=x.withCredentials),f)f.hasOwnProperty(p)&&g.setRequestHeader(p,f[p]);return w?g.send(w):g.send(),function(){g&&4!==g.readyState&&g.abort()}}))},le.get=function(e,t){return de({method:"GET",url:e,headers:t})},le.post=function(e,t,n){return de({method:"POST",url:e,body:t,headers:n})},le.delete=function(e,t){return de({method:"DELETE",url:e,headers:t})},le.put=function(e,t,n){return de({method:"PUT",url:e,body:t,headers:n})},le.patch=function(e,t,n){return de({method:"PATCH",url:e,body:t,headers:n})},le.getJSON=function(e,t){return se(de({method:"GET",url:e,headers:t}))},le),fe="upload",pe="download",he="loadstart",ve="progress",ye="load",be=Object.prototype.toString;function me(e,t){return be.call(e)==="[object "+t+"]"}var ge="http://localhost:3000",we=de.getJSON("".concat(ge,"/db")).pipe(U((function(e){return e})),function e(n){return t((function(t,r){var o,i=null,u=!1;i=t.subscribe(P(r,void 0,void 0,(function(c){o=Z(n(c,e(n)(t))),i?(i.unsubscribe(),i=null,o.subscribe(r)):u=!0}))),u&&(i.unsubscribe(),i=null,o.subscribe(r))}))}((function(e){throw console.error(e),e})));function xe(e,t,n,r){var o=e.width/t,i=e.height/t,u=e.getContext("2d");u&&(u.clearRect(0,0,e.width,e.height),function(e,t,n,r,o){e.strokeStyle="green",e.lineWidth=1.2;for(var i=0;i<t;i+=r)e.beginPath(),e.moveTo(i,0),e.lineTo(i,n),e.stroke();for(var u=0;u<n;u+=o)e.beginPath(),e.moveTo(0,u),e.lineTo(t,u),e.stroke()}(u,e.width,e.height,o,i),function(e,t,n,r,o,i){var u,c=0,a=0,s=new Image;if(!i)return c=o.getCurrentFood().x,a=o.getCurrentFood().y,u=o.getCurrentFood().type,console.log("crtam hranu staru"),console.log(o.getCurrentFood()),s.src="src\\assets\\"+u+".png",void(s.onload=function(){e.drawImage(s,c*t,a*n,t,n)});if(0===o.getFood().length)u="fruit"===o.getFoodType()?"apple":"carrot";else if(1===o.getFood().length)u=o.getFood()[0].type;else{var l=Math.floor(Math.random()*o.getFood().length);u=o.getFood()[l].type}s.src="src\\assets\\"+u+".png",s.onload=function(){var i,l,d;do{d=!1,i=Math.floor(Math.random()*r),l=Math.floor(Math.random()*r),c=i,a=l,o.setCurrentFood({x:c,y:a,type:u});for(var f=0,p=o.getBody();f<p.length;f++){var h=p[f];if(h&&h.x===i&&h.y===l){d=!0;break}}}while(d);e.drawImage(s,i*t,l*n,t,n)}}(u,o,i,t,n,r),function(e,t,n,r,o,i,u){e.strokeStyle="black",e.lineWidth=1.5;for(var c=0,a=0,s=u.getBody();a<s.length;a++){var l=s[a];if(l){var d=l.x*r,f=l.y*o;if(e.fillStyle=0==c?"dimgray":u.getColor(),"round"===u.getShape()){var p=Math.min(r,o)/1.5;e.beginPath(),e.moveTo(d+p,f),e.lineTo(d+r-p,f),e.quadraticCurveTo(d+r,f,d+r,f+p),e.lineTo(d+r,f+o-p),e.quadraticCurveTo(d+r,f+o,d+r-p,f+o),e.lineTo(d+p,f+o),e.quadraticCurveTo(d,f+o,d,f+o-p),e.lineTo(d,f+p),e.quadraticCurveTo(d,f,d+p,f),e.closePath(),e.fill(),e.stroke()}else e.fillRect(d,f,r,o),e.strokeRect(d,f,r,o);c++}}}(u,e.width,e.height,o,i,0,n))}function Ee(n,r,o){return void 0===o&&(o=1/0),e(r)?Ee((function(e,t){return U((function(n,o){return r(e,n,t,o)}))(Z(n(e,t)))}),o):("number"==typeof r&&(o=r),t((function(e,t){return function(e,t,n,r,o,i,u,c){var a=[],s=0,l=0,d=!1,f=function(){!d||a.length||s||t.complete()},p=function(e){return s<r?h(e):a.push(e)},h=function(e){s++;var o=!1;Z(n(e,l++)).subscribe(P(t,(function(e){t.next(e)}),(function(){o=!0}),void 0,(function(){if(o)try{s--;for(;a.length&&s<r;)e=void 0,e=a.shift(),h(e);f()}catch(e){t.error(e)}var e})))};return e.subscribe(P(t,p,(function(){d=!0,f()}))),function(){}}(e,t,n,o)})))}var Ce=Array.isArray;function Se(e){return U((function(t){return function(e,t){return Ce(t)?e.apply(void 0,a([],c(t))):e(t)}(e,t)}))}var Te=["addListener","removeListener"],Le=["addEventListener","removeEventListener"],_e=["on","off"];function Ie(t,n,r,o){if(e(r)&&(o=r,r=void 0),o)return Ie(t,n,r).pipe(Se(o));var i=c(function(t){return e(t.addEventListener)&&e(t.removeEventListener)}(t)?Le.map((function(e){return function(o){return t[e](n,o,r)}})):function(t){return e(t.addListener)&&e(t.removeListener)}(t)?Te.map(ke(t,n)):function(t){return e(t.on)&&e(t.off)}(t)?_e.map(ke(t,n)):[],2),u=i[0],a=i[1];if(!u&&H(t))return Ee((function(e){return Ie(e,n,r)}))(Z(t));if(!u)throw new TypeError("Invalid event target");return new z((function(e){var t=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return e.next(1<t.length?t:t[0])};return u(t),function(){return a(t)}}))}function ke(e,t){return function(n){return function(r){return e[n](t,r)}}}function Ae(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=e.length;if(0===n)throw new Error("list of properties cannot be empty.");return U((function(t){for(var r=t,o=0;o<n;o++){var i=null==r?void 0:r[e[o]];if(void 0===i)return;r=i}return r}))}function Oe(e,n){return t((function(t,r){var o=null,i=0,u=!1,c=function(){return u&&!o&&r.complete()};t.subscribe(P(r,(function(t){null==o||o.unsubscribe();var u=0,a=i++;Z(e(t,a)).subscribe(o=P(r,(function(e){return r.next(n?n(t,e,a,u++):e)}),(function(){o=null,c()})))}),(function(){u=!0,c()})))}))}function De(e){return void 0===e&&(e=1/0),Ee(j,e)}var Pe=new z((function(e){return e.complete()}));function Fe(t){return t&&e(t.schedule)}function je(e){return e[e.length-1]}function Re(e){return Fe(je(e))?e.pop():void 0}function Be(e,t){return"number"==typeof je(e)?e.pop():t}function qe(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=Re(e),r=Be(e,1/0),o=e;return o.length?1===o.length?Z(o[0]):De(r)(oe(o,n)):Pe}var Ue=l((function(e){return function(){e(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"}})),He=function(e){function t(){var t=e.call(this)||this;return t.closed=!1,t.currentObservers=null,t.observers=[],t.isStopped=!1,t.hasError=!1,t.thrownError=null,t}return r(t,e),t.prototype.lift=function(e){var t=new Me(this,this);return t.operator=e,t},t.prototype._throwIfClosed=function(){if(this.closed)throw new Ue},t.prototype.next=function(e){var t=this;S((function(){var n,r;if(t._throwIfClosed(),!t.isStopped){t.currentObservers||(t.currentObservers=Array.from(t.observers));try{for(var o=u(t.currentObservers),i=o.next();!i.done;i=o.next())i.value.next(e)}catch(e){n={error:e}}finally{try{i&&!i.done&&(r=o.return)&&r.call(o)}finally{if(n)throw n.error}}}}))},t.prototype.error=function(e){var t=this;S((function(){if(t._throwIfClosed(),!t.isStopped){t.hasError=t.isStopped=!0,t.thrownError=e;for(var n=t.observers;n.length;)n.shift().error(e)}}))},t.prototype.complete=function(){var e=this;S((function(){if(e._throwIfClosed(),!e.isStopped){e.isStopped=!0;for(var t=e.observers;t.length;)t.shift().complete()}}))},t.prototype.unsubscribe=function(){this.isStopped=this.closed=!0,this.observers=this.currentObservers=null},Object.defineProperty(t.prototype,"observed",{get:function(){var e;return(null===(e=this.observers)||void 0===e?void 0:e.length)>0},enumerable:!1,configurable:!0}),t.prototype._trySubscribe=function(t){return this._throwIfClosed(),e.prototype._trySubscribe.call(this,t)},t.prototype._subscribe=function(e){return this._throwIfClosed(),this._checkFinalizedStatuses(e),this._innerSubscribe(e)},t.prototype._innerSubscribe=function(e){var t=this,n=this,r=n.hasError,o=n.isStopped,i=n.observers;return r||o?h:(this.currentObservers=null,i.push(e),new p((function(){t.currentObservers=null,f(i,e)})))},t.prototype._checkFinalizedStatuses=function(e){var t=this,n=t.hasError,r=t.thrownError,o=t.isStopped;n?e.error(r):o&&e.complete()},t.prototype.asObservable=function(){var e=new z;return e.source=this,e},t.create=function(e,t){return new Me(e,t)},t}(z),Me=function(e){function t(t,n){var r=e.call(this)||this;return r.destination=t,r.source=n,r}return r(t,e),t.prototype.next=function(e){var t,n;null===(n=null===(t=this.destination)||void 0===t?void 0:t.next)||void 0===n||n.call(t,e)},t.prototype.error=function(e){var t,n;null===(n=null===(t=this.destination)||void 0===t?void 0:t.error)||void 0===n||n.call(t,e)},t.prototype.complete=function(){var e,t;null===(t=null===(e=this.destination)||void 0===e?void 0:e.complete)||void 0===t||t.call(e)},t.prototype._subscribe=function(e){var t,n;return null!==(n=null===(t=this.source)||void 0===t?void 0:t.subscribe(e))&&void 0!==n?n:h},t}(He),Ne=function(e){function t(t){var n=e.call(this)||this;return n._value=t,n}return r(t,e),Object.defineProperty(t.prototype,"value",{get:function(){return this.getValue()},enumerable:!1,configurable:!0}),t.prototype._subscribe=function(t){var n=e.prototype._subscribe.call(this,t);return!n.closed&&t.next(this._value),n},t.prototype.getValue=function(){var e=this,t=e.hasError,n=e.thrownError,r=e._value;if(t)throw n;return this._throwIfClosed(),r},t.prototype.next=function(t){e.prototype.next.call(this,this._value=t)},t}(He);var ze=function(e){function t(t,n){return e.call(this)||this}return r(t,e),t.prototype.schedule=function(e,t){return void 0===t&&(t=0),this},t}(p),Ve={setInterval:function(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var o=Ve.delegate;return(null==o?void 0:o.setInterval)?o.setInterval.apply(o,a([e,t],c(n))):setInterval.apply(void 0,a([e,t],c(n)))},clearInterval:function(e){var t=Ve.delegate;return((null==t?void 0:t.clearInterval)||clearInterval)(e)},delegate:void 0},Ge=function(e){function t(t,n){var r=e.call(this,t,n)||this;return r.scheduler=t,r.work=n,r.pending=!1,r}return r(t,e),t.prototype.schedule=function(e,t){var n;if(void 0===t&&(t=0),this.closed)return this;this.state=e;var r=this.id,o=this.scheduler;return null!=r&&(this.id=this.recycleAsyncId(o,r,t)),this.pending=!0,this.delay=t,this.id=null!==(n=this.id)&&void 0!==n?n:this.requestAsyncId(o,this.id,t),this},t.prototype.requestAsyncId=function(e,t,n){return void 0===n&&(n=0),Ve.setInterval(e.flush.bind(e,this),n)},t.prototype.recycleAsyncId=function(e,t,n){if(void 0===n&&(n=0),null!=n&&this.delay===n&&!1===this.pending)return t;null!=t&&Ve.clearInterval(t)},t.prototype.execute=function(e,t){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var n=this._execute(e,t);if(n)return n;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},t.prototype._execute=function(e,t){var n,r=!1;try{this.work(e)}catch(e){r=!0,n=e||new Error("Scheduled action threw falsy error")}if(r)return this.unsubscribe(),n},t.prototype.unsubscribe=function(){if(!this.closed){var t=this.id,n=this.scheduler,r=n.actions;this.work=this.state=this.scheduler=null,this.pending=!1,f(r,this),null!=t&&(this.id=this.recycleAsyncId(n,t,null)),this.delay=null,e.prototype.unsubscribe.call(this)}},t}(ze),Xe={now:function(){return(Xe.delegate||Date).now()},delegate:void 0},Je=function(){function e(t,n){void 0===n&&(n=e.now),this.schedulerActionCtor=t,this.now=n}return e.prototype.schedule=function(e,t,n){return void 0===t&&(t=0),new this.schedulerActionCtor(this,e).schedule(n,t)},e.now=Xe.now,e}(),Ye=new(function(e){function t(t,n){void 0===n&&(n=Je.now);var r=e.call(this,t,n)||this;return r.actions=[],r._active=!1,r}return r(t,e),t.prototype.flush=function(e){var t=this.actions;if(this._active)t.push(e);else{var n;this._active=!0;do{if(n=e.execute(e.state,e.delay))break}while(e=t.shift());if(this._active=!1,n){for(;e=t.shift();)e.unsubscribe();throw n}}},t}(Je))(Ge),We=Ye;var Ke=Array.isArray,Qe=Object.getPrototypeOf,Ze=Object.prototype,$e=Object.keys;function et(e,t,n){e?ee(n,e,t):t()}function tt(e,n){return t((function(t,r){var o=0;t.subscribe(P(r,(function(t){return e.call(n,t,o++)&&r.next(t)})))}))}var nt=Array.isArray;var rt,ot,it,ut,ct,at,st,lt,dt,ft,pt,ht,vt=new q;(function(e){var t=document.createElement("div");t.classList.add("upper-container"),e.appendChild(t);var n=document.createElement("h1");n.textContent="rxj",t.appendChild(n);var r=document.createElement("img");r.src="src\\assets\\snake (1).png",r.alt="snake",r.classList.add("sss"),t.appendChild(r);var o=document.createElement("h1");o.textContent="nake",t.appendChild(o);var i=document.createElement("div");i.classList.add("lower-container"),e.appendChild(i);var u=document.createElement("div");u.classList.add("left-container"),i.appendChild(u);var c=document.createElement("div");c.classList.add("game-container"),i.appendChild(c);var a=document.createElement("canvas");a.id="game-canvas",c.appendChild(a),xe(a,10,new q,!0);var s=document.createElement("div");s.classList.add("right-container"),i.appendChild(s);var l=document.createElement("div");l.classList.add("settings-section"),function(e){var t=document.createElement("div");t.classList.add("dimDiv"),t.id="dimDiv",e.appendChild(t);var n=document.createElement("div");n.classList.add("shapeDiv"),n.id="shapeDiv",e.appendChild(n);var r=document.createElement("div");r.classList.add("foodDiv"),r.id="foodDiv",e.appendChild(r);var o=document.createElement("div");o.classList.add("fruitDiv"),o.id="fruitDiv",e.appendChild(o);var i=document.createElement("div");i.classList.add("vegetableDiv"),i.id="vegetableDiv",e.appendChild(i);var u=document.createElement("h3");u.classList.add("dimension"),u.textContent="Dimension",t.appendChild(u);var c=document.createElement("input");c.type="range",c.min="5",c.max="10",c.step="1",c.classList.add("slider"),c.id="slider",t.appendChild(c);var a=document.createElement("text");a.classList.add("sliderValue"),a.id="sliderValue",a.textContent="10",t.appendChild(a)}(l);var d=we.pipe(R((function(e){!function(e,t){var n=document.getElementById("shapeDiv"),r=document.createElement("h3");r.classList.add("shape"),r.textContent="Snake shape",n.appendChild(r);var o=document.createElement("div");o.classList.add("shapeRadioButtons"),n.appendChild(o);var i={round:"●",square:"■"};e.forEach((function(e){var t=document.createElement("div");t.classList.add("shapeRadioContainer");var n=document.createElement("input");n.type="radio",n.name="shapes",n.value=e.type,n.id=e.id.toString();var r=document.createElement("label");r.classList.add("shapeLabel"),r.innerHTML="".concat(i[e.type]),t.appendChild(r),t.appendChild(n),o.appendChild(t)}))}(e.shapes),function(e,t,n,r){var o=document.getElementById("foodDiv"),i=document.createElement("h3");i.classList.add("foodType"),i.textContent="Food",o.appendChild(i);var u=document.createElement("div");u.classList.add("foodRadioButtons"),o.appendChild(u),e.forEach((function(e){var t=document.createElement("div");t.classList.add("foodRadioContainer");var n=document.createElement("input");n.type="radio",n.name="food",n.value=e.type,n.id=e.id.toString();var r=document.createElement("label");r.classList.add("foodLabel"),r.innerHTML="".concat(e.type),t.appendChild(r),t.appendChild(n),u.appendChild(t)}));var c=document.getElementById("fruitDiv");t.forEach((function(e){var t=document.createElement("div");t.classList.add("fruitCheckboxContainer");var n=document.createElement("input");n.type="checkbox",n.name="fruit",n.value=e.type;var r=document.createElement("img");r.classList.add("fruitLabel"),r.src="src\\assets\\".concat(e.type,".png"),t.appendChild(r),t.appendChild(n),c.appendChild(t)})),c.style.display="none";var a=document.getElementById("vegetableDiv");n.forEach((function(e){var t=document.createElement("div");t.classList.add("vegetableCheckboxContainer");var n=document.createElement("input");n.type="checkbox",n.name="vegetable",n.value=e.type;var r=document.createElement("img");r.classList.add("vegetableLabel"),r.src="src\\assets\\".concat(e.type,".png"),t.appendChild(r),t.appendChild(n),a.appendChild(t)})),a.style.display="none"}(e.food,e.fruit,e.vegetable)})));u.appendChild(l);var f=document.createElement("button");f.textContent="START GAME",f.id="start-button",u.appendChild(f);var p=document.createElement("button");p.textContent="Show Results",p.id="show-results-button",s.appendChild(p);var h=document.createElement("div");return h.classList.add("results-section"),h.id="results-section",h.style.display="none",function(e){var t=document.createElement("div");t.classList.add("current-score-div"),t.id="current-score-div",e.appendChild(t);var n=document.createElement("div");n.classList.add("best-score-div"),n.id="best-score-div",e.appendChild(n);var r=document.createElement("h3");r.classList.add("current-score"),r.textContent="Current Score",t.appendChild(r);var o=document.createElement("div");o.classList.add("cs-div"),t.appendChild(o);var i=document.createElement("img");i.classList.add("cs-img"),i.id="cs-img",i.src="src\\assets\\apple.png",i.alt="apple",o.appendChild(i);var u=document.createElement("span");u.classList.add("current-score-value"),u.id="current-score-value",u.textContent="0",o.appendChild(u);var c=document.createElement("h3");c.classList.add("best-score"),c.textContent="Best Score",n.appendChild(c);var a=document.createElement("div");a.classList.add("bs-div"),n.appendChild(a);var s=document.createElement("img");s.classList.add("bs-img"),s.id="bs-img",s.src="src\\assets\\king.png",s.alt="crown",a.appendChild(s);var l=document.createElement("span");l.classList.add("best-score-value"),l.id="best-score-value",l.textContent="0",a.appendChild(l);var d=document.createElement("div");d.classList.add("rules-div"),e.appendChild(d);var f=document.createElement("h3");f.classList.add("rules"),f.textContent="Rules",d.appendChild(f);var p=document.createElement("ul");p.classList.add("rules-list"),d.appendChild(p);var h=document.createElement("li");h.classList.add("rule1"),h.textContent="Eat food to grow",p.appendChild(h);var v=document.createElement("li");v.classList.add("rule2"),v.textContent="Avoid walls and your tail",p.appendChild(v);var y=document.createElement("li");y.classList.add("rule3"),y.textContent="Change settings to make the game more interesting",p.appendChild(y);var b=document.createElement("li");b.classList.add("rule4"),b.textContent="Have fun!",p.appendChild(b)}(h),s.appendChild(h),d})(document.body).pipe(R((function(e){st=document.querySelectorAll('input[name="shapes"]'),lt=document.querySelectorAll('input[name="food"]'),dt=document.getElementById("fruitDiv"),ft=document.getElementById("vegetableDiv"),pt=document.querySelectorAll('input[name="fruit"]'),ht=document.querySelectorAll('input[name="vegetable"]'),ot=document.getElementById("slider"),rt=document.getElementById("game-canvas"),it=document.getElementById("cs-img");var n=Ie(ot,"input").pipe(Ae("target","value"),R((function(e){document.getElementById("sliderValue").innerText=e.toString(),vt.setDimension(e)}))),r=Ie(st,"change").pipe(Ae("target","value"),R((function(e){vt.setShape(e)}))),o=Ie(lt,"change").pipe(Ae("target","value"),R((function(e){vt.setFoodType(e),vt.clearFood(),"fruit"===e?(dt.style.display="flex",ft.style.display="none",it.src="src\\assets\\apple.png"):(dt.style.display="none",ft.style.display="flex",it.src="src\\assets\\carrot.png")}))),i=Ie(pt,"change").pipe(Ae("target","value")),u=Ie(ht,"change").pipe(Ae("target","value"));qe(n,r,o,i.pipe(function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];var r=Re(e),o=Be(e,1/0);return e=function(e){return 1===e.length&&nt(e[0])?e[0]:e}(e),t((function(t,n){De(o)(oe(a([t],c(e)),r)).subscribe(n)}))}(u),R((function(e){vt.getFood().some((function(t){return t.type===e}))&&vt.removeFood(e)})),Oe((function(e){return"fruit"==vt.getFoodType()?(t=e,oe(fetch("".concat(ge,"/fruit/?type=").concat(t)).then((function(e){if(e.ok)return e.json();console.log(e.statusText)})).catch((function(e){return console.log(e)}))).pipe(U((function(e){return e[0]})))).pipe(R((function(e){vt.addFood(e)}))):function(e){return oe(fetch("".concat(ge,"/vegetable/?type=").concat(e)).then((function(e){if(e.ok)return e.json();console.log(e.statusText)})).catch((function(e){return console.log(e)}))).pipe(U((function(e){return e[0]})))}(e).pipe(R((function(e){vt.addFood(e)})));var t})))).subscribe((function(){xe(rt,ot.value,vt,!0)}))}))).subscribe();var yt,bt,mt,gt,wt,xt=new He,Et=new He,Ct=Et.asObservable(),St=new He,Tt=new Ne(0),Lt=Tt.asObservable(),_t=Ie(document,"keydown").pipe(U((function(e){return e.key})),(void 0===bt&&(bt=j),yt=null!=yt?yt:function(e,t){return e===t},t((function(e,t){var n,r=!0;e.subscribe(P(t,(function(e){var o=bt(e);!r&&yt(n,o)||(r=!1,n=o,t.next(e))})))})))),It=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=Re(t),o=function(t){return e(je(t))?t.pop():void 0}(t),i=function(e){if(1===e.length){var t=e[0];if(Ke(t))return{args:t,keys:null};if((r=t)&&"object"==typeof r&&Qe(r)===Ze){var n=$e(t);return{args:n.map((function(e){return t[e]})),keys:n}}}var r;return{args:e,keys:null}}(t),u=i.args,c=i.keys;if(0===u.length)return oe([],r);var a=new z(function(e,t,n){return void 0===n&&(n=j),function(r){et(t,(function(){for(var o=e.length,i=new Array(o),u=o,c=o,a=function(o){et(t,(function(){var a=oe(e[o],t),s=!1;a.subscribe(P(r,(function(e){i[o]=e,s||(s=!0,c--),c||r.next(n(i.slice()))}),(function(){--u||r.complete()})))}),r)},s=0;s<o;s++)a(s)}),r)}}(u,r,c?function(e){return function(e,t){return e.reduce((function(e,n,r){return e[n]=t[r],e}),{})}(c,e)}:j));return o?a.pipe(Se(o)):a}([_t,(void 0===(mt=600)&&(mt=0),void 0===gt&&(gt=Ye),mt<0&&(mt=0),function(e,t,n){void 0===e&&(e=0),void 0===n&&(n=We);var r=-1;return null!=t&&(Fe(t)?n=t:r=t),new z((function(t){var o,i=(o=e)instanceof Date&&!isNaN(o)?+e-n.now():e;i<0&&(i=0);var u=0;return n.schedule((function(){t.closed||(t.next(u++),0<=r?this.schedule(void 0,r):t.complete())}),i)}))}(mt,mt,gt))]).pipe(U((function(e){var t=e[0];return e[1],t})),(wt=xt,t((function(e,t){Z(wt).subscribe(P(t,(function(){return t.complete()}),w)),!t.closed&&e.subscribe(t)})))),kt=(Ie(ut=document.getElementById("start-button"),"click").pipe(R((function(){ut.disabled=!0,ot.disabled=!0,st.forEach((function(e){e.disabled=!0})),lt.forEach((function(e){e.disabled=!0})),pt.forEach((function(e){e.disabled=!0})),ht.forEach((function(e){e.disabled=!0}))})),Oe((function(){return It}))).subscribe((function(e){var t,n,r;"ArrowUp"===e&&"down"!==vt.getDirection()?vt.changeDirection("up"):"ArrowDown"===e&&"up"!==vt.getDirection()?vt.changeDirection("down"):"ArrowLeft"===e&&"right"!==vt.getDirection()?vt.changeDirection("left"):"ArrowRight"===e&&"left"!==vt.getDirection()&&vt.changeDirection("right"),n=(t=vt.move(rt)).eaten,r=t.collided,Et.next(n),ct=document.getElementById("current-score-value"),kt=parseInt(ct.innerText),st=document.querySelectorAll('input[name="shapes"]'),lt=document.querySelectorAll('input[name="food"]'),dt=document.getElementById("fruitDiv"),ft=document.getElementById("vegetableDiv"),pt=document.querySelectorAll('input[name="fruit"]'),ht=document.querySelectorAll('input[name="vegetable"]'),r?(alert("GAME OVER"),xt.next(null),Tt.next(kt),St.next(null),(vt=new q).setDimension(ot.value),ut.disabled=!1,ot.disabled=!1,st.forEach((function(e){e.disabled=!1,e.checked=!1})),lt.forEach((function(e){e.disabled=!1,e.checked=!1})),pt.forEach((function(e){e.disabled=!1,e.checked=!1})),ht.forEach((function(e){e.disabled=!1,e.checked=!1})),st[0].checked=!0,xe(rt,ot.value,vt,!0)):xe(rt,ot.value,vt,n)})),Ie(document.getElementById("show-results-button"),"click").pipe(R((function(){(at=document.getElementById("results-section")).style.display="none"===at.style.display?"block":"none"}))).subscribe(),0),At=0;qe(Ct.pipe(tt((function(e){return 1==e})),(1,U((function(){return 1})))),St.pipe(Oe((function(){return function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return oe(e,Re(e))}(0)})))).pipe(function(e,n){return t(function(e,t,n,r,o){return function(r,o){var i=n,u=t,c=0;r.subscribe(P(o,(function(t){var n=c++;u=i?e(u,t,n):(i=!0,t),o.next(u)}),undefined))}}(e,n,arguments.length>=2))}((function(e,t){return 0===t?t:e+t}),0)).subscribe((function(e){kt=e,(ct=document.getElementById("current-score-value")).innerText=e.toString()})),Lt.pipe(tt((function(e){return e>At}))).subscribe((function(e){At=e,document.getElementById("best-score-value").innerText=e.toString()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,