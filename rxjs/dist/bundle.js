(()=>{"use strict";function e(e){return"function"==typeof e}function t(t){return function(n){if(function(t){return e(null==t?void 0:t.lift)}(n))return n.lift((function(e){try{return t(e,this)}catch(e){this.error(e)}}));throw new TypeError("Unable to lift unknown Observable type")}}var n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},n(e,t)};function r(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}var o=function(){return o=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},o.apply(this,arguments)};function i(e,t){var n,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(a){return function(c){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,a[0]&&(u=0)),u;)try{if(n=1,r&&(o=2&a[0]?r.return:a[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,a[1])).done)return o;switch(r=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return u.label++,{value:a[1],done:!1};case 5:u.label++,r=a[1],a=[0];continue;case 7:a=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){u=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){u.label=a[1];break}if(6===a[0]&&u.label<o[1]){u.label=o[1],o=a;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(a);break}o[2]&&u.ops.pop(),u.trys.pop();continue}a=t.call(e,u)}catch(e){a=[6,e],r=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,c])}}}function u(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function a(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),u=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)u.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return u}function c(e,t,n){if(n||2===arguments.length)for(var r,o=0,i=t.length;o<i;o++)!r&&o in t||(r||(r=Array.prototype.slice.call(t,0,o)),r[o]=t[o]);return e.concat(r||Array.prototype.slice.call(t))}function s(e){return this instanceof s?(this.v=e,this):new s(e)}function l(e){var t=e((function(e){Error.call(e),e.stack=(new Error).stack}));return t.prototype=Object.create(Error.prototype),t.prototype.constructor=t,t}Object.create,Object.create,"function"==typeof SuppressedError&&SuppressedError;var d=l((function(e){return function(t){e(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(e,t){return t+1+") "+e.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t}}));function f(e,t){if(e){var n=e.indexOf(t);0<=n&&e.splice(n,1)}}var p=function(){function t(e){this.initialTeardown=e,this.closed=!1,this._parentage=null,this._finalizers=null}var n;return t.prototype.unsubscribe=function(){var t,n,r,o,i;if(!this.closed){this.closed=!0;var s=this._parentage;if(s)if(this._parentage=null,Array.isArray(s))try{for(var l=u(s),f=l.next();!f.done;f=l.next())f.value.remove(this)}catch(e){t={error:e}}finally{try{f&&!f.done&&(n=l.return)&&n.call(l)}finally{if(t)throw t.error}}else s.remove(this);var p=this.initialTeardown;if(e(p))try{p()}catch(e){i=e instanceof d?e.errors:[e]}var h=this._finalizers;if(h){this._finalizers=null;try{for(var y=u(h),m=y.next();!m.done;m=y.next()){var b=m.value;try{v(b)}catch(e){i=null!=i?i:[],e instanceof d?i=c(c([],a(i)),a(e.errors)):i.push(e)}}}catch(e){r={error:e}}finally{try{m&&!m.done&&(o=y.return)&&o.call(y)}finally{if(r)throw r.error}}}if(i)throw new d(i)}},t.prototype.add=function(e){var n;if(e&&e!==this)if(this.closed)v(e);else{if(e instanceof t){if(e.closed||e._hasParent(this))return;e._addParent(this)}(this._finalizers=null!==(n=this._finalizers)&&void 0!==n?n:[]).push(e)}},t.prototype._hasParent=function(e){var t=this._parentage;return t===e||Array.isArray(t)&&t.includes(e)},t.prototype._addParent=function(e){var t=this._parentage;this._parentage=Array.isArray(t)?(t.push(e),t):t?[t,e]:e},t.prototype._removeParent=function(e){var t=this._parentage;t===e?this._parentage=null:Array.isArray(t)&&f(t,e)},t.prototype.remove=function(e){var n=this._finalizers;n&&f(n,e),e instanceof t&&e._removeParent(this)},t.EMPTY=((n=new t).closed=!0,n),t}();function h(t){return t instanceof p||t&&"closed"in t&&e(t.remove)&&e(t.add)&&e(t.unsubscribe)}function v(t){e(t)?t():t.unsubscribe()}p.EMPTY;var y={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1},m={setTimeout:function(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var o=m.delegate;return(null==o?void 0:o.setTimeout)?o.setTimeout.apply(o,c([e,t],a(n))):setTimeout.apply(void 0,c([e,t],a(n)))},clearTimeout:function(e){var t=m.delegate;return((null==t?void 0:t.clearTimeout)||clearTimeout)(e)},delegate:void 0};function b(e){m.setTimeout((function(){var t=y.onUnhandledError;if(!t)throw e;t(e)}))}function g(){}var w=x("C",void 0,void 0);function x(e,t,n){return{kind:e,value:t,error:n}}var E=null,T=function(e){function t(t){var n=e.call(this)||this;return n.isStopped=!1,t?(n.destination=t,h(t)&&t.add(n)):n.destination=k,n}return r(t,e),t.create=function(e,t,n){return new _(e,t,n)},t.prototype.next=function(e){this.isStopped?P(function(e){return x("N",e,void 0)}(e),this):this._next(e)},t.prototype.error=function(e){this.isStopped?P(x("E",void 0,e),this):(this.isStopped=!0,this._error(e))},t.prototype.complete=function(){this.isStopped?P(w,this):(this.isStopped=!0,this._complete())},t.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,e.prototype.unsubscribe.call(this),this.destination=null)},t.prototype._next=function(e){this.destination.next(e)},t.prototype._error=function(e){try{this.destination.error(e)}finally{this.unsubscribe()}},t.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},t}(p),S=Function.prototype.bind;function C(e,t){return S.call(e,t)}var L=function(){function e(e){this.partialObserver=e}return e.prototype.next=function(e){var t=this.partialObserver;if(t.next)try{t.next(e)}catch(e){D(e)}},e.prototype.error=function(e){var t=this.partialObserver;if(t.error)try{t.error(e)}catch(e){D(e)}else D(e)},e.prototype.complete=function(){var e=this.partialObserver;if(e.complete)try{e.complete()}catch(e){D(e)}},e}(),_=function(t){function n(n,r,o){var i,u,a=t.call(this)||this;return e(n)||!n?i={next:null!=n?n:void 0,error:null!=r?r:void 0,complete:null!=o?o:void 0}:a&&y.useDeprecatedNextContext?((u=Object.create(n)).unsubscribe=function(){return a.unsubscribe()},i={next:n.next&&C(n.next,u),error:n.error&&C(n.error,u),complete:n.complete&&C(n.complete,u)}):i=n,a.destination=new L(i),a}return r(n,t),n}(T);function D(e){var t;y.useDeprecatedSynchronousErrorHandling?(t=e,y.useDeprecatedSynchronousErrorHandling&&E&&(E.errorThrown=!0,E.error=t)):b(e)}function P(e,t){var n=y.onStoppedNotification;n&&m.setTimeout((function(){return n(e,t)}))}var k={closed:!0,next:g,error:function(e){throw e},complete:g};function A(e,t,n,r,o){return new O(e,t,n,r,o)}var O=function(e){function t(t,n,r,o,i,u){var a=e.call(this,t)||this;return a.onFinalize=i,a.shouldUnsubscribe=u,a._next=n?function(e){try{n(e)}catch(e){t.error(e)}}:e.prototype._next,a._error=o?function(e){try{o(e)}catch(e){t.error(e)}finally{this.unsubscribe()}}:e.prototype._error,a._complete=r?function(){try{r()}catch(e){t.error(e)}finally{this.unsubscribe()}}:e.prototype._complete,a}return r(t,e),t.prototype.unsubscribe=function(){var t;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var n=this.closed;e.prototype.unsubscribe.call(this),!n&&(null===(t=this.onFinalize)||void 0===t||t.call(this))}},t}(T);function j(e){return e}function I(n,r,o){var i=e(n)||r||o?{next:n,error:r,complete:o}:n;return i?t((function(e,t){var n;null===(n=i.subscribe)||void 0===n||n.call(i);var r=!0;e.subscribe(A(t,(function(e){var n;null===(n=i.next)||void 0===n||n.call(i,e),t.next(e)}),(function(){var e;r=!1,null===(e=i.complete)||void 0===e||e.call(i),t.complete()}),(function(e){var n;r=!1,null===(n=i.error)||void 0===n||n.call(i,e),t.error(e)}),(function(){var e,t;r&&(null===(e=i.unsubscribe)||void 0===e||e.call(i)),null===(t=i.finalize)||void 0===t||t.call(i)})))})):j}var R=function(){function e(){this.shape="round",this.color="green",this.body=[{x:1,y:0},{x:0,y:0}],this.length=2,this.direction="right",this.foodType="fruit",this.food=[],this.dimension=10}return e.prototype.move=function(){console.log(this.body.length);for(var e=this.body.length-1;e>0;e--)this.body[e]=this.body[e-1];this.body[0]=this.getNextPosition()},e.prototype.changeDirection=function(e){this.direction=e},e.prototype.getNextPosition=function(){var e=this.body.length-1;switch(this.direction){case"up":return{x:this.body[e].x,y:this.body[e].y-1};case"down":return{x:this.body[e].x,y:this.body[e].y+1};case"left":return{x:this.body[e].x-1,y:this.body[e].y};case"right":return{x:this.body[e].x+1,y:this.body[e].y}}},e.prototype.getShape=function(){return this.shape},e.prototype.setShape=function(e){this.shape=e},e.prototype.getColor=function(){return this.color},e.prototype.setColor=function(e){this.color=e},e.prototype.getBody=function(){return this.body},e.prototype.getLength=function(){return this.length},e.prototype.getDirection=function(){return this.direction},e.prototype.getFoodType=function(){return this.foodType},e.prototype.setFoodType=function(e){this.foodType=e},e.prototype.getFood=function(){return this.food},e.prototype.addFood=function(e){this.food.push(e)},e.prototype.removeFood=function(e){this.food=this.food.filter((function(t){return t.type!==e}))},e.prototype.clearFood=function(){this.food=[]},e.prototype.getDimension=function(){return this.dimension},e.prototype.setDimension=function(e){this.dimension=e},e}();function F(e,n){return t((function(t,r){var o=0;t.subscribe(A(r,(function(t){r.next(e.call(n,t,o++))})))}))}var B=function(e){return e&&"number"==typeof e.length&&"function"!=typeof e};function q(t){return e(null==t?void 0:t.then)}var N="function"==typeof Symbol&&Symbol.observable||"@@observable";var U=function(){function t(e){e&&(this._subscribe=e)}return t.prototype.lift=function(e){var n=new t;return n.source=this,n.operator=e,n},t.prototype.subscribe=function(t,n,r){var o,i=this,u=(o=t)&&o instanceof T||function(t){return t&&e(t.next)&&e(t.error)&&e(t.complete)}(o)&&h(o)?t:new _(t,n,r);return function(e){if(y.useDeprecatedSynchronousErrorHandling){var t=!E;if(t&&(E={errorThrown:!1,error:null}),e(),t){var n=E,r=n.errorThrown,o=n.error;if(E=null,r)throw o}}else e()}((function(){var e=i,t=e.operator,n=e.source;u.add(t?t.call(u,n):n?i._subscribe(u):i._trySubscribe(u))})),u},t.prototype._trySubscribe=function(e){try{return this._subscribe(e)}catch(t){e.error(t)}},t.prototype.forEach=function(e,t){var n=this;return new(t=H(t))((function(t,r){var o=new _({next:function(t){try{e(t)}catch(e){r(e),o.unsubscribe()}},error:r,complete:t});n.subscribe(o)}))},t.prototype._subscribe=function(e){var t;return null===(t=this.source)||void 0===t?void 0:t.subscribe(e)},t.prototype[N]=function(){return this},t.prototype.pipe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return(0===(n=e).length?j:1===n.length?n[0]:function(e){return n.reduce((function(e,t){return t(e)}),e)})(this);var n},t.prototype.toPromise=function(e){var t=this;return new(e=H(e))((function(e,n){var r;t.subscribe((function(e){return r=e}),(function(e){return n(e)}),(function(){return e(r)}))}))},t.create=function(e){return new t(e)},t}();function H(e){var t;return null!==(t=null!=e?e:y.Promise)&&void 0!==t?t:Promise}function M(t){return e(t[N])}function z(t){return Symbol.asyncIterator&&e(null==t?void 0:t[Symbol.asyncIterator])}function G(e){return new TypeError("You provided "+(null!==e&&"object"==typeof e?"an invalid object":"'"+e+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}var X="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function J(t){return e(null==t?void 0:t[X])}function V(e){return function(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=n.apply(e,t||[]),i=[];return r={},u("next"),u("throw"),u("return"),r[Symbol.asyncIterator]=function(){return this},r;function u(e){o[e]&&(r[e]=function(t){return new Promise((function(n,r){i.push([e,t,n,r])>1||a(e,t)}))})}function a(e,t){try{(n=o[e](t)).value instanceof s?Promise.resolve(n.value.v).then(c,l):d(i[0][2],n)}catch(e){d(i[0][3],e)}var n}function c(e){a("next",e)}function l(e){a("throw",e)}function d(e,t){e(t),i.shift(),i.length&&a(i[0][0],i[0][1])}}(this,arguments,(function(){var t,n,r;return i(this,(function(o){switch(o.label){case 0:t=e.getReader(),o.label=1;case 1:o.trys.push([1,,9,10]),o.label=2;case 2:return[4,s(t.read())];case 3:return n=o.sent(),r=n.value,n.done?[4,s(void 0)]:[3,5];case 4:return[2,o.sent()];case 5:return[4,s(r)];case 6:return[4,o.sent()];case 7:return o.sent(),[3,2];case 8:return[3,10];case 9:return t.releaseLock(),[7];case 10:return[2]}}))}))}function Y(t){return e(null==t?void 0:t.getReader)}function W(t){if(t instanceof U)return t;if(null!=t){if(M(t))return i=t,new U((function(t){var n=i[N]();if(e(n.subscribe))return n.subscribe(t);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(B(t))return o=t,new U((function(e){for(var t=0;t<o.length&&!e.closed;t++)e.next(o[t]);e.complete()}));if(q(t))return r=t,new U((function(e){r.then((function(t){e.closed||(e.next(t),e.complete())}),(function(t){return e.error(t)})).then(null,b)}));if(z(t))return K(t);if(J(t))return n=t,new U((function(e){var t,r;try{for(var o=u(n),i=o.next();!i.done;i=o.next()){var a=i.value;if(e.next(a),e.closed)return}}catch(e){t={error:e}}finally{try{i&&!i.done&&(r=o.return)&&r.call(o)}finally{if(t)throw t.error}}e.complete()}));if(Y(t))return K(V(t))}var n,r,o,i;throw G(t)}function K(e){return new U((function(t){(function(e,t){var n,r,o,a,c,s,l,d;return c=this,s=void 0,d=function(){var c,s;return i(this,(function(i){switch(i.label){case 0:i.trys.push([0,5,6,11]),n=function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,n=e[Symbol.asyncIterator];return n?n.call(e):(e=u(e),t={},r("next"),r("throw"),r("return"),t[Symbol.asyncIterator]=function(){return this},t);function r(n){t[n]=e[n]&&function(t){return new Promise((function(r,o){!function(e,t,n,r){Promise.resolve(r).then((function(t){e({value:t,done:n})}),t)}(r,o,(t=e[n](t)).done,t.value)}))}}}(e),i.label=1;case 1:return[4,n.next()];case 2:if((r=i.sent()).done)return[3,4];if(c=r.value,t.next(c),t.closed)return[2];i.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return s=i.sent(),o={error:s},[3,11];case 6:return i.trys.push([6,,9,10]),r&&!r.done&&(a=n.return)?[4,a.call(n)]:[3,8];case 7:i.sent(),i.label=8;case 8:return[3,10];case 9:if(o)throw o.error;return[7];case 10:return[7];case 11:return t.complete(),[2]}}))},new((l=void 0)||(l=Promise))((function(e,t){function n(e){try{o(d.next(e))}catch(e){t(e)}}function r(e){try{o(d.throw(e))}catch(e){t(e)}}function o(t){var o;t.done?e(t.value):(o=t.value,o instanceof l?o:new l((function(e){e(o)}))).then(n,r)}o((d=d.apply(c,s||[])).next())}))})(e,t).catch((function(e){return t.error(e)}))}))}function Q(e,t,n,r,o){void 0===r&&(r=0),void 0===o&&(o=!1);var i=t.schedule((function(){n(),o?e.add(this.schedule(null,r)):this.unsubscribe()}),r);if(e.add(i),!o)return i}function Z(e,n){return void 0===n&&(n=0),t((function(t,r){t.subscribe(A(r,(function(t){return Q(r,e,(function(){return r.next(t)}),n)}),(function(){return Q(r,e,(function(){return r.complete()}),n)}),(function(t){return Q(r,e,(function(){return r.error(t)}),n)})))}))}function $(e,n){return void 0===n&&(n=0),t((function(t,r){r.add(e.schedule((function(){return t.subscribe(r)}),n))}))}function ee(e,t){if(!e)throw new Error("Iterable cannot be null");return new U((function(n){Q(n,t,(function(){var r=e[Symbol.asyncIterator]();Q(n,t,(function(){r.next().then((function(e){e.done?n.complete():n.next(e.value)}))}),0,!0)}))}))}function te(t,n){return n?function(t,n){if(null!=t){if(M(t))return function(e,t){return W(e).pipe($(t),Z(t))}(t,n);if(B(t))return function(e,t){return new U((function(n){var r=0;return t.schedule((function(){r===e.length?n.complete():(n.next(e[r++]),n.closed||this.schedule())}))}))}(t,n);if(q(t))return function(e,t){return W(e).pipe($(t),Z(t))}(t,n);if(z(t))return ee(t,n);if(J(t))return function(t,n){return new U((function(r){var o;return Q(r,n,(function(){o=t[X](),Q(r,n,(function(){var e,t,n;try{t=(e=o.next()).value,n=e.done}catch(e){return void r.error(e)}n?r.complete():r.next(t)}),0,!0)})),function(){return e(null==o?void 0:o.return)&&o.return()}}))}(t,n);if(Y(t))return function(e,t){return ee(V(e),t)}(t,n)}throw G(t)}(t,n):W(t)}function ne(e){switch(e.responseType){case"json":if("response"in e)return e.response;var t=e;return JSON.parse(t.responseText);case"document":return e.responseXML;default:return"response"in e?e.response:(t=e).responseText}}var re=function(e,t,n,r){void 0===r&&(r="download_load"),this.originalEvent=e,this.xhr=t,this.request=n,this.type=r;var o=t.status,i=t.responseType;this.status=null!=o?o:0,this.responseType=null!=i?i:"";var u=t.getAllResponseHeaders();this.responseHeaders=u?u.split("\n").reduce((function(e,t){var n=t.indexOf(": ");return e[t.slice(0,n)]=t.slice(n+2),e}),{}):{},this.response=ne(t);var a=e.loaded,c=e.total;this.loaded=a,this.total=c},oe=l((function(e){return function(e,t,n){var r;this.message=e,this.name="AjaxError",this.xhr=t,this.request=n,this.status=t.status,this.responseType=t.responseType;try{r=ne(t)}catch(e){r=t.responseText}this.response=r}})),ie=function(){function e(e,t){return oe.call(this,"ajax timeout",e,t),this.name="AjaxTimeoutError",this}return e.prototype=Object.create(oe.prototype),e}();var ue=F((function(e){return e.response}));var ae,ce=(ae=function(e){var t;return t="string"==typeof e?{url:e}:e,new U((function(e){var n,r,i,u=o({async:!0,crossDomain:!1,withCredentials:!1,method:"GET",timeout:0,responseType:"json"},t),a=u.queryParams,c=u.body,s=u.headers,l=u.url;if(!l)throw new TypeError("url is required");if(a)if(l.includes("?")){var d=l.split("?");if(2<d.length)throw new TypeError("invalid url");i=new URLSearchParams(d[1]),new URLSearchParams(a).forEach((function(e,t){return i.set(t,e)})),l=d[0]+"?"+i}else l=l+"?"+(i=new URLSearchParams(a));var f={};if(s)for(var p in s)s.hasOwnProperty(p)&&(f[p.toLowerCase()]=s[p]);var h=u.crossDomain;h||"x-requested-with"in f||(f["x-requested-with"]="XMLHttpRequest");var v=u.withCredentials,y=u.xsrfCookieName,m=u.xsrfHeaderName;if((v||!h)&&y&&m){var b=null!==(r=null===(n=null===document||void 0===document?void 0:document.cookie.match(new RegExp("(^|;\\s*)("+y+")=([^;]*)")))||void 0===n?void 0:n.pop())&&void 0!==r?r:"";b&&(f[m]=b)}var g,w=function(e,t){var n;if(!e||"string"==typeof e||function(e){return"undefined"!=typeof FormData&&e instanceof FormData}(e)||function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams}(e)||function(e){return ve(e,"ArrayBuffer")}(e)||function(e){return ve(e,"File")}(e)||function(e){return ve(e,"Blob")}(e)||function(e){return"undefined"!=typeof ReadableStream&&e instanceof ReadableStream}(e))return e;if(function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView(e)}(e))return e.buffer;if("object"==typeof e)return t["content-type"]=null!==(n=t["content-type"])&&void 0!==n?n:"application/json;charset=utf-8",JSON.stringify(e);throw new TypeError("Unknown body type")}(c,f),x=o(o({},u),{url:l,headers:f,body:w});g=t.createXHR?t.createXHR():new XMLHttpRequest;var E=t.progressSubscriber,T=t.includeDownloadProgress,S=void 0!==T&&T,C=t.includeUploadProgress,L=void 0!==C&&C,_=function(t,n){g.addEventListener(t,(function(){var t,r=n();null===(t=null==E?void 0:E.error)||void 0===t||t.call(E,r),e.error(r)}))};_("timeout",(function(){return new ie(g,x)})),_("abort",(function(){return new oe("aborted",g,x)}));var D=function(e,t){return new re(t,g,x,e+"_"+t.type)},P=function(t,n,r){t.addEventListener(n,(function(t){e.next(D(r,t))}))};L&&[de,fe,pe].forEach((function(e){return P(g.upload,e,se)})),E&&[de,fe].forEach((function(e){return g.upload.addEventListener(e,(function(e){var t;return null===(t=null==E?void 0:E.next)||void 0===t?void 0:t.call(E,e)}))})),S&&[de,fe].forEach((function(e){return P(g,e,le)}));var k=function(t){var n="ajax error"+(t?" "+t:"");e.error(new oe(n,g,x))};g.addEventListener("error",(function(e){var t;null===(t=null==E?void 0:E.error)||void 0===t||t.call(E,e),k()})),g.addEventListener(pe,(function(t){var n,r,o=g.status;if(o<400){null===(n=null==E?void 0:E.complete)||void 0===n||n.call(E);var i=void 0;try{i=D(le,t)}catch(t){return void e.error(t)}e.next(i),e.complete()}else null===(r=null==E?void 0:E.error)||void 0===r||r.call(E,t),k(o)}));var A=x.user,O=x.method,j=x.async;for(var p in A?g.open(O,l,j,A,x.password):g.open(O,l,j),j&&(g.timeout=x.timeout,g.responseType=x.responseType),"withCredentials"in g&&(g.withCredentials=x.withCredentials),f)f.hasOwnProperty(p)&&g.setRequestHeader(p,f[p]);return w?g.send(w):g.send(),function(){g&&4!==g.readyState&&g.abort()}}))},ae.get=function(e,t){return ce({method:"GET",url:e,headers:t})},ae.post=function(e,t,n){return ce({method:"POST",url:e,body:t,headers:n})},ae.delete=function(e,t){return ce({method:"DELETE",url:e,headers:t})},ae.put=function(e,t,n){return ce({method:"PUT",url:e,body:t,headers:n})},ae.patch=function(e,t,n){return ce({method:"PATCH",url:e,body:t,headers:n})},ae.getJSON=function(e,t){return ue(ce({method:"GET",url:e,headers:t}))},ae),se="upload",le="download",de="loadstart",fe="progress",pe="load",he=Object.prototype.toString;function ve(e,t){return he.call(e)==="[object "+t+"]"}var ye="http://localhost:3000",me=ce.getJSON("".concat(ye,"/db")).pipe(F((function(e){return e})),function e(n){return t((function(t,r){var o,i=null,u=!1;i=t.subscribe(A(r,void 0,void 0,(function(a){o=W(n(a,e(n)(t))),i?(i.unsubscribe(),i=null,o.subscribe(r)):u=!0}))),u&&(i.unsubscribe(),i=null,o.subscribe(r))}))}((function(e){throw console.error(e),e})));function be(e,t,n){var r=e.width/t,o=e.height/t,i=e.getContext("2d");i&&(i.clearRect(0,0,e.width,e.height),function(e,t,n,r,o){e.strokeStyle="green",e.lineWidth=1.2;for(var i=0;i<t;i+=r)e.beginPath(),e.moveTo(i,0),e.lineTo(i,n),e.stroke();for(var u=0;u<n;u+=o)e.beginPath(),e.moveTo(0,u),e.lineTo(t,u),e.stroke()}(i,e.width,e.height,r,o),function(e,t,n,r,o,i,u){var a,c=u.getFood();a=0===c.length?"fruit"===u.getFoodType()?"apple":"carrot":1===c.length?c[0].type:c[Math.floor(Math.random()*c.length)].type;var s=new Image;s.src="src\\assets\\"+a+".png",s.onload=function(){var t,n,a;do{a=!1,t=Math.floor(Math.random()*i),n=Math.floor(Math.random()*i),console.log(t,n),t,n;for(var c=0,l=u.getBody();c<l.length;c++){var d=l[c];if(d.x===t&&d.y===n){a=!0;break}}}while(a);e.drawImage(s,t*r,n*o,r,o)}}(i,e.width,e.height,r,o,t,n),function(e,t,n,r,o,i,u){e.fillStyle=u.getColor(),e.strokeStyle="black",e.lineWidth=1.5;for(var a=0,c=u.getBody();a<c.length;a++){var s=c[a],l=s.x*r,d=s.y*o;if("round"===u.getShape()){var f=Math.min(r,o)/1.5;e.beginPath(),e.moveTo(l+f,d),e.lineTo(l+r-f,d),e.quadraticCurveTo(l+r,d,l+r,d+f),e.lineTo(l+r,d+o-f),e.quadraticCurveTo(l+r,d+o,l+r-f,d+o),e.lineTo(l+f,d+o),e.quadraticCurveTo(l,d+o,l,d+o-f),e.lineTo(l,d+f),e.quadraticCurveTo(l,d,l+f,d),e.closePath(),e.fill(),e.stroke()}else e.fillRect(l,d,r,o),e.strokeRect(l,d,r,o)}}(i,e.width,e.height,r,o,0,n))}function ge(n,r,o){return void 0===o&&(o=1/0),e(r)?ge((function(e,t){return F((function(n,o){return r(e,n,t,o)}))(W(n(e,t)))}),o):("number"==typeof r&&(o=r),t((function(e,t){return function(e,t,n,r,o,i,u,a){var c=[],s=0,l=0,d=!1,f=function(){!d||c.length||s||t.complete()},p=function(e){return s<r?h(e):c.push(e)},h=function(e){s++;var o=!1;W(n(e,l++)).subscribe(A(t,(function(e){t.next(e)}),(function(){o=!0}),void 0,(function(){if(o)try{s--;for(;c.length&&s<r;)e=void 0,e=c.shift(),h(e);f()}catch(e){t.error(e)}var e})))};return e.subscribe(A(t,p,(function(){d=!0,f()}))),function(){}}(e,t,n,o)})))}var we=Array.isArray;var xe=["addListener","removeListener"],Ee=["addEventListener","removeEventListener"],Te=["on","off"];function Se(t,n,r,o){if(e(r)&&(o=r,r=void 0),o)return Se(t,n,r).pipe((i=o,F((function(e){return function(e,t){return we(t)?e.apply(void 0,c([],a(t))):e(t)}(i,e)}))));var i,u=a(function(t){return e(t.addEventListener)&&e(t.removeEventListener)}(t)?Ee.map((function(e){return function(o){return t[e](n,o,r)}})):function(t){return e(t.addListener)&&e(t.removeListener)}(t)?xe.map(Ce(t,n)):function(t){return e(t.on)&&e(t.off)}(t)?Te.map(Ce(t,n)):[],2),s=u[0],l=u[1];if(!s&&B(t))return ge((function(e){return Se(e,n,r)}))(W(t));if(!s)throw new TypeError("Invalid event target");return new U((function(e){var t=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return e.next(1<t.length?t:t[0])};return s(t),function(){return l(t)}}))}function Ce(e,t){return function(n){return function(r){return e[n](t,r)}}}var Le=new R;(function(e){var t=document.createElement("div");t.classList.add("upper-container"),e.appendChild(t);var n=document.createElement("h1");n.textContent="rxj",t.appendChild(n);var r=document.createElement("img");r.src="src\\assets\\snake (1).png",r.alt="snake",r.classList.add("sss"),t.appendChild(r);var o=document.createElement("h1");o.textContent="nake",t.appendChild(o);var i=document.createElement("div");i.classList.add("lower-container"),e.appendChild(i);var u=document.createElement("div");u.classList.add("left-container"),i.appendChild(u);var a=document.createElement("div");a.classList.add("game-container"),i.appendChild(a);var c=document.createElement("canvas");c.id="game-canvas",a.appendChild(c),be(c,10,new R);var s=document.createElement("div");s.classList.add("right-container"),i.appendChild(s);var l=document.createElement("div");l.classList.add("settings-section"),function(e){var t=document.createElement("div");t.classList.add("dimDiv"),t.id="dimDiv",e.appendChild(t);var n=document.createElement("div");n.classList.add("shapeDiv"),n.id="shapeDiv",e.appendChild(n);var r=document.createElement("div");r.classList.add("foodDiv"),r.id="foodDiv",e.appendChild(r);var o=document.createElement("div");o.classList.add("fruitDiv"),o.id="fruitDiv",e.appendChild(o);var i=document.createElement("div");i.classList.add("vegetableDiv"),i.id="vegetableDiv",e.appendChild(i);var u=document.createElement("h3");u.classList.add("dimension"),u.textContent="Dimension",t.appendChild(u);var a=document.createElement("input");a.type="range",a.min="5",a.max="10",a.step="1",a.classList.add("slider"),a.id="slider",t.appendChild(a);var c=document.createElement("text");c.classList.add("sliderValue"),c.id="sliderValue",c.textContent="10",t.appendChild(c)}(l);var d=me.pipe(I((function(e){!function(e,t){var n=document.getElementById("shapeDiv"),r=document.createElement("h3");r.classList.add("shape"),r.textContent="Snake shape",n.appendChild(r);var o=document.createElement("div");o.classList.add("shapeRadioButtons"),n.appendChild(o);var i={round:"●",square:"■"};e.forEach((function(e){var t=document.createElement("div");t.classList.add("shapeRadioContainer");var n=document.createElement("input");n.type="radio",n.name="shapes",n.value=e.type,n.id=e.id.toString();var r=document.createElement("label");r.classList.add("shapeLabel"),r.innerHTML="".concat(i[e.type]),t.appendChild(r),t.appendChild(n),o.appendChild(t)}))}(e.shapes),function(e,t,n,r){var o=document.getElementById("foodDiv"),i=document.createElement("h3");i.classList.add("foodType"),i.textContent="Food",o.appendChild(i);var u=document.createElement("div");u.classList.add("foodRadioButtons"),o.appendChild(u),e.forEach((function(e){var t=document.createElement("div");t.classList.add("foodRadioContainer");var n=document.createElement("input");n.type="radio",n.name="food",n.value=e.type,n.id=e.id.toString();var r=document.createElement("label");r.classList.add("foodLabel"),r.innerHTML="".concat(e.type),t.appendChild(r),t.appendChild(n),u.appendChild(t)}));var a=document.getElementById("fruitDiv");t.forEach((function(e){var t=document.createElement("div");t.classList.add("fruitCheckboxContainer");var n=document.createElement("input");n.type="checkbox",n.name="fruit",n.value=e.type;var r=document.createElement("img");r.classList.add("fruitLabel"),r.src="src\\assets\\".concat(e.type,".png"),t.appendChild(r),t.appendChild(n),a.appendChild(t)})),a.style.display="none";var c=document.getElementById("vegetableDiv");n.forEach((function(e){var t=document.createElement("div");t.classList.add("vegetableCheckboxContainer");var n=document.createElement("input");n.type="checkbox",n.name="vegetable",n.value=e.type;var r=document.createElement("img");r.classList.add("vegetableLabel"),r.src="src\\assets\\".concat(e.type,".png"),t.appendChild(r),t.appendChild(n),c.appendChild(t)})),c.style.display="none"}(e.food,e.fruit,e.vegetable)})));u.appendChild(l);var f=document.createElement("button");f.textContent="START GAME",f.id="start-button",u.appendChild(f);var p=document.createElement("button");p.textContent="Show Results",p.id="show-results-button",s.appendChild(p);var h=document.createElement("div");return h.classList.add("results-section"),h.style.display="none",s.appendChild(h),p.addEventListener("click",(function(){h.style.display="none"===h.style.display?"block":"none"})),d})(document.body).pipe(I((function(e){var t=document.getElementById("slider"),n=document.querySelectorAll('input[name="shapes"]'),r=document.querySelectorAll('input[name="food"]'),o=document.getElementById("fruitDiv"),i=document.getElementById("vegetableDiv"),u=document.querySelectorAll('input[name="fruit"]'),a=document.querySelectorAll('input[name="vegetable"]'),c=document.getElementById("game-canvas");Se(t,"input").subscribe((function(e){var t=e.target.value;document.getElementById("sliderValue").innerText=t.toString(),Le.setDimension(t),be(c,t,Le)})),Se(n,"change").subscribe((function(e){var n=e.target.value;Le.setShape(n),be(c,t.value,Le)})),Se(r,"change").subscribe((function(e){"fruit"===e.target.value?(Le.setFoodType("fruit"),o.style.display="flex",i.style.display="none"):(Le.setFoodType("vegetable"),o.style.display="none",i.style.display="flex"),Le.clearFood(),be(c,t.value,Le)})),Se(u,"change").subscribe((function(){var e,n=event.target.value;Le.getFood().some((function(e){return e.type===n}))?(Le.removeFood(n),be(c,t.value,Le)):(e=n,te(fetch("".concat(ye,"/fruit/?type=").concat(e)).then((function(e){if(e.ok)return e.json();console.log(e.statusText)})).catch((function(e){return console.log(e)}))).pipe(F((function(e){return e[0]})))).subscribe((function(e){Le.addFood(e),be(c,t.value,Le)}))})),Se(a,"change").subscribe((function(){var e,n=event.target.value;Le.getFood().some((function(e){return e.type===n}))?(Le.removeFood(n),be(c,t.value,Le)):(e=n,te(fetch("".concat(ye,"/vegetable/?type=").concat(e)).then((function(e){if(e.ok)return e.json();console.log(e.statusText)})).catch((function(e){return console.log(e)}))).pipe(F((function(e){return e[0]})))).subscribe((function(e){Le.addFood(e),be(c,t.value,Le)}))}))}))).subscribe();var _e,De,Pe=document.getElementById("game-canvas"),ke=document.getElementById("slider");console.log(ke),console.log(ke.value),console.log(Le.getDimension()),Se(document,"keydown").pipe(F((function(e){return e.key})),(void 0===De&&(De=j),_e=null!=_e?_e:function(e,t){return e===t},t((function(e,t){var n,r=!0;e.subscribe(A(t,(function(e){var o=De(e);!r&&_e(n,o)||(r=!1,n=o,t.next(e))})))})))).subscribe((function(e){"ArrowUp"===e&&"down"!==Le.getDirection()?Le.changeDirection("up"):"ArrowDown"===e&&"up"!==Le.getDirection()?Le.changeDirection("down"):"ArrowLeft"===e&&"right"!==Le.getDirection()?Le.changeDirection("left"):"ArrowRight"===e&&"left"!==Le.getDirection()&&Le.changeDirection("right"),Le.move(),console.log(Le.getBody()),be(Pe,ke.value,Le),function(e){return e.getNextPosition().x===Pe.width/e.getDimension()||e.getNextPosition().y===Pe.height/e.getDimension()||e.getNextPosition().x<0||e.getNextPosition().y<0}(Le)&&console.log("game over")}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,